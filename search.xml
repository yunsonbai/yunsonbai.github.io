<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[yunorm]]></title>
      <url>http://yunsonbai.github.io/2019/03/21/yunorm/</url>
      <content type="html"><![CDATA[<p>Yunorm is a small ORM. </p>
<ul>
<li>a small ORM but It’s very practical</li>
<li>python3.5 and 3.6 (developed with 3.5)</li>
<li>support mysql,support mysql connections pool</li>
<li>can help you to maintenance the DB connection</li>
<li>support to create multiple database connections<a id="more"></a>
</li>
</ul>
<p><img src="https://yunsonbai.github.io/images/yunorm.jpg" alt="iamge"></p>
<h2 id="github"><a href="#github" class="headerlink" title="github"></a>github</h2><p><a href="https://github.com/yunsonbai/yunorm" target="_blank" rel="noopener">yunorm</a></p>
<h2 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h2><ul>
<li>mysqlclient==1.3.14</li>
</ul>
<h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><ul>
<li>git clone <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:yunsonbai/yunorm.git</li>
<li>python setup.py install</li>
</ul>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><p> <a href="https://github.com/yunsonbai/yunorm/tree/master/example" target="_blank" rel="noopener">example</a></p>
<h2 id="note"><a href="#note" class="headerlink" title="note"></a>note</h2><p>If you want to use yunorm, the table that you will operate on must be exist in DB.</p>
<h2 id="Documentation"><a href="#Documentation" class="headerlink" title="Documentation"></a>Documentation</h2><ul>
<li><p>field</p>
<ul>
<li>Prikey</li>
<li>CharField</li>
<li>IntegerField</li>
<li>DateTimeField</li>
<li>DecimalField</li>
</ul>
</li>
<li><p>filter operator</p>
<ul>
<li>lt: ‘&lt;’</li>
<li>gt: ‘&gt;’</li>
<li>une: ‘!=’</li>
<li>lte: ‘&lt;=’</li>
<li>gte: ‘&gt;=’</li>
<li>in: ‘in’</li>
</ul>
</li>
<li><p>function</p>
<ul>
<li>filter</li>
<li>create</li>
<li>update</li>
<li>delete </li>
<li>limit</li>
<li>order_by</li>
<li>group_by</li>
<li>desc_order_by</li>
<li>first</li>
<li>all</li>
<li>count</li>
</ul>
</li>
<li><p>note<br>if you want to get db data, you need call data() in the end</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">res = TestModel.objects.filter(**select_term).all().data()</span><br><span class="line">res = TestModel.objects.filter(**select_term).limit(<span class="number">0</span>, <span class="number">10</span>).data()</span><br><span class="line">res = TestModel.objects.filter(</span><br><span class="line">  **select_term).order_by(id).limit(<span class="number">0</span>, <span class="number">7</span>).data()</span><br></pre></td></tr></table></figure>
</li>
<li><p>Get Data</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select_term = &#123;</span><br><span class="line">  &quot;zan_num__gt&quot;: 0,</span><br><span class="line">  &quot;id__gt&quot;: 3700000</span><br><span class="line">&#125;</span><br><span class="line">res = TestModel.objects.filter(**select_term).all().data()</span><br><span class="line">feed = TestModel.objects.filter(id=3700000).first().data()</span><br></pre></td></tr></table></figure>
</li>
<li><p>Create Data</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_create_orm</span><span class="params">(i)</span>:</span></span><br><span class="line">  create_data = &#123;</span><br><span class="line">    <span class="string">'label'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'title'</span>: <span class="string">'test_&#123;0&#125;'</span>.format(i)</span><br><span class="line">  &#125;</span><br><span class="line">  TestOrm.create(**create_data)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Update Data</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_update_orm</span><span class="params">()</span>:</span></span><br><span class="line">  update_data = &#123;</span><br><span class="line">    <span class="string">'title'</span>: <span class="string">'hello yunsonbai'</span>,</span><br><span class="line">    <span class="string">'label'</span>: <span class="number">10</span></span><br><span class="line">  &#125;</span><br><span class="line">  res = TestOrm.objects.filter(id__in=[<span class="number">1</span>, <span class="number">2</span>]).data()</span><br><span class="line">  <span class="keyword">for</span> r <span class="keyword">in</span> res:</span><br><span class="line">    r.update(**update_data)</span><br><span class="line">  <span class="comment"># or</span></span><br><span class="line">  res = TestOrm.objects.filter(id=<span class="number">3</span>).first().data()</span><br><span class="line">  res.update(**update_data)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Delete Data</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_delete_orm</span><span class="params">()</span>:</span></span><br><span class="line">  res = TestOrm.objects.filter(id__in=[<span class="number">7</span>, ]).data()</span><br><span class="line">  <span class="keyword">for</span> r <span class="keyword">in</span> res:</span><br><span class="line">    result = r.delete()</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 工具包 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> orm </tag>
            
            <tag> python orm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ysab]]></title>
      <url>http://yunsonbai.github.io/2019/02/24/ysab/</url>
      <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>最近需要测试一个服务的性能，要求是<strong>重放线上真实请求(请求参数不一致)</strong>。比较常用的就是Apache的ab压测工具，有点出入的是如果想发送不同的get请求需要用脚本去写for循环去压。最后基于此用Golang实现了一个类似于ab的工具ysab，支持一次压测发送不同url、不同参数的功能。欢迎大家使用。</p>
<h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://github.com/yunsonbai/ysab" target="_blank" rel="noopener">Ysab</a></p>
<a id="more"></a>
<p><img src="https://yunsonbai.github.io/images/golang/ysab2.jpeg" alt="ysab"></p>
<h2 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h2><ul>
<li>发送单条url</li>
<li>发送多条url</li>
<li>支持GET、POST、PUT、DELETE</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul>
<li>step 1:<ul>
<li>Linux: wget <a href="https://github.com/yunsonbai/ysab/releases/download/v0.1/ysab_Linux_0.1.tgz" target="_blank" rel="noopener">https://github.com/yunsonbai/ysab/releases/download/v0.1/ysab_Linux_0.1.tgz</a></li>
<li>MacOS: wget <a href="https://github.com/yunsonbai/ysab/releases/download/v0.1/ysab_macOS_0.1.tgz" target="_blank" rel="noopener">https://github.com/yunsonbai/ysab/releases/download/v0.1/ysab_macOS_0.1.tgz</a></li>
</ul>
</li>
<li><p>step 2:</p>
<ul>
<li>tar -zxvf ysab_x_x.tgz</li>
</ul>
</li>
<li><p>step 3:</p>
<ul>
<li>mv ysab /usr/bin/</li>
</ul>
</li>
</ul>
<h2 id="部分例子"><a href="#部分例子" class="headerlink" title="部分例子"></a>部分例子</h2><ul>
<li>1: ysab -n 900 -r 30 -u <a href="http://10.10.10.10:8080/test" target="_blank" rel="noopener">http://10.10.10.10:8080/test</a></li>
<li>2: ysab -n 900 -urlsfile ./examples/urls.txt</li>
<li>3: ysab -n 900 -r 30 -u <a href="http://10.10.10.10:8080/add" target="_blank" rel="noopener">http://10.10.10.10:8080/add</a> -d ‘{“name”: “yunson”}’</li>
<li>4: ysab -n 900 -urlsfile -m POST ./examples/urls2.txt</li>
</ul>
<h2 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">[yunson ~]# ysab -n 900 -r 100 -u http://10.10.10.10:8080/test</span><br><span class="line"></span><br><span class="line">Summary:</span><br><span class="line">  Complete requests:		90000</span><br><span class="line">  Failed requests:		0</span><br><span class="line">  Time taken (s):		3.383578701</span><br><span class="line">  Total data size (Byte):	1080000</span><br><span class="line">  Data size/request (Byte):	12</span><br><span class="line">  Max use time (ms):		3260</span><br><span class="line">  Min use time (ms):		0</span><br><span class="line">  Average use time (ms):	13.161</span><br><span class="line">  Requests/sec:			26599.056192604872</span><br><span class="line"></span><br><span class="line">Percentage of waiting time (ms):</span><br><span class="line">    10.00%:		0</span><br><span class="line">    25.00%:		1</span><br><span class="line">    50.00%:		5</span><br><span class="line">    75.00%:		21</span><br><span class="line">    90.00%:		29</span><br><span class="line">    95.00%:		35</span><br><span class="line">    99.00%:		61</span><br><span class="line">    99.90%:		87</span><br><span class="line">    99.99%:		3258</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Time detail (ms)</span><br><span class="line">  item		min		mean		max</span><br><span class="line">  dns		0		0		0</span><br><span class="line">  conn		0		0.344		61</span><br><span class="line">  wait		0		2.341		3259</span><br><span class="line">  resp		0		0.006		13</span><br><span class="line"></span><br><span class="line">Response Time histogram (code: requests):</span><br><span class="line">  200:		90000</span><br></pre></td></tr></table></figure>
<h2 id="其他说明"><a href="#其他说明" class="headerlink" title="其他说明"></a>其他说明</h2><ul>
<li>被压测的服务使用gin写的一个简单的hello world接口</li>
<li>推荐尝试使用 “-urlsfile” 命令，这样你可以发送不同url在同一压测中。<br>欢迎大家在github上讨论</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 压测工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ab </tag>
            
            <tag> 压测 </tag>
            
            <tag> http服务压测 </tag>
            
            <tag> 工具 </tag>
            
            <tag> 性能压测 </tag>
            
            <tag> golang </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Golang高性能web框架gin]]></title>
      <url>http://yunsonbai.github.io/2018/12/10/golang-gin/</url>
      <content type="html"><![CDATA[<p><a href="https://yunsonbai.top/2019/04/16/golang-gin/" target="_blank" rel="noopener">原文连接</a></p>
<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>之前分享了一篇<a href="https://yunsonbai.top/2017/06/15/gunicorn-django/" target="_blank" rel="noopener">如何提高django的并发能力</a>文章，在文章的最后分享了进一步提升qps的方法，其中讲到了gin，下边在同样的业务场景分享一下压测数据。</p>
<a id="more"></a>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>服务器: 4核+4G (docker)</li>
<li>压测机: 4核+2G (docker)</li>
<li>Go: 1.11.4</li>
<li>msyql: 4核+4G(docker) max_connections:1000  max_user_connections:1000</li>
</ul>
<h2 id="压测方式及命令"><a href="#压测方式及命令" class="headerlink" title="压测方式及命令"></a>压测方式及命令</h2><ul>
<li>压测方式：<img src="https://yunsonbai.github.io/images/django/lc.png" alt="lc"></li>
<li>压测命令：<ul>
<li>ysab: ysab -n 500 -r 200 -u <a href="http://B_ip:8080/test&#39;" target="_blank" rel="noopener">http://B_ip:8080/test&#39;</a></li>
<li>备注: 欢迎使用ysab, <a href="https://yunsonbai.top/2019/02/24/ysab" target="_blank" rel="noopener"><font color="#7B68EE">ysab文档</font></a></li>
</ul>
</li>
</ul>
<h2 id="数据表说明"><a href="#数据表说明" class="headerlink" title="数据表说明"></a>数据表说明</h2><table>
<thead>
<tr>
<th style="text-align:center">字段名</th>
<th style="text-align:center">类型</th>
<th style="text-align:center">索引类型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">id</td>
<td style="text-align:center">int(11)</td>
<td style="text-align:center">PRI</td>
</tr>
<tr>
<td style="text-align:center">name</td>
<td style="text-align:center">varchar(40)</td>
<td style="text-align:center">MUL</td>
</tr>
<tr>
<td style="text-align:center">url</td>
<td style="text-align:center">varchar(150)</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">descp</td>
<td style="text-align:center">varchar(50)</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">zan_num</td>
<td style="text-align:center">int(11)</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">like_num</td>
<td style="text-align:center">int(11)</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">create_time</td>
<td style="text-align:center">datetime(6)</td>
<td style="text-align:center">MUL</td>
</tr>
</tbody>
</table>
<h2 id="写压测"><a href="#写压测" class="headerlink" title="写压测"></a>写压测</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>随机写一条数据<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">view.go:</span><br><span class="line">    func FeedGet(c *gin.Context) &#123;</span><br><span class="line">        // nt := time.Now().Nanosecond()</span><br><span class="line">	    // id, _ := models.FeedZanGet(nt % <span class="number">200000</span>)</span><br><span class="line">        res, _ := uuid.NewV4()</span><br><span class="line">        t := time.Now().Unix()</span><br><span class="line">        st := strconv.FormatInt(t, <span class="number">10</span>)</span><br><span class="line">        name := res.String()</span><br><span class="line">        id, _ := models.FeedAdd(</span><br><span class="line">            name, stringAdd(<span class="string">"http://"</span>, name),</span><br><span class="line">            stringAdd(name, st), int(t/<span class="number">10000</span>), int(t/<span class="number">13000</span>))</span><br><span class="line"></span><br><span class="line">        c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line">            <span class="string">"code"</span>: <span class="number">200</span>,</span><br><span class="line">            <span class="string">"id"</span>:   id,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">util.go:</span><br><span class="line">    func FeedAdd(name, url, desc string, like_num, zan_num int) (id int64, err error) &#123;</span><br><span class="line">        stm, err := db.MySQLCon.Prepare(</span><br><span class="line">            <span class="string">"insert into feed(name, url, descp, zan_num, like_num,create_time) values(?, ?, ?, ?, ?, ?)"</span>)</span><br><span class="line">        <span class="keyword">if</span> err != nil &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>, err</span><br><span class="line">        &#125;</span><br><span class="line">        defer stm.Close()</span><br><span class="line">        res, err := stm.Exec(name, url, desc, zan_num, like_num, time.Now())</span><br><span class="line">        <span class="keyword">if</span> err != nil &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>, err</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.LastInsertId()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="压测数据"><a href="#压测数据" class="headerlink" title="压测数据"></a>压测数据</h3><ul>
<li><p>机器负载(几乎没什么负载)<br><img src="https://yunsonbai.github.io/images/golang/fz.png" alt="机器负载"></p>
</li>
<li><p>数据库连接数<br><img src="https://yunsonbai.github.io/images/golang/mysqlc1.png" alt="数据库连接数"></p>
</li>
<li><p>qps<br><img src="https://yunsonbai.github.io/images/golang/wqps.png" alt="qps"></p>
</li>
</ul>
<h2 id="读压测"><a href="#读压测" class="headerlink" title="读压测"></a>读压测</h2><h3 id="场景说明"><a href="#场景说明" class="headerlink" title="场景说明"></a>场景说明</h3><p>数据库表中大概有50万条数据, 随机取出一条数据，上边的代码里已有</p>
<h3 id="压测数据-1"><a href="#压测数据-1" class="headerlink" title="压测数据"></a>压测数据</h3><ul>
<li><p>机器负载(几乎没什么负载)<br><img src="https://yunsonbai.github.io/images/golang/fz2.png" alt="机器负载"></p>
</li>
<li><p>数据库连接数<br><img src="https://yunsonbai.github.io/images/golang/mysqlc2.png" alt="数据库连接数"></p>
</li>
<li><p>qps<br><img src="https://yunsonbai.github.io/images/golang/rqps.png" alt="qps"></p>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Golang为什么会有这么好的性能，得益于goroutine以最低的耗损，充分利用多核，这里有一篇关于<a href="https://www.zhihu.com/question/20862617" target="_blank" rel="noopener">goroutine的说明</a>。<br>当然不管选择python的Django还是Golang的gin，关键看业务场景，如果本身没有这么高的并发量，Django还是很合适的，尤其是在试探型项目，从0到1的开发，不得不说利用Django能非常快速的完成。当然量(io密集型)比较大了，由于CPython的GIL的制约，这时候需要考量一种编译语言了，Golang还是个不错的选择。</p>
<h2 id="文章推荐"><a href="#文章推荐" class="headerlink" title="文章推荐"></a>文章推荐</h2><p><strong><a href="https://yunsonbai.top/2019/02/24/ysab/" target="_blank" rel="noopener">ysab基于golang的压测工具</a></strong><br><strong><a href="https://yunsonbai.top/2019/03/21/yunorm/" target="_blank" rel="noopener">yunorm轻量接orm</a></strong></p>
]]></content>
      
        <categories>
            
            <category> Golang </category>
            
        </categories>
        
        
        <tags>
            
            <tag> golang gin </tag>
            
            <tag> gin 高性能 </tag>
            
            <tag> Golang gin </tag>
            
            <tag> Go gin </tag>
            
            <tag> 超高qps </tag>
            
            <tag> 我为什么用Golang </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[nginx+tornado折腾笔记]]></title>
      <url>http://yunsonbai.github.io/2018/12/05/nginx-tornado/</url>
      <content type="html"><![CDATA[<p><a href="https://yunsonbai.top/2017/07/02/gunicorn-gevent-django/" target="_blank" rel="noopener">原文连接</a></p>
<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>之前分享了一篇<a href="https://yunsonbai.top/2017/06/15/gunicorn-django/" target="_blank" rel="noopener">如何提高django的并发能力</a>文章，在文章的最后分享了进一步提升qps的方法，其中讲到了tornado，于是利用业余时间，折腾了一下nginx+tornado，当然和<a href="https://yunsonbai.top/2017/06/15/gunicorn-django/" target="_blank" rel="noopener">如何提高django的并发能力</a>的业务模式一致。<br>为什么现在才分享: 其实之前就写完了，有一段时间没有在维护博客了，然后自己重新测试了一下，下边分享。</p>
<a id="more"></a>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>还是利用上一篇文章<a href="https://yunsonbai.top/2017/06/15/gunicorn-django/" target="_blank" rel="noopener">如何提高django的并发能力</a>的数据模型，<strong>这次以get一条数据为例</strong>。</p>
<ul>
<li>服务器: 4核+4G (docker)</li>
<li>压测机: 4核+2G (docker)</li>
<li>tornado: 5.1</li>
<li>orm: yunorm (轻量级orm, 欢迎使用<strong><a href="https://github.com/yunsonbai/yunorm" target="_blank" rel="noopener">yumorm</a></strong>)</li>
<li>msyql: 4核+4G(docker) max_connections:1000  max_user_connections:1000</li>
<li>数据库数据量: 50万条左右<br>不在介绍tornado的优势，直接说我折腾的过程</li>
</ul>
<h2 id="其他说明"><a href="#其他说明" class="headerlink" title="其他说明"></a>其他说明</h2><p>架构:<br><img src="https://yunsonbai.github.io/images/django/nf.png" alt="架构"></p>
<p>样例代码:<br><strong><a href="https://github.com/yunsonbai/yunorm/tree/master/example/project/ce" target="_blank" rel="noopener">代码</a></strong></p>
<p>orm: 采用了数据库连接池, 每个tornado 数据库 pool_size 为20</p>
<h2 id="压测方式及命令"><a href="#压测方式及命令" class="headerlink" title="压测方式及命令"></a>压测方式及命令</h2><ul>
<li>压测方式：<img src="https://yunsonbai.github.io/images/django/lc.png" alt="lc"></li>
<li>压测命令：<ul>
<li>ysab: ysab -n 500 -r 100 -u <a href="http://B_ip:8080/test&#39;" target="_blank" rel="noopener">http://B_ip:8080/test&#39;</a></li>
<li>备注: 欢迎使用ysab, <a href="https://yunsonbai.top/2019/02/24/ysab" target="_blank" rel="noopener"><font color="#7B68EE">ysab文档</font></a></li>
</ul>
</li>
</ul>
<h2 id="nginx优化前"><a href="#nginx优化前" class="headerlink" title="nginx优化前"></a>nginx优化前</h2><p>本次server起4个(个数和核心数一致)tornado进程</p>
<h3 id="压测结果"><a href="#压测结果" class="headerlink" title="压测结果"></a>压测结果</h3><h4 id="qps"><a href="#qps" class="headerlink" title="qps"></a>qps</h4><p><img src="https://yunsonbai.github.io/images/tornado/qps1.png" alt="qps1"></p>
<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>不经意看，qps能提升这么多，仔细一看不是这么回事，注意看一下失败数将近38000条，有点蒙，为什么会有这么高的失败数，如果直接压测tornado server而不经过nginx，则不会出现这个问题。而且返回code如下所示：<br>Response Time histogram (code: requests):<br>  200:        12023<br>  502:        37977</p>
<p>全是502，看了(netstat -nptal|grep TIME_WAIT|wc -l)一下TIME_WAIT数，破两万，为什么会有这么多的WAIT数？</p>
<ul>
<li><p>tornado数据库操作太慢？<br>去掉数据库操作代码，直接返回hello，先压测单个tornado server，qps有1200左右，没有502。<br>nginx+tornado(2个)，又开始大片出现502，一坨TIME_WAIT。到这很明显了，不是tornado的问题。</p>
</li>
<li><p>sysctl需要优化？<br><a href="https://www.cnblogs.com/gandefeng/p/9836087.html" target="_blank" rel="noopener">sysctl参数优化</a>，这篇文章写的是真不错，其实目前是nginx配置问题导致，后边会说，即便nginx配置没有问题，sysctl优化也是有利于提升服务能力的。<br>优化完后没有太大改进，因为本身这些参数之前优化过和文章说的差不多。</p>
</li>
<li><p>nginx优化<br>现在应该很明显了，就是nginx配置问题，这里边涉及到一个<strong>长连接</strong>的问题。<br>之前的配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">upstream webapp &#123;</span><br><span class="line">    server 127.0.0.1:8000;</span><br><span class="line">    server 127.0.0.1:8001;</span><br><span class="line">    server 127.0.0.1:8002;</span><br><span class="line">    server 127.0.0.1:8003;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass    http://webapp/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>从nginx到server的连接不是长连接，导致每次请求nginx到server之间都会建立新的tcp连接，即便我们优化了net.ipv4.tcp_tw_reuse = 1<br>net.ipv4.tcp_tw_recycle = 1<br>高并发下照样会出现一坨的TIME_WAIT，导致502的问题。<br>到这优化了，可以参考文章<a href="https://skyao.gitbooks.io/learning-nginx/content/documentation/keep_alive.html" target="_blank" rel="noopener">nginx长连接</a>, 配置优化如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">upstream webapp &#123;</span><br><span class="line">    keepalive 300;</span><br><span class="line">    server 127.0.0.1:8000;</span><br><span class="line">    server 127.0.0.1:8001;</span><br><span class="line">    server 127.0.0.1:8002;</span><br><span class="line">    server 127.0.0.1:8003;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass    http://webapp/;</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Connection &quot;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="nginx优化后"><a href="#nginx优化后" class="headerlink" title="nginx优化后"></a>nginx优化后</h2><h3 id="后端4个tornado进程"><a href="#后端4个tornado进程" class="headerlink" title="后端4个tornado进程"></a>后端4个tornado进程</h3><ul>
<li>qps<br><img src="https://yunsonbai.github.io/images/tornado/qps2.png" alt="qps2"><br>还是比较理想的，比之前的gunicorn+gevent+djangot有了700的提升</li>
</ul>
<h3 id="后端8个tornado进程"><a href="#后端8个tornado进程" class="headerlink" title="后端8个tornado进程"></a>后端8个tornado进程</h3><p><img src="https://yunsonbai.github.io/images/tornado/qps3.png" alt="qps3"><br>还是比较理想的，比后端4个tornado进程有了700的提升</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>io密集型服务器的，相对于dajango tornado还是有很大的优势的，如果说基于Python开发，tornado还是一个非常好的选择。<br>关于tornado进程数个数，这里建议是2n(n为cpu核心数)个，当然这是一般情况，具体情况还需要具体分析压测一下。</p>
<h2 id="文章推荐"><a href="#文章推荐" class="headerlink" title="文章推荐"></a>文章推荐</h2><p><strong><a href="https://yunsonbai.top/2019/02/24/ysab/" target="_blank" rel="noopener">ysab基于golang的压测工具</a></strong><br><strong><a href="https://yunsonbai.top/2019/03/21/yunorm/" target="_blank" rel="noopener">yunorm轻量接orm</a></strong><br><strong><a href="https://yunsonbai.top/2019/04/16/golang-gin/" target="_blank" rel="noopener">Golang高性能web框架gin</a></strong></p>
]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> gunicorn+gevent+django </tag>
            
            <tag> nginx tornado 502 </tag>
            
            <tag> nginx tornado optimize </tag>
            
            <tag> nginx+tornado 性能优化 </tag>
            
            <tag> nginx+tornado 实现高并发 </tag>
            
            <tag> tornado epoll </tag>
            
            <tag> nginx+tornado 502 </tag>
            
            <tag> nginx TIME_WAIT </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[夜思]]></title>
      <url>http://yunsonbai.github.io/2018/11/06/%E8%AF%97%E9%9B%86%E6%95%B4%E7%90%86-3/</url>
      <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">继续上一篇整理， 这篇记录了假期结束，会南方求学。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="背景记录"><a href="#背景记录" class="headerlink" title="背景记录"></a>背景记录</h2><ul>
<li>写作时间: 2016年前后</li>
<li><p>事件描述:</p>
<ul>
<li>假期结束，要去武汉上学。</li>
<li>傍晚吃完饭，坐在房顶上看着家乡的风景。</li>
</ul>
</li>
<li><p>当时的心情</p>
<ul>
<li>刚刚过完假期，对家乡有些不舍，对家乡伙伴的不舍</li>
</ul>
</li>
</ul>
<p><strong><center><font color="black" size="6">夜思</font></center></strong><br><strong><center><font color="black" size="5">树静月空高，灯独犬吠停。</font></center></strong><br><strong><center><font color="black" size="5">南望孤窗影，苦酌不日行。</font></center></strong></p>
]]></content>
      
        <categories>
            
            <category> yunson诗集 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 诗集 </tag>
            
            <tag> 远方求学 </tag>
            
            <tag> 夜思 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[离别]]></title>
      <url>http://yunsonbai.github.io/2018/03/18/%E8%AF%97%E9%9B%86%E6%95%B4%E7%90%86-2/</url>
      <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">继续上一篇整理， 这篇讲了大学毕业后不错的同学小聚会，此诗记录了离别时的不舍。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="背景记录"><a href="#背景记录" class="headerlink" title="背景记录"></a>背景记录</h2><ul>
<li>写作时间: 2017-12-23</li>
<li><p>事件描述:</p>
<ul>
<li>大学毕业两年半的时候, 上海的同学过来在中关村小聚。</li>
<li>大家吃饭聊天，闲聊到谈理想</li>
<li>傍晚时分又逛了大学，回忆当年的学校生活</li>
<li>晚上在人民大学地铁站分离</li>
</ul>
</li>
<li><p>当时的心情</p>
<ul>
<li>感叹时间之快，我们都走向了社会开始工作，大家各奔东西，开始面对现实世界，很是无奈</li>
<li>过去我们一起游戏，一起学习，一起旅游，一起找工作，对大学生活的无限怀念</li>
<li>无法留住时间，相互谈论未来，迎接未来，期待再次重逢</li>
</ul>
</li>
</ul>
<p><strong><center><font color="black" size="6">离别</font></center></strong><br><strong><center><font color="black" size="5">中关一聚笑开颜，人民站止语不欢。</font></center></strong><br><strong><center><font color="black" size="5">送君千里终须别，他日有缘再相见。</font></center></strong></p>
]]></content>
      
        <categories>
            
            <category> yunson诗集 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 同学离别 </tag>
            
            <tag> 毕业小聚 </tag>
            
            <tag> 北京聚会 </tag>
            
            <tag> 离别 </tag>
            
            <tag> 诗集 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[冬末]]></title>
      <url>http://yunsonbai.github.io/2018/03/15/%E8%AF%97%E9%9B%86%E6%95%B4%E7%90%86-1/</url>
      <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">从大学到现在陆陆续续的写了一些诗, 一直没有时间将其整理下来, 借着博客在这里把他们整理</span><br><span class="line">下来, 以便自己老了还能回忆起以前的时光。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="背景记录"><a href="#背景记录" class="headerlink" title="背景记录"></a>背景记录</h2><ul>
<li>写作时间: 2018-03-15</li>
<li><p>事件描述:</p>
<ul>
<li>大学同学在这天发表了一条动态, 在回复别人时写到: <ul>
<li>青柳微风水上烟，两城奔波只等闲。未寻愁绪因何起，江南春色已阑珊。</li>
</ul>
</li>
<li>北京最低温度依然在0度左右，还有雾霾困扰.</li>
<li>想起了在南方求学和工作的那段时光，有感而作</li>
</ul>
</li>
<li><p>其他: 大家可以关注我那同学的微信公众号(文章写得很好)gh_f20f1065f8a9</p>
</li>
<li>原文: <a href="http://yunsonbai.top/2018/03/15/%E8%AF%97%E9%9B%86%E6%95%B4%E7%90%86-1/index.html" target="_blank" rel="noopener">http://yunsonbai.top/2018/03/15/%E8%AF%97%E9%9B%86%E6%95%B4%E7%90%86-1/index.html</a></li>
</ul>
<p><strong><center><font color="black" size="6">冬末</font></center></strong><br><strong><center><font color="black" size="5">北国依旧冬风寒，雾霾时常扰人间。</font></center></strong><br><strong><center><font color="black" size="5">深念江南春色美，何日方能起扬帆。</font></center></strong></p>
<ul>
<li><p>北国<br><img src="https://yunsonbai.github.io/images/shi/shi1_1.jpeg" alt="Catch8D7B"></p>
</li>
<li><p>江南<br><img src="https://yunsonbai.github.io/images/shi/shi1_2.jpeg" alt="Catch8D7B"></p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> yunson诗集 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 诗集 </tag>
            
            <tag> 北国冬天 </tag>
            
            <tag> 忆江南 </tag>
            
            <tag> 冬末 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[redis 与 mysql 搭配使用]]></title>
      <url>http://yunsonbai.github.io/2017/11/25/redis-mysql/</url>
      <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>我的博客：<a href="http://yunsonbai.top/2017/11/25/redis-mysql/index.html" target="_blank" rel="noopener">http://yunsonbai.top/2017/11/25/redis-mysql/index.html</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">距离上一篇文章已经有好长一段时间的时间没有共享过新的文章了，这段时间一直忙于处理工作和</span><br><span class="line">生活上的事儿，在这里分享一篇工作以来在MySQL和redis(当然缓存还有其他很多个产品，我们</span><br><span class="line">本次以redis为例)使用过程中总结的经验，希望对于刚刚开始工作的同学能有一定的帮助作用。这</span><br><span class="line">篇文章以MySQL和redis为例。</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="为什么会用到缓存"><a href="#为什么会用到缓存" class="headerlink" title="为什么会用到缓存"></a>为什么会用到缓存</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    在我上学的时候比较流行的说法是LAMP(Linux+Apache+MySQL+PHP)或者是LNMP(</span><br><span class="line">Linux+Nginx+MySQL+PHP),那时候基本上会了这四个技术就能写一个简单的web网页(当然还需要</span><br><span class="line">会些html)出来,很简单。但是这种系统能承载的量是很低的，尤其在涉及到多次数据库查询的时候</span><br><span class="line">会显得异常的慢,因为毕竟MySQL的操作是读取硬盘上的数据，当然你可以采用添加索引、改变存储结</span><br><span class="line">构等方式去提升速度，但终归的瓶颈还会被磁盘io限制住。这时的解决方案之一就是利用缓存来解决</span><br><span class="line">像redis这中存储系统绝大部分操作是内存上的，读速度上<span class="number">10</span>万/s，写的速度也要近<span class="number">10</span>万/s，</span><br><span class="line">当然这个测试受压测机器和服务机器的性能限制，这对于那些qps在大几千的业务线来讲是很具诱惑力</span><br><span class="line">的，下边我举几个案例。</span><br></pre></td></tr></table></figure>
<h2 id="记录按钮点击数"><a href="#记录按钮点击数" class="headerlink" title="记录按钮点击数"></a>记录按钮点击数</h2><ul>
<li><p>只使用MySQL<br><img src="https://yunsonbai.github.io/images/redis_mysql/mysql1.png" alt="只用mysql"></p>
</li>
<li><p>解释说明</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用这个逻辑很容易能解决需求，一旦出现并发，这个”数据库上锁(行锁)“就会直接造成后续的用户</span><br><span class="line">等待，只有当其前边的用户操作完，才能轮到自己操作，试想一下如果这是个推广项目将带来多少的用</span><br><span class="line">户流失。可以用redis的incr方法解决这个问题。</span><br></pre></td></tr></table></figure>
</li>
<li><p>只使用redis<br><img src="https://yunsonbai.github.io/images/redis_mysql/redis1.png" alt="只用redis"></p>
</li>
<li><p>解释说明</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这个逻辑很简单，注意这个key是和要访问的资源一一对应的。因为redis是单线程逻辑，而且是内存操作，</span><br><span class="line">处理上千的并发问题不大，这样即便同时有很多人同时也能表现的非常流畅。但是这个逻辑有个很脆弱的地</span><br><span class="line">方，一旦redis挂了，那数据就全丢了，这个问题很严重。</span><br></pre></td></tr></table></figure>
</li>
<li><p>同时使用mysql和redis<br><img src="https://yunsonbai.github.io/images/redis_mysql/mysql_redis1.png" alt="mysql_redis1"></p>
</li>
<li><p>解释说明</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">现在这个逻辑总的来说就是用redis抗量，MySQL用作数据备份。关于定时任务可以用celery去做。但是这</span><br><span class="line">个数据备份逻辑有个很明显的问题：一旦redis数据因异常丢失，这时候在直接写到库里这将是灾难的，数据</span><br><span class="line">将失去意义。原因在于这个逻辑采用了用Redis去记录历史数据，这是很糟糕的设计方式。</span><br></pre></td></tr></table></figure>
</li>
<li><p>同时使用mysql和redis优化版<br><img src="https://yunsonbai.github.io/images/redis_mysql/mysql_redis2.png" alt="mysql_redis1"></p>
</li>
<li><p>解释说明</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">当然这个逻辑还是用redis抗量，MySQL用作数据备份。关于定时任务可以用celery去做。但是有个不同的点</span><br><span class="line">是，我们不在用redis去记录历史数据，而是利用incr和decr两个函数去实现记录数据增量，那么即便数据有</span><br><span class="line">丢失也只是影响异步任务时间段内的数据，不会造成大面积的数据异常，另外还可以优化两点：<span class="number">1</span>是在decr处，如</span><br><span class="line">果发现decr的结果是小于<span class="number">0</span>(毕竟△t内的数据增量不会是负数)的数直接记录成<span class="number">0</span>；<span class="number">2</span>是我们可以每次不覆盖MySQL</span><br><span class="line">数据而是记录增量来具体观察那个时间段的增速快。</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="缓存热数据"><a href="#缓存热数据" class="headerlink" title="缓存热数据"></a>缓存热数据</h2><ul>
<li><p>只使用MySQL<br><img src="https://yunsonbai.github.io/images/redis_mysql/cache_mysql1.png" alt="mysql_redis1"></p>
</li>
<li><p>解释说明</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">逻辑很简单，直接读取数据库数据展示给用户，当并发量较大的时候，我们可以利用索引来解决问题，但是并发量</span><br><span class="line">再次增大或者数据量比较复杂不好建立索引或者关联表太多的时候查询数据库将变得异常的慢。</span><br></pre></td></tr></table></figure>
</li>
<li><p>利用redis缓存提高并发<br><img src="https://yunsonbai.github.io/images/redis_mysql/cache_redis1.png" alt="mysql_redis1"></p>
</li>
<li><p>解释说明</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">对于多表联合查询如果是直接查库的话效率低下，严重影响系统的响应速度，尤其是像查询用户属性这种核心数据</span><br><span class="line">的时候，如果是几个业务线都需要查询用户数据，那负责提供用户信息的服务面临的并发会很大上，我们这边有个</span><br><span class="line">关于用户查询的接口最大的时候并发能上大几千，这时候光靠数据库可是不行，于是就要上缓存了。</span><br><span class="line">像当前这个就是”热数据“缓存到redis中，一般在缓存中都会有过期时间，这个过期时间需要在实践中去找到一个</span><br><span class="line">比较合适的时间，既能保证redis的命中率又要尽量保证是热数据。</span><br><span class="line">但是当前这个逻辑有个缺点：一旦去查询根本不存在的数据的时候，就出现了缓存被击穿的现象，就会不停的查库</span><br><span class="line">对外来说就好比没有加缓存一样。</span><br></pre></td></tr></table></figure>
</li>
<li><p>解决缓存被击穿的问题<br><img src="https://yunsonbai.github.io/images/redis_mysql/cache_redis2.png" alt="mysql_redis1"></p>
</li>
<li><p>解释说明</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">该逻辑其实就是比上边的逻辑多了一层”特殊值的判断“，我们利用这样的特殊值来解决缓存击穿的问题，但是需要添</span><br><span class="line">加另外的维护成本：特殊值要绝对特殊，不能和有用数据重合；存放特殊值的key不能永久不变(尽量给一个较短的过</span><br><span class="line">期时间，因为有可能这个key之前不存在后来存在了，如果给的过期时间太长会造成数据的长时间不一致)；当查到这</span><br><span class="line">种不存在的特殊key时尽量加上报警日志，也许有人在恶意攻击，我们要采取响应的措施去防范。</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">介于时间问题先写到这吧，这是我在工作中总结的一些经验，希望能对那些刚接触缓存的同学有一定的帮助作用。当然</span><br><span class="line">缓存不一定就非要用redis，还有很多类似的产品，另外还可以用本机内存去实现，有兴趣的话可以自己玩一玩。以上</span><br><span class="line">我整理的内容如果有不足的地方还请大家指出，相互交流。</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 缓存的应用 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> redis </tag>
            
            <tag> 缓存的应用 </tag>
            
            <tag> 从数据库到缓存 </tag>
            
            <tag> MySQL与redis搭配使用 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于提高网页性能的总结]]></title>
      <url>http://yunsonbai.github.io/2017/09/01/%E5%85%B3%E4%BA%8E%E6%8F%90%E9%AB%98%E7%BD%91%E9%A1%B5%E6%80%A7%E8%83%BD%E7%9A%84%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p><strong>作者 姬如柏 <a href="https://github.com/pingchou" target="_blank" rel="noopener">主页</a></strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">趁着清闲总结了一下提高网页性能的知识点，现在分享出来，希望对大家有帮助</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="熟悉页面生成的步骤"><a href="#熟悉页面生成的步骤" class="headerlink" title="熟悉页面生成的步骤"></a>熟悉页面生成的步骤</h2><ul>
<li>HTML生成DOM</li>
<li>CSS生成CSSOM</li>
<li>结合DOM和CSSOM生成渲染结构树</li>
<li>页面进行布局（layout），讲渲染结构的节点进行平面合成</li>
<li>绘制（paint）</li>
</ul>
<h2 id="影响页面性能的关键"><a href="#影响页面性能的关键" class="headerlink" title="影响页面性能的关键"></a>影响页面性能的关键</h2><p>layout + paint 即为render，即渲染过程最浪费页面性能。所以应该减少页面重新渲染的操作。<br><strong>影响渲染（render）</strong>的包括： </p>
<ul>
<li>修改DOM</li>
<li>修改样式表</li>
<li>用户事件</li>
</ul>
<p>##提高性能的操作</p>
<ul>
<li>尽量减少对DOM的直接操作。<ul>
<li>选用虚拟DOM库，例如react。</li>
<li>对DOM的clone节点进行操作，然后替换原有DOM。</li>
<li>将要添加的DOM先添加进document.createDocumentFragment()，然后再添加到页面中</li>
</ul>
</li>
<li>尽量减少渲染。<ul>
<li>对于DOM的读写应该分开，读的写在一起，写的写在一起。不要读写写在一句。</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// bad</span><br><span class="line">div.style.left = div.offsetLeft + 10 + &quot;px&quot;;</span><br><span class="line">div.style.top = div.offsetTop + 10 + &quot;px&quot;;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">var left = div.offsetLeft;</span><br><span class="line">var top  = div.offsetTop;</span><br><span class="line">div.style.left = left + 10 + &quot;px&quot;;</span><br><span class="line">div.style.top = top + 10 + &quot;px&quot;;</span><br></pre></td></tr></table></figure>
<ul>
<li>对于多个样式的修改，应该去控制class的添加或者写cssText。</li>
<li>将DOM元素隐藏进行操作然后显示。这样只触发一次重绘或者重排，而不是多次渲染。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> html </tag>
            
            <tag> 网页性能 </tag>
            
            <tag> css </tag>
            
            <tag> js </tag>
            
            <tag> CSSOM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[django数据库连接复用]]></title>
      <url>http://yunsonbai.github.io/2017/07/02/gunicorn-gevent-django/</url>
      <content type="html"><![CDATA[<p><a href="https://yunsonbai.top/2017/07/02/gunicorn-gevent-django/" target="_blank" rel="noopener">原文连接</a></p>
<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>之前分享了一篇<a href="https://yunsonbai.top/2017/06/15/gunicorn-django/" target="_blank" rel="noopener">如何提高django的并发能力</a>文章，文章的最后结论是采用gunicorn+gthread+django的方式来提高并发能力，该方法简单的说是利用的多线程。<br>文章也抛出了一个问题：gunicorn+gevent+django+CONN_MAX_AGE会导致数据库连接数飙升，直至占满。如果一定要利用协程的方式启动，该怎么解决这个问题呢？看了一下django源码，找到了问题的根源，写了一下解决办法，下边分享一下。</p>
<a id="more"></a>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>还是利用上一篇文章<a href="https://yunsonbai.top/2017/06/15/gunicorn-django/" target="_blank" rel="noopener">如何提高django的并发能力</a>的数据模型，<strong>这次以get一条数据为例</strong>，由于某些原因(好吧手里没有资源)，采用了配置稍低的机器：</p>
<ul>
<li>服务器: 4核+4G (docker)</li>
<li>压测机: 4核+2G (docker)</li>
<li>django: 1.8.2</li>
<li>msyql: 4核+4G(docker) max_connections:1000  max_user_connections:1000</li>
</ul>
<h2 id="压测方式及命令"><a href="#压测方式及命令" class="headerlink" title="压测方式及命令"></a>压测方式及命令</h2><ul>
<li>压测方式：<img src="https://yunsonbai.github.io/images/django/lc.png" alt="lc"></li>
<li>压测命令：<ul>
<li>ysab: ysab -n 800 -r 10 -u <a href="http://B_ip:8080/test&#39;" target="_blank" rel="noopener">http://B_ip:8080/test&#39;</a></li>
<li>备注: 欢迎使用ysab, <a href="https://yunsonbai.top/2019/02/24/ysab" target="_blank" rel="noopener"><font color="#7B68EE">ysab文档</font></a></li>
</ul>
</li>
</ul>
<h2 id="重现问题"><a href="#重现问题" class="headerlink" title="重现问题"></a>重现问题</h2><h3 id="settings"><a href="#settings" class="headerlink" title="settings"></a>settings</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'ce'</span>,</span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'root'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">''</span>,</span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">'192.168.96.95'</span>,</span><br><span class="line">        <span class="string">'PORT'</span>: <span class="string">'3306'</span>,</span><br><span class="line">        <span class="string">'CONN_MAX_AGE'</span>: <span class="number">600</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="启动及压测结果"><a href="#启动及压测结果" class="headerlink" title="启动及压测结果"></a>启动及压测结果</h3><ul>
<li><p>启动: gunicorn –env DJANGO_SETTINGS_MODULE=test_dj21.settings test_dj21.wsgi:application -w 8 -b 0.0.0.0:8080 -k gevent –max-requests 40960 –max-requests-jitter 5120</p>
</li>
<li><p>数据库连接数展示<br><img src="https://yunsonbai.github.io/images/django/mysql_c1.png" alt="数据库连接数"></p>
</li>
<li><p>qps展示<br><img src="https://yunsonbai.github.io/images/django/qps1.png" alt="qps"><br>为什么能达到1000多, 因为一直再查同一条数据。</p>
</li>
</ul>
<h2 id="问题分析与解决"><a href="#问题分析与解决" class="headerlink" title="问题分析与解决"></a>问题分析与解决</h2><h3 id="数据库连接数为什么这么高"><a href="#数据库连接数为什么这么高" class="headerlink" title="数据库连接数为什么这么高"></a>数据库连接数为什么这么高</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># django/db/backends/mysql/base.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DatabaseWrapper</span><span class="params">(BaseDatabaseWrapper)</span>:</span></span><br><span class="line">    vendor = <span class="string">'mysql'</span></span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_new_connection</span><span class="params">(self, conn_params)</span>:</span></span><br><span class="line">        c = Database.connect(**conn_params)</span><br><span class="line">        print(id(c))  <span class="comment"># 好吧我刻意打印了一下这个id, 每次查询都会重新建立连接用新连接操作</span></span><br><span class="line">        <span class="keyword">return</span> c</span><br></pre></td></tr></table></figure>
<p><strong>还有一处诡异的代码</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseDatabaseWrapper</span>:</span></span><br><span class="line">    <span class="string">"""Represent a database connection."""</span></span><br><span class="line">    <span class="comment"># Mapping of Field objects to their column types.</span></span><br><span class="line">    data_types = &#123;&#125;</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_close</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.connection <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">with</span> self.wrap_database_errors:</span><br><span class="line">                print(<span class="string">'foo close'</span>)  <span class="comment"># 每次查询完又要调用close</span></span><br><span class="line">                <span class="keyword">return</span> self.connection.close()</span><br></pre></td></tr></table></figure>
<p><strong>经过上边的代码，django关于mysql的部分没有使用连接池，导致每次数据库操作都要新建新的连接。更让我有些蒙的是，按照django的文档CONN_MAX_AGE是为了复用连接，但是为什么每次都要新建连接呢？。而且最难受的是一旦我们设置了CONN_MAX_AGE，连接并不会被close掉，而是一直在那占着。</strong><br><strong>也许是我使用的问题，出现了这个问题。不管如何，最后想了解决办法，请往下看</strong></p>
<h3 id="问题的解决"><a href="#问题的解决" class="headerlink" title="问题的解决"></a>问题的解决</h3><h4 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h4><ul>
<li><p>settings代码</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'test_dj21.db.backends.mysql'</span>,  <span class="comment"># 好吧核心都在这</span></span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'ce'</span>,</span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'root'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">''</span>,</span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">'192.168.96.95'</span>,</span><br><span class="line">        <span class="string">'PORT'</span>: <span class="string">'3306'</span>,</span><br><span class="line">        <span class="string">'CONN_MAX_AGE'</span>: <span class="number">600</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>test_dj21.db.backends.mysql所在位置<br><img src="https://yunsonbai.github.io/images/django/tree.png" alt="tree"></p>
</li>
<li><p>base.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> django.core.exceptions <span class="keyword">import</span> ImproperlyConfigured</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">import</span> MySQLdb <span class="keyword">as</span> Database</span><br><span class="line"><span class="keyword">except</span> ImportError <span class="keyword">as</span> err:</span><br><span class="line">    <span class="keyword">raise</span> ImproperlyConfigured(</span><br><span class="line">        <span class="string">'Error loading MySQLdb module.\n'</span></span><br><span class="line">        <span class="string">'Did you install mysqlclient?'</span></span><br><span class="line">    ) <span class="keyword">from</span> err</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.db.backends.mysql.base <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> django.db.backends.mysql.base <span class="keyword">import</span> DatabaseWrapper <span class="keyword">as</span> _DatabaseWrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DatabaseWrapper</span><span class="params">(_DatabaseWrapper)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_new_connection</span><span class="params">(self, conn_params)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> ConnectPool.instance(conn_params).get_connection()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_close</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>  <span class="comment"># 假关闭</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConnectPool</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, conn_params)</span>:</span></span><br><span class="line">        self.conn_params = conn_params</span><br><span class="line">        self.n = <span class="number">5</span></span><br><span class="line">        self.connects = []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 实现单例，实现连接池</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">instance</span><span class="params">(conn_params)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(ConnectPool, <span class="string">'_instance'</span>):</span><br><span class="line">            ConnectPool._instance = ConnectPool(conn_params)</span><br><span class="line">        <span class="keyword">return</span> ConnectPool._instance</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_connection</span><span class="params">(self)</span>:</span></span><br><span class="line">        c = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> len(self.connects) &lt;= self.n:</span><br><span class="line">            c = Database.connect(**self.conn_params)</span><br><span class="line">            self.connects.append(c)</span><br><span class="line">        <span class="keyword">if</span> c:</span><br><span class="line">            <span class="keyword">return</span> c</span><br><span class="line">        index = random.randint(<span class="number">0</span>, self.n)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.connects[index].ping()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            self.connects[index] = Database.connect(**self.conn_params)</span><br><span class="line">        <span class="keyword">return</span> self.connects[index]</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="压测结果"><a href="#压测结果" class="headerlink" title="压测结果"></a>压测结果</h4><ul>
<li><p>数据库连接数展示<br><img src="https://yunsonbai.github.io/images/django/mysql_c2.png" alt="数据库连接数"></p>
</li>
<li><p>qps展示<br><img src="https://yunsonbai.github.io/images/django/qps2.png" alt="qps"><br>如果没有self.connects[index].ping()操作压测性能会更好，但是不建议去掉，需要检查连接是否可用。</p>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>利用连接池+假关闭的方式解决过高连接数的问题，如果有更好的建议，可以讨论。</p>
<h2 id="文章推荐"><a href="#文章推荐" class="headerlink" title="文章推荐"></a>文章推荐</h2><p><strong><a href="https://yunsonbai.top/2019/02/24/ysab/" target="_blank" rel="noopener">ysab基于golang的压测工具</a></strong><br><strong><a href="https://yunsonbai.top/2019/03/21/yunorm/" target="_blank" rel="noopener">yunorm轻量接orm</a></strong><br><strong><a href="https://yunsonbai.top/2018/12/05/nginx-tornado/" target="_blank" rel="noopener">nginx+tornado折腾笔记</a></strong></p>
]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> django db backends </tag>
            
            <tag> django mysql connection pool </tag>
            
            <tag> django mysql connection reuse </tag>
            
            <tag> django mysql连接复用 </tag>
            
            <tag> django 数据库连接复用 </tag>
            
            <tag> django 数据库连接池 </tag>
            
            <tag> django mysql连接池 </tag>
            
            <tag> gunicorn+gevent+django </tag>
            
            <tag> gunicorn+gevent+django数据库连接数过高 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我对python装饰器的使用]]></title>
      <url>http://yunsonbai.github.io/2017/06/30/python%E4%B8%AD%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
      <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">趁着闲暇之际总结了关于装饰器的知识，并结合前人的总结，整理了一篇关于python</span><br><span class="line">装饰器的小文章，接下来分享一下我对python装饰器的理解：简单来说，装饰器是可</span><br><span class="line">调用的对象，它的参数就是一个函数。要么装饰器处理这个函数，然后把它返回，或</span><br><span class="line">者把原来的函数替换成另外的可调用对象。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="python中的装饰器是什么"><a href="#python中的装饰器是什么" class="headerlink" title="python中的装饰器是什么"></a>python中的装饰器是什么</h2><ul>
<li><p>直观:<br>  以@开发放在某个函数之上的可调用对象</p>
</li>
<li><p>我的理解:<br>  <a href="http://yunsonbai.github.io/2017/06/30/python%E4%B8%AD%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8/">装饰器</a>本身是python的一个函数(也可以说是对象，因为python中一切皆是对象),<br>  它能方便的让我们在不动已经写好的代码的基础上获取额外的功能，最重要的是它<br>  能帮我抽取出几乎一样的代码出来，尤其是当不同函数中有相同的部分的时候，装<br>  饰器能干净利落的让我们完成需求，比如鉴权功能/日志功能等等。也就是在进入<br>  真正的函数之前就做了一些其他的事儿</p>
</li>
</ul>
<h2 id="理解一下什么是闭包"><a href="#理解一下什么是闭包" class="headerlink" title="理解一下什么是闭包"></a>理解一下什么是闭包</h2><ul>
<li>问题的来源<br>  在学习之初总是听到或看到闭包这个词，我想很多直接学习python的同学肯定也是<br>  经常听到这个词了</li>
<li><p>什么是闭包<br>  我个人的理解时闭包是能访问定义体之外的非全局变量，或者说这个函数的作用域被<br>  延伸了(因为它居然访问了并不是自己定义的非全局变量，注意这个非全局变量很重<br>  要要是全局变量就没意义了)</p>
</li>
<li><p>来个例子吧</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">list_append</span><span class="params">()</span>:</span></span><br><span class="line">    l = []  <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">worker</span><span class="params">(new_e)</span>:</span>  <span class="comment"># 2</span></span><br><span class="line">        l.append(new_e)  <span class="comment"># 3，l在这成了自由变量(w.__code__.co_freevars)</span></span><br><span class="line">        <span class="keyword">return</span> l   <span class="comment"># 4</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> worker</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    w = list_append()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        print(i, <span class="string">':'</span>, w(i))</span><br><span class="line"></span><br><span class="line">执行结果：</span><br><span class="line"><span class="number">0</span> : [<span class="number">0</span>]</span><br><span class="line"><span class="number">1</span> : [<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line"><span class="number">2</span> : [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">闭包： <span class="comment">#1 到 #4之间的代码</span></span><br></pre></td></tr></table></figure>
<h2 id="写个简单的装饰器"><a href="#写个简单的装饰器" class="headerlink" title="写个简单的装饰器"></a>写个简单的装饰器</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_result</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">warp</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'haha warp'</span>)</span><br><span class="line">        result = func(*args, **kwargs)</span><br><span class="line">        print(<span class="string">'result:'</span>, result)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> warp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@get_result</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    print(<span class="string">'func add:'</span>, a + b)</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    add(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<h3 id="执行结果及解释"><a href="#执行结果及解释" class="headerlink" title="执行结果及解释"></a>执行结果及解释</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">执行结果：</span><br><span class="line">    haha warp</span><br><span class="line">    func add: <span class="number">3</span></span><br><span class="line">    result: <span class="number">3</span></span><br><span class="line"></span><br><span class="line">解释：</span><br><span class="line">    add会作为参数func传给get_result函数,然后get_result返回warp函数。</span><br><span class="line">    如果你执行add.__name__你会发现明明是add名字却变成了warp,其实这是</span><br><span class="line">    python解释器在背后吧warp赋值给了add，然后add就保存了warp的索引，每</span><br><span class="line">    次调用add(a, b)都是在执行warp(a, b), 还记的前边说的把函数转变成了</span><br><span class="line">    其他的可调用对象，然后二者接收同样的参数。可能有时我们并不想这么干，因</span><br><span class="line">    为毕竟只是装饰一下我的函数，结果给我变了属性，怎么解决后边会说。不管怎</span><br><span class="line">    么说我们还是实现了一个简单的装饰器。</span><br></pre></td></tr></table></figure>
<h2 id="解决name属性被修改的问题"><a href="#解决name属性被修改的问题" class="headerlink" title="解决name属性被修改的问题"></a>解决name属性被修改的问题</h2><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_result</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">    @wraps(func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">warp</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'haha warp'</span>)</span><br><span class="line">        result = func(*args, **kwargs)</span><br><span class="line">        print(<span class="string">'result:'</span>, result)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> warp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@get_result</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    print(<span class="string">'func add:'</span>, a + b)</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    a = add</span><br><span class="line">    a(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    print(<span class="string">'name:'</span>, a.__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    a = add</span><br><span class="line">    a(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    print(a.__name__)</span><br></pre></td></tr></table></figure>
<h3 id="执行结果及解释-1"><a href="#执行结果及解释-1" class="headerlink" title="执行结果及解释"></a>执行结果及解释</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">执行结果：</span><br><span class="line">    haha warp</span><br><span class="line">    func add: <span class="number">3</span></span><br><span class="line">    result: <span class="number">3</span></span><br><span class="line">    name: add</span><br><span class="line">解释：</span><br><span class="line">    我们用到了functools.warps它的作用就是协助构建良好的装饰器，就是把被修饰的函数对象</span><br><span class="line">    的指定属性复制给包装函数对象。可以看一下wraps的部分代码(太占篇幅注释去了)：</span><br><span class="line">    WRAPPER_ASSIGNMENTS = (</span><br><span class="line">        <span class="string">'__module__'</span>, <span class="string">'__name__'</span>, <span class="string">'__qualname__'</span>, <span class="string">'__doc__'</span>,</span><br><span class="line">        <span class="string">'__annotations__'</span>)</span><br><span class="line">    WRAPPER_UPDATES = (<span class="string">'__dict__'</span>,)</span><br><span class="line">    <span class="comment"># 看到WRAPPER_ASSIGNMENTS、WRAPPER_UPDATES和注释1/2应该已经很明了了</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_wrapper</span><span class="params">(wrapper, wrapped, assigned = WRAPPER_ASSIGNMENTS,</span></span></span><br><span class="line"><span class="function"><span class="params">                       updated = WRAPPER_UPDATES)</span>:</span></span><br><span class="line">        <span class="comment"># 注释1</span></span><br><span class="line">        <span class="keyword">for</span> attr <span class="keyword">in</span> assigned:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                value = getattr(wrapped, attr)</span><br><span class="line">            <span class="keyword">except</span> AttributeError:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                setattr(wrapper, attr, value)</span><br><span class="line">        <span class="comment"># 注释2</span></span><br><span class="line">        <span class="keyword">for</span> attr <span class="keyword">in</span> updated:</span><br><span class="line">            getattr(wrapper, attr).update(getattr(wrapped, attr, &#123;&#125;))</span><br><span class="line">        wrapper.__wrapped__ = wrapped</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wraps</span><span class="params">(wrapped, assigned = WRAPPER_ASSIGNMENTS,</span></span></span><br><span class="line"><span class="function"><span class="params">              updated = WRAPPER_UPDATES)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> partial(</span><br><span class="line">            update_wrapper, wrapped=wrapped, assigned=assigned, updated=updated)</span><br><span class="line">小结：</span><br><span class="line">    当我们需要保留被修饰的函数的属性时，wraps装饰器非常有用，以至于我们在写装饰器的时候</span><br><span class="line">    绝大部分情况时需要用到它的，另外上边的例子其实很容易变形成记录日志功能的装饰器，可以</span><br><span class="line">    试一下。</span><br></pre></td></tr></table></figure>
<h2 id="鉴权装饰器"><a href="#鉴权装饰器" class="headerlink" title="鉴权装饰器"></a>鉴权装饰器</h2><h3 id="场景说明"><a href="#场景说明" class="headerlink" title="场景说明"></a>场景说明</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">我们在进行接口开发的过程中，总是免不了对调用方进行鉴权的，毕竟资源时很宝贵的，不能随随</span><br><span class="line">便便让别人拿到。我们又不可能去所有的接口去实现同样的代码部分，这时候装饰器是很好的选择</span><br><span class="line">[参考](https://yunsonbai.top/<span class="number">2016</span>/<span class="number">05</span>/<span class="number">26</span>/decorator/)</span><br></pre></td></tr></table></figure>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">from functools import wraps</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def user_auth(func):</span><br><span class="line">    @wraps(func)</span><br><span class="line">    def warp(self, data, *args, **kwargs):</span><br><span class="line">        token = data.get(&apos;token&apos;, False)</span><br><span class="line">        if not token:</span><br><span class="line">            return &#123;&#125;</span><br><span class="line">        return func(self, data, *args, **kwargs)</span><br><span class="line">    return warp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserInfo(object):</span><br><span class="line"></span><br><span class="line">    @user_auth</span><br><span class="line">    def get_info(self, data):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        data: 调用方传递的用户的凭证信息包括token</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        info = &#123;&apos;age&apos;: 18&#125;</span><br><span class="line">        return info</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    user_info = UserInfo()</span><br><span class="line">    data = &#123;&apos;token&apos;: &apos;token&apos;&#125;</span><br><span class="line">    print(&apos;has token:&apos;, user_info.get_info(data))</span><br><span class="line">    print(&apos;no token:&apos;, user_info.get_info(&#123;&#125;))</span><br></pre></td></tr></table></figure>
<h3 id="执行结果及解释-2"><a href="#执行结果及解释-2" class="headerlink" title="执行结果及解释"></a>执行结果及解释</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">结果：</span><br><span class="line">    has token: &#123;<span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">    no token: &#123;&#125;</span><br><span class="line">解释：</span><br><span class="line">    这个修士器可以对接口进行鉴权工作,而且不用每个接口中加同样的代码,直接在函数上加上</span><br><span class="line">    修饰器即可,另外一定要记得添加self参数,正如前边所说装饰器使得返回的函数和被修饰的</span><br><span class="line">    函数接收一样的参数,而用过wraps之后返回的函数被重新赋予了被修饰函数的一些属性.另</span><br><span class="line">    外也可以在这附上self.user_id等属性方便后边使用.</span><br></pre></td></tr></table></figure>
<h2 id="传参装饰器"><a href="#传参装饰器" class="headerlink" title="传参装饰器"></a>传参装饰器</h2><h3 id="怎么生成传参装饰器"><a href="#怎么生成传参装饰器" class="headerlink" title="怎么生成传参装饰器"></a>怎么生成传参装饰器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">装饰器工厂函数,在学习python过程中经常听到这个词,因为这个函数的存在我们能很容易的</span><br><span class="line">写出传参装饰器,简单来说,这个函数的功能就是把参数传给这个装饰器工厂函数,然后返回装</span><br><span class="line">饰器,再来装饰要装饰的函数.可能不太好捋清楚,来个例子</span><br></pre></td></tr></table></figure>
<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_auth</span><span class="params">(has_token=True)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">        @wraps(func)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">warp</span><span class="params">(self, data, *args, **kwargs)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> has_token:</span><br><span class="line">                token = data.get(<span class="string">'token'</span>, <span class="literal">False</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> token:</span><br><span class="line">                    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                uid = data.get(<span class="string">'uid'</span>, <span class="literal">False</span>)</span><br><span class="line">                passwd = data.get(<span class="string">'passwd'</span>, <span class="literal">False</span>)</span><br><span class="line">                <span class="keyword">if</span> (bool(uid) <span class="keyword">and</span> bool(passwd)) <span class="keyword">is</span> <span class="literal">False</span>:</span><br><span class="line">                    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">            <span class="keyword">return</span> func(self, data, *args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> warp</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @user_auth(has_token=True)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_info</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        data: 调用方传递的用户的凭证信息包括token</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        info = &#123;<span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">        <span class="keyword">return</span> info</span><br><span class="line"></span><br><span class="line"><span class="meta">    @user_auth(has_token=False)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        data: 登录信息</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        info = &#123;<span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">        <span class="keyword">return</span> info</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    user_info = UserInfo()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'-------------login------------'</span>)</span><br><span class="line">    data = &#123;<span class="string">'uid'</span>: <span class="string">'uid1'</span>, <span class="string">'passwd'</span>: <span class="string">'sss'</span>&#125;</span><br><span class="line">    print(<span class="string">'has uid passwd:'</span>, user_info.login(data))</span><br><span class="line">    print(<span class="string">'no uid passwd:'</span>, user_info.login(&#123;&#125;))</span><br><span class="line">    print(<span class="string">'-------------get_info------------'</span>)</span><br><span class="line">    data = &#123;<span class="string">'token'</span>: <span class="string">'token'</span>&#125;</span><br><span class="line">    print(<span class="string">'has token:'</span>, user_info.get_info(data))</span><br><span class="line">    print(<span class="string">'no token:'</span>, user_info.get_info(&#123;&#125;))</span><br></pre></td></tr></table></figure>
<h3 id="执行结果及解释-3"><a href="#执行结果及解释-3" class="headerlink" title="执行结果及解释"></a>执行结果及解释</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">结果：</span><br><span class="line">    -------------login------------</span><br><span class="line">    has uid passwd: &#123;<span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">    no uid passwd: &#123;&#125;</span><br><span class="line">    -------------get_info------------</span><br><span class="line">    has token: &#123;<span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">    no token: &#123;&#125;</span><br><span class="line">解释：</span><br><span class="line">    这个用户鉴权装饰器应对于登陆和登陆后的鉴权,如参数has_token,当为<span class="literal">False</span>时,说明</span><br><span class="line">    是登陆,反之说明已经登陆成功,应携带token参数请求接口,其他的逻辑应该很简单.</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
            <tag> 装饰器 </tag>
            
            <tag> python装饰器 </tag>
            
            <tag> 闭包 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[gunicorn的worker调度]]></title>
      <url>http://yunsonbai.github.io/2017/06/20/gunicorn-worker%E7%9A%84%E8%B0%83%E5%BA%A6/</url>
      <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>前段时间分享了一篇<strong><a href="https://yunsonbai.top/2017/06/15/gunicorn-django/" target="_blank" rel="noopener">如何提高django的并发能力</a></strong>的文章，由此引发了我对gunicorn的进一步研究，利用业余的时间看了一下gunicorn关于worker那部分的主要代码，下边以gevent为例子聊一聊它的工作流程(好吧目前主要看了看gevent这块儿的代码)。</p>
<a id="more"></a>
<h2 id="归纳流程"><a href="#归纳流程" class="headerlink" title="归纳流程"></a>归纳流程</h2><ul>
<li>gunicorn采用了n+1个进程，n就是真劳动worker数，即通过-w指定。1则是主worker，它负责管理这些劳动worker，它主要的工作就是对劳动worker进行增与杀，另外他会监听一个端口，外提供服务。</li>
<li>主worker在监听端口会注册一个文件描述符fd。</li>
<li>劳动worker通过注册的文件描述符不断的接受请求。</li>
</ul>
<h2 id="部分细节分析"><a href="#部分细节分析" class="headerlink" title="部分细节分析"></a>部分细节分析</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>如果对部分细节有兴趣的话可以继续看一下，当然默认你已经找到了gunicorn的代码位置，一般在Python(安装路径)/lib/python3.5/site-packages/gunicorn</p>
<h3 id="worker的创建"><a href="#worker的创建" class="headerlink" title="worker的创建"></a>worker的创建</h3><ul>
<li>启动最先调用app/wsgiapp.py的run函数</li>
<li>通过WSGIApplication(“%(prog)s [OPTIONS] [APP_MODULE]”).run()调用后边的核心代码</li>
<li>根据执行的函数追踪，最终会调用到arbiter.py的run函数，这才开始了漫长的创建过程，看一下核心代码(篇幅原因，部分粘贴)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"Main master loop."</span></span><br><span class="line">    <span class="comment"># 这里启动主进程，并监听端口，注册文件描述符</span></span><br><span class="line">    self.start()</span><br><span class="line">    util._setproctitle(<span class="string">"master [%s]"</span> % self.proc_name)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 这里负责启动所有的从worker，也就是劳动worker</span></span><br><span class="line">        self.manage_workers()</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            self.maybe_promote_master()</span><br><span class="line">            sig = self.SIG_QUEUE.pop(<span class="number">0</span>) <span class="keyword">if</span> self.SIG_QUEUE <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">            <span class="keyword">if</span> sig <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                self.sleep()</span><br><span class="line">                <span class="comment"># 则是kill掉那些unused/idle workers</span></span><br><span class="line">                self.murder_workers()</span><br><span class="line">                self.manage_workers()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 补充一下，所有的劳动worker，都放在self.WORKERS里，</span></span><br><span class="line"><span class="comment"># 包含每个worker的pid等信息，主worker根据劳动者的运行时间等来决定是否将其杀死，</span></span><br><span class="line"><span class="comment"># 可以看一下murder_workers函数的实现</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="劳动者与文件描述符绑定"><a href="#劳动者与文件描述符绑定" class="headerlink" title="劳动者与文件描述符绑定"></a>劳动者与文件描述符绑定</h3><ul>
<li><p>上边提到的self.manage_workers()先会调用spawn_worker函数，部分代码如下</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">worker.pid = os.getpid()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    util._setproctitle(<span class="string">"worker [%s]"</span> % self.proc_name)</span><br><span class="line">    self.log.info(<span class="string">"Booting worker with pid: %s"</span>, worker.pid)</span><br><span class="line">    self.cfg.post_fork(self, worker)</span><br><span class="line">    <span class="comment"># 通过这里来调用你指定的worker的run函数，这里我指定的是gevent</span></span><br><span class="line">    worker.init_process()</span><br><span class="line">    sys.exit(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span> SystemExit:</span><br><span class="line">    <span class="keyword">raise</span></span><br><span class="line"><span class="comment"># 关于有哪几种worker可以被调用，可以查看workers/__init__.py</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>ggevent.py的run函数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为什么看ggevent，可以看一下works/__init__.py文件</span></span><br><span class="line"><span class="keyword">if</span> self.server_class <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">    environ = base_environ(self.cfg)</span><br><span class="line">    environ.update(&#123;</span><br><span class="line">        <span class="string">"wsgi.multithread"</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">"SERVER_SOFTWARE"</span>: VERSION,</span><br><span class="line">    &#125;)</span><br><span class="line">    server = self.server_class(</span><br><span class="line">        s, application=self.wsgi, spawn=pool, log=self.log,</span><br><span class="line">        handler_class=self.wsgi_handler, environ=environ,</span><br><span class="line">        **ssl_args)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># s其实就是监听端口得到的那个socket</span></span><br><span class="line">    hfun = partial(self.handle, s)</span><br><span class="line">    <span class="comment"># 这里就是绑定文件描述符的关键</span></span><br><span class="line">    server = StreamServer(s, handle=hfun, spawn=pool, **ssl_args)</span><br><span class="line"></span><br><span class="line">server.start()</span><br><span class="line">servers.append(server)</span><br><span class="line"></span><br><span class="line"><span class="comment"># StreamServer是gevent提供的一个类，继承了BaseServer</span></span><br><span class="line"><span class="comment"># 在BaseServer完成处理方法的绑定(If given, the request handler)</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>虽然没有看其他的工作方式流程，但大概应该差不多都是最前的三步过程，可能会有一些函数的不同，其实去看gunicorn的源码无非就是想了解其工作流程，前边的文章<strong><a href="https://yunsonbai.top/2017/06/15/gunicorn-django/" target="_blank" rel="noopener">如何提高django的并发能力</a></strong>，遇到了当采用gevent方法启动时会导致数据库连接不能复用，后边会继续研究，希望能找到具体的原因。</p>
<h2 id="文章推荐"><a href="#文章推荐" class="headerlink" title="文章推荐"></a>文章推荐</h2><p><strong><a href="https://yunsonbai.top/2017/07/02/gunicorn-gevent-django/" target="_blank" rel="noopener">gunicorn+gevent+django解决mysql高连接数并提高性能</a></strong></p>
]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> gunicorn worker </tag>
            
            <tag> gunicorn worker 调度 </tag>
            
            <tag> gunicorn worker dispatch </tag>
            
            <tag> gunicorn 分析 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python中一些特殊方法的自定义及作用]]></title>
      <url>http://yunsonbai.github.io/2017/06/17/python%E4%B8%AD%E4%B8%80%E4%BA%9B%E7%89%B9%E6%AE%8A%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p><a href="https://yunsonbai.top/2017/06/17/python%E4%B8%AD%E4%B8%80%E4%BA%9B%E7%89%B9%E6%AE%8A%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener"><strong>原文连接</strong></a></p>
<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">聊一聊__add__,__mul__,__len__,__bool__的作用和自定义,以及__len__和</span><br><span class="line">__bool__是怎么影响<span class="keyword">if</span>/<span class="keyword">while</span>的条件判断，另外说一说怎么把一个对象以字符串的</span><br><span class="line">形式表现。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="自定义运算符"><a href="#自定义运算符" class="headerlink" title="自定义运算符"></a>自定义运算符</h2><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">自定义一个类, 类中有两个属性分别为x和y, 实现a+b  a*b的功能，要求a+b实现a.x+b.x</span><br><span class="line">a.y+b.y; a*b实现a.x*b.x a.y*b.y</span><br></pre></td></tr></table></figure>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">V</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self, v)</span>:</span></span><br><span class="line">        print(<span class="string">'run __add__'</span>)</span><br><span class="line">        <span class="keyword">return</span> V(x=v.x + self.x, y=v.y + self.y)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__mul__</span><span class="params">(self, v)</span>:</span></span><br><span class="line">        print(<span class="string">'run __mul__'</span>)</span><br><span class="line">        <span class="keyword">return</span> V(x=v.x * self.x, y=v.y * self.y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">v = V(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">print(<span class="string">'---------------add----------'</span>)</span><br><span class="line">new_v = v + v</span><br><span class="line">print(new_v.x)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'---------------mul----------'</span>)</span><br><span class="line">new_v = v * v</span><br><span class="line">print(new_v.y)</span><br></pre></td></tr></table></figure>
<h2 id="自定义bool值"><a href="#自定义bool值" class="headerlink" title="自定义bool值"></a>自定义bool值</h2><h3 id="关于if-v"><a href="#关于if-v" class="headerlink" title="关于if v"></a>关于if v</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">默认情况下我们自己定义的类的实例总是被认为时真的，但是有的时候这个默认值不是我们想要的，</span><br><span class="line">除非我们自己定义__bool__或者__len__才能实现我们想要的结果，我们还以刚才的类V举例，</span><br><span class="line">我想你总不希望当x和y都是<span class="number">0</span>的时候还希望<span class="keyword">if</span> v成立吧</span><br></pre></td></tr></table></figure>
<h3 id="关于bool"><a href="#关于bool" class="headerlink" title="关于bool()"></a>关于bool()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">像<span class="keyword">if</span> v/<span class="keyword">if</span> <span class="keyword">not</span> v等，python会调用bool(v)方法，而bool(v)背后的调用时尝试调用</span><br><span class="line">v.__bool__(),如果没有__bool__方法，就会尝试调用__len__方法，若这是返回<span class="number">0</span>则</span><br><span class="line">是<span class="literal">False</span>否则为<span class="literal">True</span>,这两个方法都没有的话只能按照默认处理了</span><br></pre></td></tr></table></figure>
<h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><h4 id="bool和len都没有"><a href="#bool和len都没有" class="headerlink" title="bool和len都没有"></a><strong>bool</strong>和<strong>len</strong>都没有</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">V</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line"></span><br><span class="line">v = V(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'--------------if----------'</span>)</span><br><span class="line"><span class="keyword">if</span> v:</span><br><span class="line">    print(<span class="string">'\tif True'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'\tif False'</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'-------------while----------'</span>)</span><br><span class="line"><span class="keyword">while</span> v:</span><br><span class="line">    print(<span class="string">'\twhile True'</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">执行结果：</span><br><span class="line">--------------<span class="keyword">if</span>----------</span><br><span class="line">    <span class="keyword">if</span> <span class="literal">True</span></span><br><span class="line">-------------<span class="keyword">while</span>----------</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>
<h4 id="只有len"><a href="#只有len" class="headerlink" title="只有len"></a>只有<strong>len</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">V</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'run __len__'</span>)</span><br><span class="line">        <span class="keyword">return</span> self.x + self.y</span><br><span class="line"></span><br><span class="line">v = V(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'--------------if----------'</span>)</span><br><span class="line"><span class="keyword">if</span> v:</span><br><span class="line">    print(<span class="string">'\tif True'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'\tif False'</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'-------------while----------'</span>)</span><br><span class="line"><span class="keyword">while</span> v:</span><br><span class="line">    print(<span class="string">'\twhile True'</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">执行结果：</span><br><span class="line">    --------------<span class="keyword">if</span>----------</span><br><span class="line">    run __len__</span><br><span class="line">        <span class="keyword">if</span> <span class="literal">True</span></span><br><span class="line">    -------------<span class="keyword">while</span>----------</span><br><span class="line">    run __len__</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>
<h4 id="bool与len都有"><a href="#bool与len都有" class="headerlink" title="bool与len都有"></a><strong>bool</strong>与<strong>len</strong>都有</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">V</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__bool__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'run __bool__'</span>)</span><br><span class="line">        <span class="comment"># 显然以下代码可以使if v效率更高</span></span><br><span class="line">        <span class="keyword">return</span> bool(self.x <span class="keyword">or</span> self.y)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'run __len__'</span>)</span><br><span class="line">        <span class="keyword">return</span> self.x + self.y</span><br><span class="line"></span><br><span class="line">v = V(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'--------------if----------'</span>)</span><br><span class="line"><span class="keyword">if</span> v:</span><br><span class="line">    print(<span class="string">'\tif True'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'\tif False'</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'-------------while----------'</span>)</span><br><span class="line"><span class="keyword">while</span> v:</span><br><span class="line">    print(<span class="string">'\twhile True'</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">执行结果：</span><br><span class="line">--------------<span class="keyword">if</span>----------</span><br><span class="line">run __bool__</span><br><span class="line">    <span class="keyword">if</span> <span class="literal">True</span></span><br><span class="line">-------------<span class="keyword">while</span>----------</span><br><span class="line">run __bool__</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>
<h2 id="如何使对象以字符串的形式表现"><a href="#如何使对象以字符串的形式表现" class="headerlink" title="如何使对象以字符串的形式表现"></a>如何使对象以字符串的形式表现</h2><h3 id="为什么要以字符串的形式"><a href="#为什么要以字符串的形式" class="headerlink" title="为什么要以字符串的形式"></a>为什么要以字符串的形式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">我们把一个对象以字符串的形式表现出来,是为了更好的辨认，方便后续处理或让用户觉得更加直观,</span><br><span class="line">最普遍的是在django的admin中，我们希望看到一行数据的谁的数据，而不是希望看到一个<span class="class"><span class="keyword">class</span></span></span><br><span class="line"><span class="class">或其他无法辨识的表现形式。</span></span><br></pre></td></tr></table></figure>
<h3 id="只用str实现"><a href="#只用str实现" class="headerlink" title="只用str实现"></a>只用<strong>str</strong>实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'\t-------------call __str__-------------\n'</span>)</span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = Student(<span class="string">'baisong'</span>)</span><br><span class="line">print(<span class="string">'------ s is:'</span>, s)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'---str--- s is:'</span>, str(s))</span><br><span class="line"></span><br><span class="line">print(<span class="string">'---repr---s is:'</span>, repr(s))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">执行结果：</span><br><span class="line">------ s <span class="keyword">is</span>:    -------------call __str__-------------</span><br><span class="line"></span><br><span class="line">baisong</span><br><span class="line"></span><br><span class="line">-------------call __str__-------------</span><br><span class="line"></span><br><span class="line">---str--- s <span class="keyword">is</span>: baisong</span><br><span class="line"></span><br><span class="line">---repr---s <span class="keyword">is</span>: &lt;__main__.Student object at <span class="number">0x7f64d6fedd30</span>&gt;</span><br></pre></td></tr></table></figure>
<h3 id="只用repr实现"><a href="#只用repr实现" class="headerlink" title="只用repr实现"></a>只用<strong>repr</strong>实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'\tcall __repr__'</span>)</span><br><span class="line">        print(<span class="string">'\t-------------call __str__-------------\n'</span>)</span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = Student(<span class="string">'baisong'</span>)</span><br><span class="line">print(<span class="string">'------ s is:'</span>, s)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'---str--- s is:'</span>, str(s))</span><br><span class="line"></span><br><span class="line">print(<span class="string">'---repr---s is:'</span>, repr(s))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">执行结果：</span><br><span class="line">------ s <span class="keyword">is</span>:    call __repr__</span><br><span class="line">-------------call __str__-------------</span><br><span class="line">baisong</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">call __repr__</span><br><span class="line">-------------call __str__-------------</span><br><span class="line">---str--- s <span class="keyword">is</span>: baisong</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">call __repr__</span><br><span class="line">-------------call __str__-------------</span><br><span class="line">---repr---s <span class="keyword">is</span>: baisong</span><br></pre></td></tr></table></figure>
<h3 id="repr与str的不同"><a href="#repr与str的不同" class="headerlink" title="repr与str的不同"></a><strong>repr</strong>与<strong>str</strong>的不同</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">从上边例子可以看出来__repr__与__str__的区别在于，后者实在str()被使用, 或者在</span><br><span class="line"><span class="keyword">print</span>的时候调用, __str__返回的字符串对于终端用户更友好。而__repr__是由python</span><br><span class="line">的内置函数repr调用, 如果说你只想用其中的一个,建议使用__repr__, 因为python解释</span><br><span class="line">器会在没有__str__的时候用__repr__代替(前边的例子<span class="keyword">print</span>已经展示出来), 读者可以自</span><br><span class="line">己试试当__repr__与__str__都存在的输出结果。</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
            <tag> __bool__,__len__ </tag>
            
            <tag> 自定义算术运算符 </tag>
            
            <tag> __repr__ </tag>
            
            <tag> __add__,__mul__ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何提高django的并发能力]]></title>
      <url>http://yunsonbai.github.io/2017/06/15/gunicorn-django/</url>
      <content type="html"><![CDATA[<p><a href="http://yunsonbai.top/2017/06/15/gunicorn-django/" target="_blank" rel="noopener">原文连接</a></p>
<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>手头上的项目有一些采用django框架编写, 如果说并发量比较小的时候简单的runserver是可以应对的.<br>那么当并发达到一两千的时候，该怎么提高django的并发能力呢？</p>
<a id="more"></a>
<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><ul>
<li>环境说明：<ul>
<li>python: 3.5</li>
<li>django: 1.8.2</li>
<li>gunicorn: 19.7.1</li>
</ul>
</li>
<li>系统：<ul>
<li>服务器: centos 4核</li>
<li>压测机器: centos 4核</li>
</ul>
</li>
<li>压测环境<ul>
<li>siege/<a href="https://yunsonbai.top/2019/02/24/ysab/" target="_blank" rel="noopener"><font color="#7B68EE">ysab</font></a></li>
<li>4核centos测试机</li>
</ul>
</li>
<li>为什么用django<ul>
<li>开发效率高</li>
<li>好上手</li>
</ul>
</li>
<li>关于gunicorn<ul>
<li>Gunicorn ‘Green Unicorn’ is a Python WSGI HTTP Server for UNIX.It’s a pre-fork worker model. The Gunicorn server is broadly compatible with various web frameworks, simply implemented, light on server resources, and fairly speedy.(这是官方给出的回答)</li>
</ul>
</li>
</ul>
<h2 id="压测方式及命令"><a href="#压测方式及命令" class="headerlink" title="压测方式及命令"></a>压测方式及命令</h2><ul>
<li>压测方式：<img src="https://yunsonbai.github.io/images/django/lc.png" alt="lc"></li>
<li>压测命令：<ul>
<li>siege: siege -c255 -t200S -v -b ‘<a href="http://B_ip:8080/test" target="_blank" rel="noopener">http://B_ip:8080/test</a> POST appid=111’</li>
<li>ysab: ysab -n 900 -m POST -u <a href="http://B_ip:8080/test" target="_blank" rel="noopener">http://B_ip:8080/test</a> -d ‘{“appid”: “111”, “other”: “other”}’</li>
<li>备注: 欢迎使用ysab, <a href="https://yunsonbai.top/2019/02/24/ysab" target="_blank" rel="noopener"><font color="#7B68EE">ysab文档</font></a></li>
</ul>
</li>
</ul>
<h2 id="本次实验业务场景"><a href="#本次实验业务场景" class="headerlink" title="本次实验业务场景"></a>本次实验业务场景</h2><p><img src="https://yunsonbai.github.io/images/django/db_c.png" alt="lc"></p>
<h2 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示"></a>代码展示</h2><h3 id="settings部分"><a href="#settings部分" class="headerlink" title="settings部分"></a>settings部分</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里我们用mysql，其他配置都是默认</span></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'ce'</span>,</span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'root'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">''</span>,</span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">'192.168.96.95'</span>,</span><br><span class="line">        <span class="string">'PORT'</span>: <span class="string">'3306'</span>,</span><br><span class="line">        <span class="comment"># 'CONN_MAX_AGE': 600,</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="models部分"><a href="#models部分" class="headerlink" title="models部分"></a>models部分</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    url = models.CharField(max_length=<span class="number">228</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line">    img_url = models.CharField(max_length=<span class="number">228</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line">    title = models.CharField(max_length=<span class="number">228</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line">    content = models.CharField(max_length=<span class="number">228</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'test'</span></span><br><span class="line">        verbose_name = <span class="string">"test表"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__unicode__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.id</span><br></pre></td></tr></table></figure>
<h3 id="views部分"><a href="#views部分" class="headerlink" title="views部分"></a>views部分</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(APIView)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, requsts)</span>:</span></span><br><span class="line">        Test.objects.create(</span><br><span class="line">            **&#123;<span class="string">'url'</span>: str(<span class="number">1000000</span> * time.time())&#125;)</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">"status"</span>: <span class="number">200</span>&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="开始压测"><a href="#开始压测" class="headerlink" title="开始压测"></a>开始压测</h2><h3 id="数据说明"><a href="#数据说明" class="headerlink" title="数据说明"></a>数据说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">目前数据库test表的数据量是, 其中id是自增主键</span><br><span class="line">MySQL [ce]&gt; select id from test order by id desc limit 2;</span><br><span class="line">+--------+</span><br><span class="line">| id     |</span><br><span class="line">+--------+</span><br><span class="line">| 627775 |</span><br><span class="line">| 627774 |</span><br><span class="line">+--------+</span><br></pre></td></tr></table></figure>
<h3 id="runserver-方式压测结果"><a href="#runserver-方式压测结果" class="headerlink" title="runserver 方式压测结果"></a>runserver 方式压测结果</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Lifting the server siege...      done.</span><br><span class="line"></span><br><span class="line">Transactions:               <span class="number">24041</span> hits</span><br><span class="line">Availability:               <span class="number">99.93</span> %</span><br><span class="line">Elapsed time:               <span class="number">99.60</span> secs</span><br><span class="line">Data transferred:            <span class="number">0.32</span> MB</span><br><span class="line">Response time:                <span class="number">1.03</span> secs</span><br><span class="line">Transaction rate:          <span class="number">241.38</span> trans/sec  <span class="comment"># 并发量只有241</span></span><br><span class="line">Throughput:                <span class="number">0.00</span> MB/sec</span><br><span class="line">Concurrency:              <span class="number">248.94</span></span><br><span class="line">Successful transactions:       <span class="number">24041</span></span><br><span class="line">Failed transactions:              <span class="number">16</span></span><br><span class="line">Longest transaction:           <span class="number">32.55</span></span><br><span class="line">Shortest transaction:            <span class="number">0.05</span></span><br></pre></td></tr></table></figure>
<h3 id="gunicorn-gevent-4个worker"><a href="#gunicorn-gevent-4个worker" class="headerlink" title="gunicorn + gevent (4个worker)"></a>gunicorn + gevent (4个worker)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Lifting the server siege...      done.</span><br><span class="line"></span><br><span class="line">Transactions:               <span class="number">23056</span> hits</span><br><span class="line">Availability:              <span class="number">100.00</span> %</span><br><span class="line">Elapsed time:               <span class="number">99.49</span> secs</span><br><span class="line">Data transferred:            <span class="number">0.31</span> MB</span><br><span class="line">Response time:                <span class="number">1.09</span> secs</span><br><span class="line">Transaction rate:          <span class="number">231.74</span> trans/sec <span class="comment"># 并发量只有231</span></span><br><span class="line">Throughput:                <span class="number">0.00</span> MB/sec</span><br><span class="line">Concurrency:              <span class="number">252.95</span></span><br><span class="line">Successful transactions:       <span class="number">23056</span></span><br><span class="line">Failed transactions:               <span class="number">0</span></span><br><span class="line">Longest transaction:            <span class="number">8.21</span></span><br><span class="line">Shortest transaction:            <span class="number">0.01</span></span><br></pre></td></tr></table></figure>
<h3 id="gunicorn-gthread-4个worker-–threads-50"><a href="#gunicorn-gthread-4个worker-–threads-50" class="headerlink" title="gunicorn + gthread (4个worker, –threads=50)"></a>gunicorn + gthread (4个worker, –threads=50)</h3><h4 id="启动方式"><a href="#启动方式" class="headerlink" title="启动方式"></a>启动方式</h4><p><a href="(http://docs.gunicorn.org/en/latest/settings.html">官方有相应说明</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gunicorn --env DJANGO_SETTINGS_MODULE=ce.settings ce.wsgi:application -w <span class="number">4</span> -b <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">8080</span> -k gthread --threads <span class="number">40</span> --max-requests <span class="number">4096</span> --max-requests-jitter <span class="number">512</span></span><br></pre></td></tr></table></figure></p>
<h4 id="压测结果"><a href="#压测结果" class="headerlink" title="压测结果"></a>压测结果</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">启动方式：</span><br><span class="line"></span><br><span class="line">done.</span><br><span class="line">siege aborted due to excessive socket failure; you</span><br><span class="line">can change the failure threshold <span class="keyword">in</span> $HOME/.siegerc</span><br><span class="line"></span><br><span class="line">Transactions:               <span class="number">28231</span> hits</span><br><span class="line">Availability:               <span class="number">95.67</span> %</span><br><span class="line">Elapsed time:               <span class="number">30.71</span> secs</span><br><span class="line">Data transferred:            <span class="number">0.41</span> MB</span><br><span class="line">Response time:                <span class="number">0.27</span> secs</span><br><span class="line">Transaction rate:          <span class="number">919.28</span> trans/sec  <span class="comment"># 提高了不少吧，能不能在提高？</span></span><br><span class="line">Throughput:                <span class="number">0.01</span> MB/sec</span><br><span class="line">Concurrency:              <span class="number">251.06</span></span><br><span class="line">Successful transactions:       <span class="number">28231</span></span><br><span class="line">Failed transactions:            <span class="number">1278</span>        <span class="comment"># 但是失败的有些多</span></span><br><span class="line">Longest transaction:            <span class="number">8.06</span></span><br><span class="line">Shortest transaction:            <span class="number">0.01</span></span><br></pre></td></tr></table></figure>
<h3 id="gunicorn-gthread-CONN-MAX-AGE-4个worker-–threads-50"><a href="#gunicorn-gthread-CONN-MAX-AGE-4个worker-–threads-50" class="headerlink" title="gunicorn + gthread + CONN_MAX_AGE(4个worker, –threads=50)"></a>gunicorn + gthread + CONN_MAX_AGE(4个worker, –threads=50)</h3><p><a href="https://docs.djangoproject.com/en/1.11/ref/databases/" target="_blank" rel="noopener">关于CONN_MAX_AGE</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">CONN_MAX_AGE: 复用数据库链接</span><br><span class="line"></span><br><span class="line">Lifting the server siege...      done.</span><br><span class="line"></span><br><span class="line">Transactions:              <span class="number">110289</span> hits</span><br><span class="line">Availability:               <span class="number">99.62</span> %</span><br><span class="line">Elapsed time:               <span class="number">99.65</span> secs</span><br><span class="line">Data transferred:            <span class="number">1.47</span> MB</span><br><span class="line">Response time:                <span class="number">0.23</span> secs</span><br><span class="line">Transaction rate:         <span class="number">1106.76</span> trans/sec  <span class="comment"># 这次又提升了不少啊</span></span><br><span class="line">Throughput:                <span class="number">0.01</span> MB/sec</span><br><span class="line">Concurrency:              <span class="number">253.84</span></span><br><span class="line">Successful transactions:      <span class="number">110289</span></span><br><span class="line">Failed transactions:             <span class="number">422</span></span><br><span class="line">Longest transaction:            <span class="number">3.85</span></span><br><span class="line">Shortest transaction:            <span class="number">0.01</span></span><br></pre></td></tr></table></figure></p>
<h3 id="能不能gunicorn-gevent-CONN-MAX-AGE-4个worker"><a href="#能不能gunicorn-gevent-CONN-MAX-AGE-4个worker" class="headerlink" title="能不能gunicorn+gevent+CONN_MAX_AGE(4个worker)"></a>能不能gunicorn+gevent+CONN_MAX_AGE(4个worker)</h3><p>这里我不建议使用，这样的话你的数据库连接数会飚的很高，服务会挂的很惨, 毕竟数据库是不会允许<br>无休止的建立连接的。前边的提高手段无非用的多线程，如果一定要用协程(gevent)的方式呢，能不<br>能解决数据库连接数过高的问题，而且还能有不错的性能呢？可以看一下这篇文章:<br><strong><a href="http://yunsonbai.top/2017/06/20/gunicorn_worker%E7%9A%84%E8%B0%83%E5%BA%A6/" target="_blank" rel="noopener">gunicorn+gevent+django解决mysql高连接数问题</a></strong></p>
<h2 id="如何再次增加并发量"><a href="#如何再次增加并发量" class="headerlink" title="如何再次增加并发量"></a>如何再次增加并发量</h2><h3 id="采用nginx做负载"><a href="#采用nginx做负载" class="headerlink" title="采用nginx做负载"></a>采用nginx做负载</h3><p><img src="https://yunsonbai.github.io/images/django/nf.png" alt="nginx负载"></p>
<h3 id="去掉自增主键"><a href="#去掉自增主键" class="headerlink" title="去掉自增主键"></a>去掉自增主键</h3><p>原因很简单,因为自增主键的存在写库存在抢锁, 可以利用全局id生成器提前生成id直接写入数据库</p>
<h3 id="换成异步任务去写库"><a href="#换成异步任务去写库" class="headerlink" title="换成异步任务去写库"></a>换成异步任务去写库</h3><p>如果数据只是存在mysql中做备份，建议使用异步的方式写入库，先把数据写到缓存下发给用户，之后在<br>利用后台异步任务一点点的写入，例如聊天系统可以这样干</p>
<h3 id="换成更高效的框架或者语言"><a href="#换成更高效的框架或者语言" class="headerlink" title="换成更高效的框架或者语言"></a>换成更高效的框架或者语言</h3><p>可以试试tornado, 如果tornado依然无法满足，可以尝试使用golango，毕竟golang是以高并发著称,<br>而且是编译语言，而且基于它的web框架也很容易上手，性能很可观，例如Gin<br><a href="https://github.com/gin-gonic/gin" target="_blank" rel="noopener">Gin</a></p>
<h2 id="文章推荐"><a href="#文章推荐" class="headerlink" title="文章推荐"></a>文章推荐</h2><p><strong><a href="https://yunsonbai.top/2017/06/20/gunicorn_worker%E7%9A%84%E8%B0%83%E5%BA%A6/" target="_blank" rel="noopener">关于gunicorn的worker调度</a></strong><br><strong><a href="https://yunsonbai.top/2017/07/02/gunicorn-gevent-django/" target="_blank" rel="noopener">gunicorn+gevent+django解决mysql高连接数并提高性能</a></strong><br><strong><a href="https://yunsonbai.top/2018/12/05/nginx-tornado/" target="_blank" rel="noopener">nginx+tornado折腾笔记</a></strong>(较gunicorn+django进一步提升服务并发量)<br><strong><a href="https://yunsonbai.top/2019/04/16/golang-gin/" target="_blank" rel="noopener">Golang高性能框架gin</a></strong>(更高qps解决办法)</p>
]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> gunicorn django </tag>
            
            <tag> 提高django的并发能力 </tag>
            
            <tag> django 并发能力提高 </tag>
            
            <tag> django 高并发 </tag>
            
            <tag> gunicorn 高并发 </tag>
            
            <tag> gunicorn gthread django </tag>
            
            <tag> gunicorn gevent django </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[新版sentry安装配置]]></title>
      <url>http://yunsonbai.github.io/2017/03/24/new-sentry/</url>
      <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">前段时间搭建了sentry 7.x版本,运行了有一段时间了，现在日志来量有点大</span><br><span class="line">遇到了一个突出的问题：清理历史数据十分缓慢。最近在浏览sentry官方文档</span><br><span class="line">发现都已经更新到8.14.1了, 而且不在支持mysql, 官方给的解释:<span class="string">"Due to </span></span><br><span class="line"><span class="string">numerous issues over the years and recent discoveries that</span></span><br><span class="line"><span class="string">nearly all schema migration was broken in MySQL (due to some</span></span><br><span class="line"><span class="string">behavior in our migration tool), we've made the decision to</span></span><br><span class="line"><span class="string">no longer support MySQL. It is possible to bring the schema</span></span><br><span class="line"><span class="string">up to date on a MySQL machine, but Sentry's automated migrations</span></span><br><span class="line"><span class="string">will likely not work and require DBA assistance.</span></span><br><span class="line"><span class="string">Postgres is now the only supported production database."</span></span><br><span class="line">而且现在之前搭建的7.x版本清理数据慢的出奇，故花了些时间来搭建新的sentry,</span><br><span class="line">搭建过程分享一下</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><ul>
<li>需要安装：<ul>
<li>python==2.7.5</li>
<li>Postgresql==9.2</li>
<li>sentry==8.14.1</li>
<li>redis==3.2.8</li>
</ul>
</li>
<li>系统： <ul>
<li>centos6</li>
</ul>
</li>
<li>本文重点：<ul>
<li>Postgresql安装配置</li>
<li>sentry安装配置</li>
</ul>
</li>
</ul>
<p>##　Postgresql安装配置</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">这里采用yum或者编译安装都可以，关键是配置启动，我们来说yum方式</span><br><span class="line"></span><br><span class="line"><span class="comment"># yum install postgresql</span></span><br><span class="line"><span class="comment"># yum install libpq-dev*</span></span><br><span class="line"><span class="comment"># yum install python-dev*</span></span><br><span class="line"><span class="comment"># yum install postgresql-contrib</span></span><br><span class="line"><span class="comment"># yum install postgresql-client</span></span><br><span class="line"><span class="comment"># yum install postgresql-devel</span></span><br><span class="line"><span class="comment"># yum install pgadmin3</span></span><br><span class="line"></span><br><span class="line">没有意外的话安装应该ok</span><br></pre></td></tr></table></figure>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">首先不能在root下启动postgresql,所以先切到postgres(安装过程中已经创建)</span><br><span class="line"></span><br><span class="line"><span class="comment"># su postgres</span></span><br><span class="line"></span><br><span class="line">最让人恶心的是它的配置并不在etc下，而是在/var/lib/pgsql/data/(</span><br><span class="line">确定一下用户组和用户是不是postgres，不是改)</span><br><span class="line"></span><br><span class="line">$ cd /var/lib/pgsql/data/</span><br><span class="line">$ vim /var/lib/pgsql/data/pg_hba.conf</span><br><span class="line">    尤其是以下三行：</span><br><span class="line">        local   all　　　　all                 trust</span><br><span class="line">        host    all    all  <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>/<span class="number">32</span>   trust</span><br><span class="line">        host    all    all  ::<span class="number">1</span>/<span class="number">128</span>        ident</span><br><span class="line"></span><br><span class="line">启动</span><br><span class="line"></span><br><span class="line">$ postgres -D /var/lib/pgsql/data/</span><br></pre></td></tr></table></figure>
<h4 id="创建库"><a href="#创建库" class="headerlink" title="创建库"></a>创建库</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">postgres初始后第一个用户是postgres默认下是没有密码的，但是如果不把以上</span><br><span class="line">配置配成trust登陆不了</span><br><span class="line"></span><br><span class="line">$ psql -U postgres -h <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> -p <span class="number">5432</span></span><br><span class="line">postgres=<span class="comment"># alter user postgres with password 'new password';</span></span><br><span class="line"></span><br><span class="line">之后更改配置文件成：</span><br><span class="line">    local   all　　　　all                 md5</span><br><span class="line">    host    all    all  <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>/<span class="number">32</span>   md5</span><br><span class="line">    host    all    all  ::<span class="number">1</span>/<span class="number">128</span>        ident</span><br><span class="line">启动</span><br><span class="line"></span><br><span class="line">$ postgres -D /var/lib/pgsql/data/</span><br><span class="line"></span><br><span class="line">登陆创建库：</span><br><span class="line">$ psql -U postgres -h <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> -p <span class="number">5432</span></span><br><span class="line">postgres=<span class="comment">#　create database sentry</span></span><br></pre></td></tr></table></figure>
<h2 id="安装sentry"><a href="#安装sentry" class="headerlink" title="安装sentry"></a>安装sentry</h2><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">安装好python2<span class="number">.7</span>(yum或者自己编译)</span><br><span class="line">安装好redis(直接取官方下载)</span><br></pre></td></tr></table></figure>
<h3 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这边我们用pip的方式安装</span><br><span class="line"><span class="comment"># pip install sentry  (最新版)</span></span><br></pre></td></tr></table></figure>
<h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim sentry.conf.py</span></span><br><span class="line"></span><br><span class="line">几个关键点：</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 连接数据库</span></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'sentry.db.postgres'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'sentry'</span>,</span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'postgres'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">'123456'</span>,</span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">        <span class="string">'PORT'</span>: <span class="string">'5432'</span>,</span><br><span class="line">        <span class="string">'AUTOCOMMIT'</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">'ATOMIC_REQUESTS'</span>: <span class="literal">False</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 配置SENTRY_OPTIONS</span></span><br><span class="line">SENTRY_OPTIONS = &#123;</span><br><span class="line">    <span class="string">'redis.clusters'</span>: &#123;</span><br><span class="line">        <span class="string">'default'</span>: &#123;</span><br><span class="line">            <span class="string">'hosts'</span>: &#123;</span><br><span class="line">                <span class="number">0</span>: &#123;</span><br><span class="line">                    <span class="string">'host'</span>: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">                    <span class="string">'port'</span>: <span class="number">6379</span>,</span><br><span class="line">                    <span class="string">'password'</span>: <span class="string">''</span>,</span><br><span class="line">                    <span class="string">'db'</span>: <span class="number">0</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'system.secret-key'</span>: <span class="string">'DF0d/JSUbdCx7pzq4uh/lW43svXnCGuqIfjS2krkFA7N0BIPxCgcmg=='</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'mail.from'</span>: <span class="string">'xx@xx.com'</span>,  <span class="comment"># 发报警邮件用</span></span><br><span class="line">    <span class="string">'mail.host'</span>: <span class="string">'xx.xx.xx.xx'</span>,</span><br><span class="line">    <span class="string">'mail.port'</span>: <span class="number">26</span>,</span><br><span class="line">    <span class="string">'mail.username'</span>: <span class="string">'xx@xx.com'</span>,</span><br><span class="line">    <span class="string">'mail.password'</span>: <span class="string">'xxxx'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SENTRY_WEB_HOST = <span class="string">'0.0.0.0'</span></span><br><span class="line">SENTRY_WEB_PORT = <span class="number">9000</span></span><br><span class="line">SENTRY_WEB_OPTIONS = &#123;</span><br><span class="line">    <span class="string">'workers'</span>: <span class="number">5</span>,  <span class="comment"># the number of web workers</span></span><br><span class="line">    <span class="comment"># 'protocol': 'uwsgi',  # Enable uwsgi protocol instead of http</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/sentry --config=/baisong/sentry.conf.py run worker</span><br><span class="line">/usr/bin/sentry --config=/baisong/sentry.conf.py django runserver <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">9000</span></span><br></pre></td></tr></table></figure>
<h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可以采用nginx代理的方式多,后端多起几个端口</span><br></pre></td></tr></table></figure>
<h2 id="关于使用"><a href="#关于使用" class="headerlink" title="关于使用"></a>关于使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">目前sentry已经搭建完毕，关于在django中如何使用，请看下边的连接</span><br></pre></td></tr></table></figure>
<p><a href="https://yunsonbai.top/2016/05/30/django-sentry/" target="_blank" rel="noopener">利用sentry收集django的日志</a></p>
]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> sentry </tag>
            
            <tag> postgreSQL </tag>
            
            <tag> sentry安装配置 </tag>
            
            <tag> sentry 8.14.1 </tag>
            
            <tag> 监控系统sentry搭建 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[博客支持https]]></title>
      <url>http://yunsonbai.github.io/2017/01/12/blog-https/</url>
      <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">昨天把博客迁到了https下，现在博客支持https访问了。本文适合自己用机器搭建的博客。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">首先之前就已经听说从<span class="number">2017</span>年<span class="number">1</span>月份起，Chrome浏览器将会把采用HTTP协议的网站标记为“不安全”网站；另外最近自己手头的很多项目都开始往https下迁移；还有就是用谷歌浏览器看自己的博客一直提示感叹号；最后最让我郁闷的是某运营商的劫持，种种这些原因促使自己的让博客支持https访问。</span><br></pre></td></tr></table></figure>
<h2 id="https请求流程"><a href="#https请求流程" class="headerlink" title="https请求流程"></a>https请求流程</h2><p><img src="https://yunsonbai.github.io/images/https/lc.jpg" alt="Catch8D7B"></p>
<h2 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h2><ul>
<li>简单方式： 把博客部署在github上，直接就能https访问<br>  例如<a href="https://yunsonbai.github.io/">yunsonbai_github</a></li>
<li>稍微麻烦点的方式： 自己购买服务器部署上博客后，找认证机构办法签证（我采用的这个方式）<br>  例如<a href="https://yunsonbai.top" target="_blank" rel="noopener">yunsonbai</a><h2 id="认证机构"><a href="#认证机构" class="headerlink" title="认证机构"></a>认证机构</h2></li>
<li>收费的<ul>
<li>geotrust</li>
</ul>
</li>
<li>免费的<ul>
<li>Let’s Encrypt(本次介绍如何使用这个)</li>
</ul>
</li>
</ul>
<h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><ul>
<li><p>创建一个临时文件ssl(存放过程中需要用到的临时文件)<br>  $ mkdir ssl<br>  $ cd ssl</p>
</li>
<li><p>创建一个 RSA 私钥用于 Let’s Encrypt 识别你的身份<br>  $ openssl genrsa 4096 &gt; account.key</p>
</li>
<li><p>生成 CSR</p>
<ul>
<li>创建 RSA 私钥<br>  $ openssl genrsa 4096 &gt; domain.key<br>  $ openssl req -new -sha256 -key domain.key -out domain.csr(基本都能看懂，都是跟地址相关的东西)</li>
</ul>
</li>
<li><p>配置nginx(针对nginx)</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location ^~ /.well-known/acme-challenge/ &#123;</span><br><span class="line">       alias /usr/local/nginx/html/.well-known/acme-challenge/;</span><br><span class="line">       try_files $uri =<span class="number">404</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">为什么要用到.well-known/acme-challenge/文件，Let<span class="string">'s Encrypt在验证网站是否归你所有的时候会访问该目录。</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>获取网站证书</p>
<ul>
<li>利用Let’s Encrypt官网提供的脚本工具</li>
<li><p>利用开源项目acme_tiny(我用的这个，不错)<br>  $ wget <a href="https://raw.githubusercontent.com/diafygi/acme-tiny/master/acme_tiny.py" target="_blank" rel="noopener">https://raw.githubusercontent.com/diafygi/acme-tiny/master/acme_tiny.py</a><br>  $ python acme_tiny.py –account-key ./account.key –csr ./domain.csr –acme-dir /usr/local/nginx/html/.well-known/acme-challenge/ &gt; ./signed.crt</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一切正常的话不会报任何错误，切记/usr/local/nginx/html/.well-known/acme-challenge/路径是你的博客相关路径</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">到目前为止拿到了证书</span><br></pre></td></tr></table></figure>
<ul>
<li>把刚才ssl文件移到你认为比较靠谱的目录下(例如 /usr/ssl)</li>
<li>配置nginx</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">	listen <span class="number">443</span> ssl;</span><br><span class="line">	ssl_certificate /usr/ssl/signed.crt;</span><br><span class="line">	ssl_certificate_key /usr/ssl/domain.key;</span><br><span class="line">	location / &#123;</span><br><span class="line">			root   html;</span><br><span class="line">			index  index.html index.htm;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也可以参考<a href="http://yunsonbai.github.io/2016/06/09/nginx-https%E9%85%8D%E7%BD%AE/">nginx实现https</a></p>
<ul>
<li>将http请求转到https下</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">	listen       <span class="number">80</span>;</span><br><span class="line">       server_name  xxx.xx;</span><br><span class="line">	location / &#123;</span><br><span class="line">		rewrite ^/(.*)$ https://xxx.xx/$<span class="number">1</span> permanent;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="需要注意的地方"><a href="#需要注意的地方" class="headerlink" title="需要注意的地方"></a>需要注意的地方</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Let<span class="string">'s Encrypt的证书只有90天有效期，所以你要美90天续签一次，最简单的方式就是利用crontab来做这个是，说白了定期执行这条python acme_tiny.py --account-key ./account.key --csr ./domain.csr --acme-dir /usr/local/nginx/html/.well-known/acme-challenge/ &gt; ./signed.crt命令</span></span><br></pre></td></tr></table></figure>
<h2 id="大功告成"><a href="#大功告成" class="headerlink" title="大功告成"></a>大功告成</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">尝试访问一下https://yoursite.com</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> https </category>
            
        </categories>
        
        
        <tags>
            
            <tag> https </tag>
            
            <tag> 博客支持https </tag>
            
            <tag> 免费https </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[websocket聊天应用]]></title>
      <url>http://yunsonbai.github.io/2016/12/18/%E5%88%A9%E7%94%A8websocket%E5%AE%9E%E7%8E%B0%E8%81%8A%E5%A4%A9%E5%B0%8F%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">趁着清闲研究了一下websocket，并利用python和html简单的实现了简单的聊天系统，</span><br><span class="line">希望对想要了解的有所帮助，有什么好的意见还请大家提出。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><ul>
<li>编程语言：python，html</li>
<li>实现功能： 在浏览器开启两个对话窗口并进行聊天</li>
<li>需要的第三方库：<ul>
<li>pip install websockets</li>
</ul>
</li>
<li>关于websocke:<ul>
<li>WebSocket protocol 是HTML5一种新的协议</li>
<li>实现了浏览器与服务器全双工通信</li>
</ul>
</li>
<li>我为什么要用：<ul>
<li>实现web页面的即时通讯</li>
<li>去除轮询带来的诸多缺点（这个网上一搜一大把）</li>
</ul>
</li>
</ul>
<h2 id="关于流程图"><a href="#关于流程图" class="headerlink" title="关于流程图"></a>关于流程图</h2><ul>
<li>建立连接过程<br><img src="https://yunsonbai.github.io/images/push/jl.jpg" alt="Catch8D7B"></li>
<li>发信过程<br><img src="https://yunsonbai.github.io/images/push/fx.jpg" alt="Catch8D7B"></li>
</ul>
<h2 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># codind=utf-8</span></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> websockets</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">ALLSOKETS = &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_connection</span><span class="params">(ws_id, ws)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> ALLSOKETS</span><br><span class="line">    ALLSOKETS[ws_id] = ws</span><br><span class="line">    print(ALLSOKETS)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter_handle</span><span class="params">(ws_id)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> ALLSOKETS.get(ws_id)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">handler</span><span class="params">(websocket, path)</span>:</span></span><br><span class="line">    <span class="comment"># print(path)</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        message = <span class="keyword">await</span> websocket.recv()</span><br><span class="line">        message = json.loads(message)</span><br><span class="line">        login = message.get(<span class="string">'login'</span>)</span><br><span class="line">        <span class="keyword">if</span> login:</span><br><span class="line">            add_connection(message[<span class="string">'user_id'</span>], websocket)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ws = filter_handle(message[<span class="string">'to_user_id'</span>])</span><br><span class="line">            <span class="keyword">if</span> ws:</span><br><span class="line">                <span class="keyword">await</span> ws.send(message[<span class="string">'msg'</span>])</span><br><span class="line">        print(<span class="string">'recv:'</span>, message)</span><br><span class="line">        print(time.time())</span><br><span class="line"></span><br><span class="line">start_server = websockets.serve(</span><br><span class="line">    handler, <span class="string">'localhost'</span>, <span class="number">8765</span>, klass=websockets.WebSocketServerProtocol)</span><br><span class="line">asyncio.get_event_loop().run_until_complete(start_server)</span><br><span class="line">asyncio.get_event_loop().run_forever()</span><br></pre></td></tr></table></figure>
<h2 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h2><ul>
<li>client1</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">    &lt;title&gt;WebSocket1&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        html,body&#123;font:normal 0.9em arial,helvetica;&#125;</span><br><span class="line">        #log &#123;width:440px; height:200px; border:1px solid #7F9DB9; overflow:auto;&#125;</span><br><span class="line">        #msg &#123;width:330px;&#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var socket;</span><br><span class="line">        function init()&#123;</span><br><span class="line">            var host = &quot;ws://127.0.0.1:8765/&quot;;</span><br><span class="line">            socket = new WebSocket(host);</span><br><span class="line">            try&#123;</span><br><span class="line">                socket.onopen    = function(msg)&#123; ; &#125;;</span><br><span class="line">                socket.onmessage = function(msg)&#123; log(msg.data); &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            catch(ex)&#123;</span><br><span class="line">                socket.onclose   = function(msg)&#123; log(&quot;Lose Connection!&quot;); &#125;;</span><br><span class="line">                log(ex); </span><br><span class="line">            &#125;</span><br><span class="line">            $(&quot;msg&quot;).focus();</span><br><span class="line">        &#125;</span><br><span class="line">        function send()&#123;</span><br><span class="line">            var txt,msg;</span><br><span class="line">            txt = $(&quot;msg&quot;);</span><br><span class="line">            msg = txt.value;</span><br><span class="line">            if(!msg)&#123; </span><br><span class="line">                alert(&quot;Message can not be empty&quot;); </span><br><span class="line">                return; </span><br><span class="line">            &#125;</span><br><span class="line">            log(msg)</span><br><span class="line">            msg = &apos;&#123;&quot;to_user_id&quot;: &quot;WebSocket2&quot;, &quot;msg&quot;:&quot;&apos; + msg + &apos;&quot;&#125;&apos;</span><br><span class="line">            txt.value=&quot;&quot;;</span><br><span class="line">            txt.focus();</span><br><span class="line">            try&#123; </span><br><span class="line">                socket.send(msg); </span><br><span class="line">            &#125; </span><br><span class="line">            catch(ex)&#123; </span><br><span class="line">                log(ex); </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        function login()&#123;</span><br><span class="line">            msg = &apos;&#123;&quot;user_id&quot;: &quot;WebSocket1&quot;, &quot;login&quot;: &quot;1&quot;&#125;&apos;</span><br><span class="line">            socket.send(msg); </span><br><span class="line">        &#125;         </span><br><span class="line"></span><br><span class="line">        function $(id)&#123; </span><br><span class="line">            var id = document.getElementById(id);</span><br><span class="line">            return id;</span><br><span class="line">        &#125;</span><br><span class="line">        function log(msg)&#123; </span><br><span class="line">            $(&quot;log&quot;).innerHTML+=&quot;&lt;br&gt;&quot;+msg; </span><br><span class="line">        &#125;</span><br><span class="line">        function onkey(event)&#123; </span><br><span class="line">            if(event.keyCode==13)&#123; </span><br><span class="line">                send(); </span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body onload=&quot;init()&quot;&gt;</span><br><span class="line">        &lt;h3&gt;WebSocket1&lt;/h3&gt;</span><br><span class="line">        &lt;br&gt;&lt;br&gt;</span><br><span class="line">        &lt;button onclick=&quot;login()&quot;&gt;login&lt;/button&gt;</span><br><span class="line">        &lt;div id=&quot;log&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;input id=&quot;msg&quot; type=&quot;textbox&quot; onkeypress=&quot;onkey(event)&quot;/&gt;</span><br><span class="line">        &lt;button onclick=&quot;send()&quot;&gt;发送&lt;/button&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>client2</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">与client1差不多只是改下边两处即可</span><br><span class="line">function send()&#123;</span><br><span class="line">    var txt,msg;</span><br><span class="line">    txt = $(&quot;msg&quot;);</span><br><span class="line">    msg = txt.value;</span><br><span class="line">    if(!msg)&#123;</span><br><span class="line">        alert(&quot;Message can not be empty&quot;); </span><br><span class="line">        return; </span><br><span class="line">    &#125;</span><br><span class="line">    log(msg)</span><br><span class="line">    msg = &apos;&#123;&quot;to_user_id&quot;: &quot;WebSocket1&quot;, &quot;msg&quot;:&quot;&apos; + msg + &apos;&quot;&#125;&apos;</span><br><span class="line">    txt.value=&quot;&quot;;</span><br><span class="line">    txt.focus();</span><br><span class="line">    try&#123; </span><br><span class="line">        socket.send(msg); </span><br><span class="line">    &#125; </span><br><span class="line">    catch(ex)&#123; </span><br><span class="line">        log(ex); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">function login()&#123;</span><br><span class="line">    msg = &apos;&#123;&quot;user_id&quot;: &quot;WebSocket2&quot;, &quot;login&quot;: &quot;1&quot;&#125;&apos;</span><br><span class="line">    socket.send(msg); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h2><ul>
<li>开启后端代码 python server.py</li>
<li>打开浏览器，访问html文件，分别打开client1.html和client2.html</li>
<li>相互发信</li>
</ul>
<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><ul>
<li>clent1<br><img src="https://yunsonbai.github.io/images/push/c1.jpg" alt="Catch8D7B"></li>
<li>clent2<br><img src="https://yunsonbai.github.io/images/push/c2.jpg" alt="Catch8D7B"></li>
</ul>
<h2 id="还需要优化的地方"><a href="#还需要优化的地方" class="headerlink" title="还需要优化的地方"></a>还需要优化的地方</h2><ul>
<li>添加鉴权<ul>
<li>header中添加token</li>
<li>或者通过参数等等</li>
</ul>
</li>
<li>添加nginx代理, 网上有很多说明，记得以下几个参数<ul>
<li>proxy_http_version 1.1</li>
<li>proxy_set_header Upgrade $http_upgrade</li>
<li>proxy_set_header Connection “upgrade”    </li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
            <tag> websocket </tag>
            
            <tag> 聊天demo </tag>
            
            <tag> chat demo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[apns2 based on http2]]></title>
      <url>http://yunsonbai.github.io/2016/10/20/apns2/</url>
      <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">最近项目中需要用到apns，做了一下apns的功课，旧APNs有点反人类，而基于 HTTP/2 的</span><br><span class="line">全新APNs 协议则有巨大的优势，于是自己封装了一个基于http2协议的apns。</span><br><span class="line">欢迎大家提出修改意见。</span><br></pre></td></tr></table></figure>
<h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://github.com/yunsonbai/apns2" target="_blank" rel="noopener">apns2</a></p>
<a id="more"></a>
<h2 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h2><ul>
<li>应用：iso消息推送</li>
<li>版本：0.2</li>
<li>主要功能和特点:<ul>
<li>基于http2</li>
<li>支持批量发送</li>
</ul>
</li>
<li>安装<ul>
<li>git clone <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:yunsonbai/apns2.git</li>
<li>python setup.py install</li>
</ul>
</li>
</ul>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> apns2.client <span class="keyword">import</span> APNsClient</span><br><span class="line"><span class="keyword">from</span> apns2.payload <span class="keyword">import</span> Payload</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">()</span>:</span></span><br><span class="line">    token_hexs = [</span><br><span class="line">        <span class="string">'f9dcb885edbfcddsdaf64960bed56b19c362b3c617565126b085af2c8829467a'</span>,</span><br><span class="line">        <span class="string">'9dc9662fa9dsd390fc6b3d3ec637a764867241f516d847b54d24ce7e37963b6e'</span>,</span><br><span class="line">        <span class="string">'d52c31a293aa79c61222626b0d025866ssssa4d0c79a2b2bf729cd48c61f14a2'</span>,</span><br><span class="line">        <span class="string">'8c51ed081211d19d90f4b34b403c39f5ceeeeec368cfd9277812a7af778fbf5f'</span>,</span><br><span class="line">        <span class="string">'3df3c6bc4a98c38d5d13cbb932f4969f5f0efhhha8e4cd32270777f273dc0e41'</span>,</span><br><span class="line">        <span class="string">'a25fbf0b5f84632406f33a78398138c87d13iiiiiiiiiiic466c11be9de22011'</span>,</span><br><span class="line">        <span class="string">'3df3c6bc4a98c38d5d13cbb932f4969f5f0efyyyy8e4cd32270777f273dc0e41'</span>,</span><br><span class="line">        <span class="string">'aef8a3d0b6d38807ad8ab485665d36edc305a9793jjj269214bcd3357f60e07a'</span>]</span><br><span class="line">    print(len(token_hexs))</span><br><span class="line">    payload = Payload(alert=<span class="string">"Hello World!"</span>, sound=<span class="string">"default"</span>)</span><br><span class="line">    <span class="comment"># custom = &#123;</span></span><br><span class="line">    <span class="comment">#     'custom': &#123;</span></span><br><span class="line">    <span class="comment">#         'type': 1</span></span><br><span class="line">    <span class="comment">#     &#125;</span></span><br><span class="line">    <span class="comment"># &#125;</span></span><br><span class="line">    <span class="comment"># payload = Payload(custom=custom, content_available=True)</span></span><br><span class="line">    client = APNsClient(</span><br><span class="line">        <span class="string">'Dev_Cer-key.pem'</span>,</span><br><span class="line">        <span class="comment"># 'Cer_Key.pem',</span></span><br><span class="line">        use_sandbox=<span class="literal">True</span>,</span><br><span class="line">        use_alternative_port=<span class="literal">False</span>)</span><br><span class="line">    response = client.send_notification_multiple(token_hexs, payload)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">response_handler</span><span class="params">(response)</span>:</span></span><br><span class="line">	<span class="comment"># do something: delete badtoken and so on</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    response = push()</span><br><span class="line">	response_handler(response)</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> apns </category>
            
        </categories>
        
        
        <tags>
            
            <tag> apns - http2 - python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[yuntool]]></title>
      <url>http://yunsonbai.github.io/2016/09/29/yuntool/</url>
      <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">    工作中总会遇到运营人员提出统计某个指标的需求，诸如需要绘图并邮件发送等需求，工作之余总结了一个工具包，包括</span><br><span class="line">数据库查询（就像使用django那样快速方便的查询）， 图表绘制，邮件发送，其他功能还在持续更新中。这些是我工作遇到</span><br><span class="line">的，有觉得不合适的地方欢迎提出修改意见。</span><br></pre></td></tr></table></figure>
<h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://github.com/yunsonbai/yuntool" target="_blank" rel="noopener">yuntool</a></p>
<a id="more"></a>
<h2 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h2><ul>
<li>应用：运营数据统计；快熟查询数据库异常数据；快速数据进行增删改查</li>
<li>版本：0.4</li>
<li>安装：<ul>
<li>git clone <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:yunsonbai/yuntool.git</li>
<li>python setup.py install</li>
</ul>
</li>
<li>主要功能和特点:<ul>
<li>采用orm方式操作数据库</li>
<li>支持画图<ul>
<li>曲线图</li>
<li>柱形图</li>
</ul>
</li>
<li>制表excel</li>
<li>支持邮件发送<ul>
<li>纯文字</li>
<li>图加文字</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="部分例子"><a href="#部分例子" class="headerlink" title="部分例子"></a>部分例子</h2><h3 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> yuntool.db.field <span class="keyword">import</span> CharField</span><br><span class="line"><span class="keyword">from</span> yuntool.db.models <span class="keyword">import</span> Model</span><br><span class="line"><span class="keyword">from</span> yuntool.chart.sheet <span class="keyword">import</span> create_sheet</span><br><span class="line"><span class="keyword">from</span> yuntool.chart.plot <span class="keyword">import</span> draw_curve, draw_bar</span><br><span class="line"><span class="keyword">from</span> yuntool.email.smtp <span class="keyword">import</span> send_mail</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_get_orm</span><span class="params">()</span>:</span></span><br><span class="line">    select_term = &#123;</span><br><span class="line">        <span class="string">'label__une'</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment"># 'type__eq': 100,</span></span><br><span class="line">        <span class="comment"># 'send_time__gte': '2015-09-25 00:00:00',</span></span><br><span class="line">        <span class="comment"># 'send_time__gte': send_time_gte + ' 00:00:00',</span></span><br><span class="line">        <span class="comment"># 'send_time__lte': send_time_gte + ' 23:59:59'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># print '---------------&#123;0&#125;-------------------'.format(send_time_gte)</span></span><br><span class="line">    queryset = TestOrm.objects.filter(**select_term)</span><br><span class="line">    count = queryset.count()</span><br><span class="line">    res = queryset.data()</span><br><span class="line">    print(count)</span><br><span class="line">    data = []</span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> res:</span><br><span class="line">        <span class="comment"># only print the fields that are defined in TestOrm</span></span><br><span class="line">        data.append([r.title, r.label])</span><br><span class="line">        print(r.title)</span><br><span class="line">    print(<span class="string">'----------------------'</span>)</span><br><span class="line">    res_limit = queryset.limit(<span class="number">1</span>, <span class="number">2</span>).data()</span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> res_limit:</span><br><span class="line">        <span class="comment"># only print the fields that are defined in TestOrm</span></span><br><span class="line">        print(r.title)</span><br><span class="line">    <span class="comment"># ---------------------</span></span><br><span class="line">    print(<span class="string">'------------------'</span>)</span><br><span class="line">    res = TestOrm.objects.filter(label=<span class="number">1</span>, title=<span class="string">'test10'</span>).data()</span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> res:</span><br><span class="line">        <span class="comment"># only print the fields that are defined in TestOrm</span></span><br><span class="line">        data.append([r.title, r.label])</span><br><span class="line">        print(r.title)</span><br><span class="line"></span><br><span class="line">    title = <span class="string">'test_sheet'</span></span><br><span class="line">    hearder_list = [<span class="string">'title'</span>, <span class="string">'label'</span>]</span><br><span class="line">    f = create_sheet(title, hearder_list, data)</span><br><span class="line">    new_f = open(<span class="string">'text.xlsx'</span>, <span class="string">'wb'</span>)</span><br><span class="line">    new_f.write(f.read())</span><br><span class="line">    new_f.close()</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure>
<h3 id="数据更新"><a href="#数据更新" class="headerlink" title="数据更新"></a>数据更新</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_update_orm</span><span class="params">()</span>:</span></span><br><span class="line">    update_data = &#123;</span><br><span class="line">        <span class="string">'title'</span>: <span class="string">'hello yunsonbai'</span>,</span><br><span class="line">        <span class="string">'label'</span>: <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">    res = TestOrm.objects.filter(id__in=[<span class="number">1</span>, <span class="number">2</span>]).data()</span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> res:</span><br><span class="line">        r.update(**update_data)</span><br><span class="line">    <span class="comment"># or</span></span><br><span class="line">    res = TestOrm.objects.filter(id=<span class="number">3</span>).first().data()</span><br><span class="line">    res.update(**update_data)</span><br></pre></td></tr></table></figure>
<h3 id="绘图"><a href="#绘图" class="headerlink" title="绘图"></a>绘图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_bar</span><span class="params">()</span>:</span></span><br><span class="line">    x = [</span><br><span class="line">        [<span class="string">'2016-06-28'</span>, <span class="string">'2016-06-29'</span>, <span class="string">'2016-06-30'</span>,</span><br><span class="line">         <span class="string">'2016-07-01'</span>, <span class="string">'2016-07-02'</span>, <span class="string">'2016-07-03'</span>, <span class="string">'2016-07-04'</span></span><br><span class="line">         ],</span><br><span class="line">        [<span class="string">'2016-06-28'</span>, <span class="string">'2016-06-29'</span>, <span class="string">'2016-06-30'</span>, <span class="string">'2016-07-01'</span>,</span><br><span class="line">         <span class="string">'2016-07-02'</span>, <span class="string">'2016-07-03'</span>, <span class="string">'2016-07-04'</span>]]</span><br><span class="line">    y = [</span><br><span class="line">        [<span class="number">270</span>, <span class="number">279</span>, <span class="number">288</span>, <span class="number">273</span>, <span class="number">248</span>, <span class="number">232</span>, <span class="number">293</span>],</span><br><span class="line">        [<span class="number">2482</span>, <span class="number">1890</span>, <span class="number">2359</span>, <span class="number">7506</span>, <span class="number">14561</span>, <span class="number">14741</span>, <span class="number">16191</span>]]</span><br><span class="line">    picture = draw_bar(</span><br><span class="line">        x, y, xlabel=[<span class="string">'date'</span>, <span class="string">'date'</span>], ylabel=[<span class="string">'num'</span>, <span class="string">'num1'</span>], merge=<span class="literal">True</span>)</span><br><span class="line">    new_f = open(<span class="string">'text_merge.png'</span>, <span class="string">'wb'</span>)</span><br><span class="line">    new_f.write(picture.read())</span><br><span class="line">    new_f.close()</span><br><span class="line">    picture.seek(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> picture</span><br></pre></td></tr></table></figure>
<h4 id="图片展示"><a href="#图片展示" class="headerlink" title="图片展示"></a>图片展示</h4><ul>
<li>柱形图<img src="https://yunsonbai.github.io/images/yuntool/text.png"></li>
<li>条形图<img src="https://yunsonbai.github.io/images/yuntool/text_curve.png">
</li>
</ul>
<h3 id="邮件发送"><a href="#邮件发送" class="headerlink" title="邮件发送"></a>邮件发送</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_email</span><span class="params">(picture)</span>:</span></span><br><span class="line">    <span class="comment"># test email</span></span><br><span class="line">    from_user = <span class="string">'yunsonbai@sohu.com'</span></span><br><span class="line">    from_user_passwd = <span class="string">'xxxxxx'</span></span><br><span class="line">    mail_server = <span class="string">'192.168.95.xx'</span></span><br><span class="line">    mail_server_port = <span class="string">'xx'</span></span><br><span class="line">    to_users = [<span class="string">'1942893504@qq.com'</span>]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        subject = <span class="string">'关于test'</span>.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        subject = <span class="string">'关于test'</span></span><br><span class="line">    content = <span class="string">'请回复'</span></span><br><span class="line">    send_mail(</span><br><span class="line">        from_user, from_user_passwd, to_users,</span><br><span class="line">        subject, content, mail_server,</span><br><span class="line">        mail_server_port=mail_server_port,</span><br><span class="line">        picture=picture.getvalue())</span><br><span class="line">    picture.close()</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 运营工具包 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 日常运营工具包 </tag>
            
            <tag> orm </tag>
            
            <tag> 绘图 </tag>
            
            <tag> 邮件发送 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[nginx图片鉴权]]></title>
      <url>http://yunsonbai.github.io/2016/08/09/nginx%E5%9B%BE%E7%89%87%E9%89%B4%E6%9D%83/</url>
      <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   在开发过程中总离不开用户系统，有了用户系统就免不了有些资源需要和用户关联上,</span><br><span class="line">所以就无法避免的有了需要资源私有化的问题，比如某张图片或某个字体只能允许所</span><br><span class="line">有者才能访问，该怎么做鉴权防止其他用户访问，昨天试了一下nginx的internal</span><br><span class="line">相信应该能满足这样的需求。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">隐藏图片的原地址，并能实现鉴权只有拥有者才能访问。</span><br></pre></td></tr></table></figure>
<h2 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">系统：ubuntu</span><br><span class="line">app：django</span><br><span class="line">web：nginx</span><br></pre></td></tr></table></figure>
<h2 id="流程说明"><a href="#流程说明" class="headerlink" title="流程说明"></a>流程说明</h2><p><img src="/images/nginx/nginx_django图片鉴权.png" alt="Catch8D7B"></p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="nginx设置"><a href="#nginx设置" class="headerlink" title="nginx设置"></a>nginx设置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">       listen 80;</span><br><span class="line">       server_name www.example.com;</span><br><span class="line">       client_max_body_size 150m;</span><br><span class="line">       access_log /home/baisong/project/yunsonbai/<span class="built_in">log</span>/nginx/test.log main;</span><br><span class="line">       error_log /home/baisong/project/yunsonbai/<span class="built_in">log</span>/nginx/test_error.log;</span><br><span class="line">       location / &#123;</span><br><span class="line">           proxy_pass    http://127.0.0.1:8000/;</span><br><span class="line">       &#125;</span><br><span class="line">       location /private/ &#123;</span><br><span class="line">           internal;</span><br><span class="line">           <span class="comment"># http://www.yunsonbai.top/images/avtar.jpg</span></span><br><span class="line">           proxy_pass    http://www.yunsonbai.top/;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h3 id="hosts配置"><a href="#hosts配置" class="headerlink" title="hosts配置"></a>hosts配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">怎么配置就不说了，配置这项就是为了测试方便</span><br></pre></td></tr></table></figure>
<h3 id="django程序-views-py"><a href="#django程序-views-py" class="headerlink" title="django程序(views.py)"></a>django程序(views.py)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Test(APIView):</span><br><span class="line"></span><br><span class="line">   <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">   test</span></span><br><span class="line"><span class="string">   '</span><span class="string">''</span></span><br><span class="line"></span><br><span class="line">   def get(self, request):</span><br><span class="line">       user_id = request.query_params.get(<span class="string">'user_id'</span>, None)</span><br><span class="line">       <span class="keyword">if</span> user_auth(user_id):</span><br><span class="line">		<span class="comment"># 这里写相对路径</span></span><br><span class="line">           url = <span class="string">'/private/images/avtar.jpg'</span></span><br><span class="line">           response = HttpResponse()</span><br><span class="line">           response[<span class="string">'Content-Type'</span>] = <span class="string">""</span></span><br><span class="line">           response[<span class="string">'X-Accel-Redirect'</span>] = url</span><br><span class="line">           <span class="built_in">return</span> response</span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">           <span class="built_in">return</span> HttpResponseForbidden()</span><br></pre></td></tr></table></figure>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><h3 id="用户合法"><a href="#用户合法" class="headerlink" title="用户合法"></a>用户合法</h3><p><img src="/images/nginx/合法.jpg" alt="Catch8D7B"><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可以看到隐藏了真正的资源链接</span><br></pre></td></tr></table></figure></p>
<h3 id="用户不合法"><a href="#用户不合法" class="headerlink" title="用户不合法"></a>用户不合法</h3><p><img src="/images/nginx/不合法.jpg" alt="Catch8D7B"><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可以看到直接返回403,并没有暴露资源地址</span><br></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">该方法适用除了图片私有化其他资源也可以采用，例如表情等，当然不是唯一办法，文章有不</span><br><span class="line">合适的地方可以一起讨论。</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> nginx </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nginx - nginx图片鉴权 - nginx静态资源鉴权 - internal - nginx django internal </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[rest_framework父表查子表]]></title>
      <url>http://yunsonbai.github.io/2016/07/26/rest-framework%E7%88%B6%E8%A1%A8%E6%9F%A5%E5%AD%90%E8%A1%A8/</url>
      <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">表A的外键是B表，想在django接口中查询B表把A表的信息携带出来，</span><br><span class="line">rest_framework可以分方便的实现,另外django配合上rest_framework，</span><br><span class="line">编写API将是你如鱼得水，写起来非常方便。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">显示对应Duoshuod的评论的user_id和评论内容, 统计评论总数</span><br></pre></td></tr></table></figure>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="model设计"><a href="#model设计" class="headerlink" title="model设计"></a>model设计</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Duoshuo(models.Model):</span><br><span class="line">    create_time = models.DateTimeField(auto_now_add=True)</span><br><span class="line">    text = models.CharField(max_length=128)</span><br><span class="line"></span><br><span class="line">    def __unicode__(self):</span><br><span class="line">        <span class="built_in">return</span> str(self.id)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class DuoshuoComment(models.Model):</span><br><span class="line">    feed = models.ForeignKey(Duoshuo, related_name=<span class="string">'comment_duoshuo'</span>)</span><br><span class="line">    user_id = models.CharField(max_length=255)</span><br><span class="line">    content = models.CharField(max_length=255)</span><br><span class="line"></span><br><span class="line">    def __unicode__(self):</span><br><span class="line">        <span class="built_in">return</span> self.content</span><br></pre></td></tr></table></figure>
<h3 id="serializers-py"><a href="#serializers-py" class="headerlink" title="serializers.py"></a>serializers.py</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line">from app.modele import Duoshuo, DuoshuoComment</span><br><span class="line"></span><br><span class="line">class FeedSerializer(serializers.ModelSerializer):</span><br><span class="line"></span><br><span class="line">    duoshuo_comment = serializers.PrimaryKeyRelatedField(<span class="string">'</span></span><br><span class="line"><span class="string">                    source='</span>comment_duoshuo<span class="string">',</span></span><br><span class="line"><span class="string">                    many=True,</span></span><br><span class="line"><span class="string">                    read_only=True)</span></span><br><span class="line"><span class="string">    comment_num = serializers.SerializerMethodField(</span></span><br><span class="line"><span class="string">                    '</span>comment_total<span class="string">')</span></span><br><span class="line"><span class="string">    class Meta:</span></span><br><span class="line"><span class="string">        model = Duoshuo</span></span><br><span class="line"><span class="string">        fields = ('</span>id<span class="string">', '</span>duoshuo_comment<span class="string">', '</span>comment_num<span class="string">')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def comment_total(self, obj):</span></span><br><span class="line"><span class="string">         total = DuoshuoComment.objects.filter(feed=obj).count()</span></span><br><span class="line"><span class="string">        return total</span></span><br></pre></td></tr></table></figure>
<h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在serializers.py还可以写相关的函数来整理查询后的结果，可查看官网。</span><br><span class="line">rest_framework在协助django编写api方面非常方便，有兴趣的可以在官方查询</span><br><span class="line">如何在django中使用rest_framework。</span><br></pre></td></tr></table></figure>
<p><a href="http://www.django-rest-framework.org/" target="_blank" rel="noopener">rest_framework官网</a></p>
]]></content>
      
        <categories>
            
            <category> django </category>
            
        </categories>
        
        
        <tags>
            
            <tag> rest_framework </tag>
            
            <tag> relation </tag>
            
            <tag> 父表查子表 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[django中使用celery]]></title>
      <url>http://yunsonbai.github.io/2016/07/18/django%E4%BD%BF%E7%94%A8celery/</url>
      <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">前段时间分享了一篇在django中使用djcelery来完成异步任务，使用的小伙伴会发现djcelery会在mysql创建很多表，</span><br><span class="line">如果你不使用mysql作为BROKER的话,数据显得很脏，另外如果你用了mysql作为BROKER又会带来性能问题，毕竟数据库</span><br><span class="line">的读写速度不如缓存。接下来就分享一下如何在django中不使用djcelery，而是纯粹的使用celery来实现异步任务。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="先看一下目录结构"><a href="#先看一下目录结构" class="headerlink" title="先看一下目录结构"></a>先看一下目录结构</h2><img src="https://yunsonbai.github.io/images/celery/celery_django.png">
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注意看celery.py 和tasks.py两个文件，这个是celery官方给出的例子</span><br></pre></td></tr></table></figure>
<h2 id="代码示例及启动"><a href="#代码示例及启动" class="headerlink" title="代码示例及启动"></a>代码示例及启动</h2><h3 id="celery-py"><a href="#celery-py" class="headerlink" title="celery.py"></a>celery.py</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">from __future__ import absolute_import</span><br><span class="line">   import os</span><br><span class="line"></span><br><span class="line">   from celery import Celery</span><br><span class="line"></span><br><span class="line">   <span class="comment"># set the default Django settings module for the 'celery' program.</span></span><br><span class="line">   os.environ.setdefault(<span class="string">'DJANGO_SETTINGS_MODULE'</span>, <span class="string">'proj.settings'</span>)</span><br><span class="line"></span><br><span class="line">   from django.conf import settings  <span class="comment"># noqa</span></span><br><span class="line"></span><br><span class="line">   app = Celery(<span class="string">'proj'</span>)</span><br><span class="line"></span><br><span class="line">   <span class="comment"># Using a string here means the worker will not have to</span></span><br><span class="line">   <span class="comment"># pickle the object when using Windows.</span></span><br><span class="line">   app.config_from_object(<span class="string">'django.conf:settings'</span>)</span><br><span class="line">   app.autodiscover_tasks(lambda: settings.INSTALLED_APPS)</span><br><span class="line"></span><br><span class="line">   @app.task(<span class="built_in">bind</span>=True)</span><br><span class="line">   def debug_task(self):</span><br><span class="line">       <span class="built_in">print</span>(<span class="string">'Request: &#123;0!r&#125;'</span>.format(self.request))</span><br></pre></td></tr></table></figure>
<h3 id="init-py"><a href="#init-py" class="headerlink" title="init.py"></a><strong>init</strong>.py</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在与celery.py同级的__init__.py文件中加入(这也都是官方给出的)</span><br><span class="line">   	from __future__ import absolute_import</span><br><span class="line">       <span class="comment"># This will make sure the app is always imported when</span></span><br><span class="line">       <span class="comment"># Django starts so that shared_task will use this app.</span></span><br><span class="line">       from .celery import app as celery_app  <span class="comment"># noqa</span></span><br></pre></td></tr></table></figure>
<h3 id="tasks-py"><a href="#tasks-py" class="headerlink" title="tasks.py"></a>tasks.py</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">（这是自己造的）</span><br><span class="line">from __future__ import absolute_import</span><br><span class="line">   from proj import celery_app</span><br><span class="line">   import time</span><br><span class="line"></span><br><span class="line">   @celery_app.task(<span class="built_in">bind</span>=True)</span><br><span class="line">   def mul(*args, **kwargs):</span><br><span class="line">       f = open(<span class="string">'/home/baisong/a.txt'</span>, <span class="string">'a+'</span>)</span><br><span class="line">       f.write(str(time.time()))</span><br><span class="line">       f.write(<span class="string">'/n'</span>)</span><br><span class="line">       f.close()</span><br></pre></td></tr></table></figure>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">beat:</span><br><span class="line">   	celery -A proj beat -l info</span><br><span class="line">   worker:</span><br><span class="line">   	celery -A proj worker -l info</span><br></pre></td></tr></table></figure>
<h2 id="提问"><a href="#提问" class="headerlink" title="提问"></a>提问</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">前边几乎全是官方给出的，下边是有些人会遇到的，多配置文件怎么</span><br><span class="line">   办， 可以看看下边的目录结构</span><br></pre></td></tr></table></figure>
<img src="https://yunsonbai.github.io/images/celery/moresettings.jpg">
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><h3 id="重写celery-py"><a href="#重写celery-py" class="headerlink" title="重写celery.py"></a>重写celery.py</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">from __future__ import absolute_import</span><br><span class="line">   import os</span><br><span class="line">   from celery import Celery</span><br><span class="line">   import sys</span><br><span class="line">   from django.conf import settings</span><br><span class="line">   app_name = <span class="string">'proj'</span></span><br><span class="line">   defauke_config = <span class="string">'proj.settings'</span></span><br><span class="line">   try:</span><br><span class="line">       defauke_config = sys.argv[-1].split(<span class="string">'--config='</span>)[1]</span><br><span class="line">   except:</span><br><span class="line">       pass</span><br><span class="line">   <span class="comment"># set the default Django settings module for the 'celery' program.</span></span><br><span class="line">   os.environ.setdefault(<span class="string">'DJANGO_SETTINGS_MODULE'</span>, str(defauke_config))</span><br><span class="line"></span><br><span class="line">   app = Celery(app_name)</span><br><span class="line"></span><br><span class="line">   <span class="comment"># Using a string here means the worker will not have to</span></span><br><span class="line">   <span class="comment"># pickle the object when using Windows.</span></span><br><span class="line">   app.config_from_object(<span class="string">'django.conf:settings'</span>)</span><br><span class="line">   app.autodiscover_tasks(lambda: settings.INSTALLED_APPS)</span><br></pre></td></tr></table></figure>
<h3 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">celery -A proj beat -l info --config=proj.settings.settings1</span><br><span class="line">   celery -A proj worker -l info --config=proj.settings.settings1</span><br></pre></td></tr></table></figure>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://www.yunsonbai.top/2016/07/12/celery/" target="_blank" rel="noopener">celery 异步任务</a></p>
]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> django celery - 异步任务 - 在django中只使用celery - django中不使用djcelery只使用celery - celery多配置 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[celery 异步任务]]></title>
      <url>http://yunsonbai.github.io/2016/07/12/celery/</url>
      <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在开发的过程中，总会遇到异步完成某个操作的需求，选择会很多，说一下在python编程过程中如何实现异步任务，让你优雅的完成</span><br><span class="line">任务，优化自己的应用。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="初始celery"><a href="#初始celery" class="headerlink" title="初始celery"></a>初始celery</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">任务调度利器,是基于Python开发的分布式任务队列。它支持使用任务队列的方式在分布的机器／进程／线程上执行任务调度。</span><br></pre></td></tr></table></figure>
<h2 id="单独使用celery"><a href="#单独使用celery" class="headerlink" title="单独使用celery"></a>单独使用celery</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">定时往文件中写入和在程序中异步添加任务往文件中写入</span><br></pre></td></tr></table></figure>
<h3 id="编写tasks"><a href="#编写tasks" class="headerlink" title="编写tasks"></a>编写tasks</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line">   from celery import Celery</span><br><span class="line"></span><br><span class="line">   celery = Celery(<span class="string">'tasks'</span>, broker=<span class="string">'redis://localhost:6379/0'</span>)</span><br><span class="line"></span><br><span class="line">   @celery.task</span><br><span class="line">   def <span class="built_in">test</span>(sss):</span><br><span class="line">       f = open(<span class="string">'/yunsonbai/apps/asyn_task/celery/a.txt'</span>,<span class="string">'a+'</span>)</span><br><span class="line">       f.write(sss)</span><br><span class="line">       f.close()</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">       sendmail(<span class="string">'bas'</span>)</span><br></pre></td></tr></table></figure>
<h3 id="celeryconfig配置文件"><a href="#celeryconfig配置文件" class="headerlink" title="celeryconfig配置文件"></a>celeryconfig配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">这个比较重要，关系到启动</span><br><span class="line">   from datetime import timedelta</span><br><span class="line"></span><br><span class="line">   BROKER_URL = <span class="string">'redis://127.0.0.1:6379/0'</span></span><br><span class="line">   CELERY_RESULT_BACKEND = <span class="string">'redis://127.0.0.1:6379/1'</span></span><br><span class="line"></span><br><span class="line">   CELERY_TASK_SERIALIZER = <span class="string">'json'</span></span><br><span class="line">   CELERY_RESULT_SERIALIZER = <span class="string">'json'</span></span><br><span class="line">   CELERY_ENABLE_UTC = False</span><br><span class="line">   CELERY_TIMEZONE = <span class="string">'Asia/Shanghai'</span></span><br><span class="line">   CELERY_IMPORTS = (<span class="string">"tasks"</span>,)</span><br><span class="line">   <span class="comment"># 定时执行</span></span><br><span class="line">   <span class="comment"># CELERYBEAT_SCHEDULE = &#123;</span></span><br><span class="line">   <span class="comment">#     'runs-every-30-seconds': &#123;</span></span><br><span class="line">   <span class="comment">#         'task': 'tasks.sendmail',</span></span><br><span class="line">   <span class="comment">#         'schedule': timedelta(seconds=30),</span></span><br><span class="line">   <span class="comment">#         'args': ('baisong',),</span></span><br><span class="line">   <span class="comment">#     &#125;,</span></span><br><span class="line">   <span class="comment"># &#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="note"><a href="#note" class="headerlink" title="note"></a>note</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如果使用redis，建议使用CELERY_QUEUES和CELERY_ROUTES两个配置项，可以让你使不用应用的任务区分开，不然如果用同一个</span><br><span class="line">   redis库存储BROKER，多个worker之间会发生干扰。另外就是让tasks和celeryconfig在同一个目录下。</span><br></pre></td></tr></table></figure>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">celery worker --loglevel=debug --config=celeryconfig  负责执行任务</span><br><span class="line">   celery beat --loglevel=info --config=celeryconfig 负责添加任务（针对定时任务，如果没有可以不启动）</span><br></pre></td></tr></table></figure>
<h3 id="如何在程序中添加任务"><a href="#如何在程序中添加任务" class="headerlink" title="如何在程序中添加任务"></a>如何在程序中添加任务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from tasks import <span class="built_in">test</span></span><br><span class="line">   result = sendmail.apply_async(args =(<span class="string">'yusonbaio'</span>,))</span><br><span class="line">   <span class="comment"># print result</span></span><br></pre></td></tr></table></figure>
<h2 id="在django中使用celery"><a href="#在django中使用celery" class="headerlink" title="在django中使用celery"></a>在django中使用celery</h2><h3 id="需求-1"><a href="#需求-1" class="headerlink" title="需求"></a>需求</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">同上</span><br></pre></td></tr></table></figure>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">能方便的调用model、settings等，方便数据库操作。</span><br></pre></td></tr></table></figure>
<h3 id="tasks"><a href="#tasks" class="headerlink" title="tasks"></a>tasks</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line">   from celery import app</span><br><span class="line"></span><br><span class="line">   @app.task</span><br><span class="line">   def <span class="built_in">test</span>(sss):</span><br><span class="line">       f = open(<span class="string">'/yunsonbai/apps/asyn_task/celery/a.txt'</span>,<span class="string">'a+'</span>)</span><br><span class="line">       f.write(sss)</span><br><span class="line">       f.close()</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">       <span class="built_in">test</span>(<span class="string">'bas'</span>)</span><br></pre></td></tr></table></figure>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">把上边的配置文件复制到settings中，同时在INSTALLED_APPS加入djcelery，记</span><br><span class="line">   得安装djcelery</span><br></pre></td></tr></table></figure>
<h3 id="添加celety-py文件"><a href="#添加celety-py文件" class="headerlink" title="添加celety.py文件"></a>添加celety.py文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">在与app同级目录下添加celety.py文件，如下：</span><br><span class="line">   	from __future__ import absolute_import</span><br><span class="line">       import os</span><br><span class="line">       from celery import Celery</span><br><span class="line">       from django.conf import settings</span><br><span class="line"></span><br><span class="line">       os.environ.setdefault(<span class="string">'DJANGO_SETTINGS_MODULE'</span>, <span class="string">'app.settings'</span>)</span><br><span class="line">       app = Celery(<span class="string">'app'</span>)</span><br><span class="line"></span><br><span class="line">       app.config_from_object(<span class="string">'django.conf:settings'</span>)</span><br><span class="line">       app.autodiscover_tasks(lambda: settings.INSTALLED_APPS)</span><br></pre></td></tr></table></figure>
<h3 id="程序中调用"><a href="#程序中调用" class="headerlink" title="程序中调用"></a>程序中调用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">同上</span><br></pre></td></tr></table></figure>
<h3 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py celery worker --loglevel=info</span><br><span class="line">   python manage.py celery beat --loglevel=info</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> celery - celery实现异步任务 - python 异步任务 - djcelery - djcelery 异步任务 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[rest_framework.authtoken 定制]]></title>
      <url>http://yunsonbai.github.io/2016/07/11/rest_framework_authtoken%E5%AE%9A%E5%88%B6/</url>
      <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">前段时间研究了一下rest_framework.authtoken，它可以实现对用户的token鉴权除了可以使用默认的配置以外，可以</span><br><span class="line">实现定制。想快速实现一套用户系统的可以看看</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="为什么要使用"><a href="#为什么要使用" class="headerlink" title="为什么要使用"></a>为什么要使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">如果你急于实现一套用户系统，考虑到完全自己开发所花的时间成本（有可能费劲开发完了并不适用），不妨试试稍加改动</span><br><span class="line">django自带的用户系统为自己所用，django自带的用户系统还是比较完备的，而且还有丰富的第三方库。如果想用token</span><br><span class="line">鉴权该怎么办呢，这时候rest_framework.authtoken就用上派场了，rest_framework.authtoken用起来十分简单。</span><br></pre></td></tr></table></figure>
<h2 id="在django中使用"><a href="#在django中使用" class="headerlink" title="在django中使用"></a>在django中使用</h2><h3 id="添加app"><a href="#添加app" class="headerlink" title="添加app"></a>添加app</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">在INSTALLED_APPS中加入rest_framework.authtoken即可</span><br><span class="line">   INSTALLED_APPS = (</span><br><span class="line">       <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">       <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">       <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">       <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">       <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">       <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">       <span class="string">'rest_framework'</span>,</span><br><span class="line">       <span class="string">'rest_framework.authtoken'</span>,</span><br><span class="line">   )</span><br></pre></td></tr></table></figure>
<h3 id="view中使用"><a href="#view中使用" class="headerlink" title="view中使用"></a>view中使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">authentication_classes = (BasicAuthentication, TokenAuthentication)</span><br><span class="line">   permission_classes = (AllowAny,)</span><br></pre></td></tr></table></figure>
<p><a href="http://www.django-rest-framework.org/api-guide/authentication/#tokenauthentication" target="_blank" rel="noopener">rest_framework</a></p>
<h2 id="定制返回码"><a href="#定制返回码" class="headerlink" title="定制返回码"></a>定制返回码</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">settings中添加：</span><br><span class="line">	 REST_FRAMEWORK = &#123;</span><br><span class="line">           <span class="string">'EXCEPTION_HANDLER'</span>: <span class="string">'ink_user.utils.rest_framework_views.exception_handler'</span>,</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<h3 id="rest-framework-views-py"><a href="#rest-framework-views-py" class="headerlink" title="rest_framework_views.py"></a>rest_framework_views.py</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line">   from __future__ import unicode_literals</span><br><span class="line"></span><br><span class="line">   from django.core.exceptions import PermissionDenied</span><br><span class="line">   from django.http import Http404</span><br><span class="line">   from django.utils import six</span><br><span class="line">   from django.utils.translation import ugettext_lazy as _</span><br><span class="line"></span><br><span class="line">   from rest_framework import exceptions, status</span><br><span class="line">   from rest_framework.compat import set_rollback</span><br><span class="line">   from rest_framework.response import Response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   def exception_handler(exc, context):</span><br><span class="line">       <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">       Returns the response that should be used for any given exception.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       By default we handle the REST framework `APIException`, and also</span></span><br><span class="line"><span class="string">       Django's built-in `Http404` and `PermissionDenied` exceptions.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       Any unhandled exceptions may return `None`, which will cause a 500 error</span></span><br><span class="line"><span class="string">       to be raised.</span></span><br><span class="line"><span class="string">       "</span><span class="string">""</span></span><br><span class="line">       <span class="keyword">if</span> isinstance(exc, exceptions.APIException):</span><br><span class="line">           headers = &#123;&#125;</span><br><span class="line">           <span class="keyword">if</span> getattr(exc, <span class="string">'auth_header'</span>, None):</span><br><span class="line">               headers[<span class="string">'WWW-Authenticate'</span>] = exc.auth_header</span><br><span class="line">           <span class="keyword">if</span> getattr(exc, <span class="string">'wait'</span>, None):</span><br><span class="line">               headers[<span class="string">'Retry-After'</span>] = <span class="string">'%d'</span> % exc.wait</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> isinstance(exc.detail, (list, dict)):</span><br><span class="line">               data = exc.detail</span><br><span class="line">           <span class="keyword">else</span>:</span><br><span class="line">               data = &#123;<span class="string">'detail'</span>: exc.detail&#125;</span><br><span class="line">               <span class="comment"># if exc.detail == 'Invalid token.':</span></span><br><span class="line">               <span class="keyword">if</span> exc.status_code == 401:</span><br><span class="line">                   data = &#123;<span class="string">'status'</span>: 401.1, <span class="string">'msg'</span>: exc.detail&#125;</span><br><span class="line">           set_rollback()</span><br><span class="line">           <span class="built_in">return</span> Response(data)</span><br><span class="line">           <span class="comment"># return Response(data, status=exc.status_code, headers=headers)</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">elif</span> isinstance(exc, Http404):</span><br><span class="line">           msg = _(<span class="string">'Not found.'</span>)</span><br><span class="line">           data = &#123;<span class="string">'detail'</span>: six.text_type(msg)&#125;</span><br><span class="line"></span><br><span class="line">           set_rollback()</span><br><span class="line">           <span class="built_in">return</span> Response(data, status=status.HTTP_404_NOT_FOUND)</span><br><span class="line"></span><br><span class="line">       <span class="keyword">elif</span> isinstance(exc, PermissionDenied):</span><br><span class="line">           msg = _(<span class="string">'Permission denied.'</span>)</span><br><span class="line">           data = &#123;<span class="string">'detail'</span>: six.text_type(msg)&#125;</span><br><span class="line"></span><br><span class="line">           set_rollback()</span><br><span class="line">           <span class="built_in">return</span> Response(data, status=status.HTTP_403_FORBIDDEN)</span><br><span class="line"></span><br><span class="line">       <span class="comment"># Note: Unhandled exceptions will raise a 500 error.</span></span><br><span class="line">       <span class="built_in">return</span> None</span><br></pre></td></tr></table></figure>
<h2 id="note"><a href="#note" class="headerlink" title="note"></a>note</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">重点在于：</span><br><span class="line">   	settings中的配置；</span><br><span class="line">       rest_framework_views.py 重写：</span><br><span class="line">       	<span class="keyword">if</span> exc.status_code == 401:</span><br><span class="line">               <span class="comment"># 此处定义自己的消息体</span></span><br><span class="line">               data = &#123;<span class="string">'status'</span>: 401.1, <span class="string">'msg'</span>: exc.detail&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> django </category>
            
        </categories>
        
        
        <tags>
            
            <tag> rest_framework - rest framework - authtoken - 返回码定制 - rest_framework.authtoken 定制 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[多角度监控webServer]]></title>
      <url>http://yunsonbai.github.io/2016/07/02/%E5%A4%9A%E6%96%B9%E4%BD%8D%E7%9B%91%E6%8E%A7webServer/</url>
      <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">最近趁着开发需求较少，着手整理了一段时间关于系统监控的东西，系统监控的目的就是为了快速的发现系统问题、找到问题所在、并</span><br><span class="line">解决它。下边分享一下</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="初识监控"><a href="#初识监控" class="headerlink" title="初识监控"></a>初识监控</h2><h3 id="懵懂"><a href="#懵懂" class="headerlink" title="懵懂"></a>懵懂</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">记得当初来公司的时候，师傅让我在代码关键的部位打日志，初来乍到，以为日志嘛，还按照上边的写的例子接着写得了。学习期间</span><br><span class="line">知道该方法是为了帮助排错用的，但是该怎么用，怎么打并没有好好研究过，甚至还有怀疑，既然测试人员已经测试好了还有必要再在</span><br><span class="line">业务部分加吗，这样不会降低系统的处理效率吗？</span><br></pre></td></tr></table></figure>
<h3 id="第一次使用日志"><a href="#第一次使用日志" class="headerlink" title="第一次使用日志"></a>第一次使用日志</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">好景不长，没多久就出了一个很奇怪的问题，大部分情况下系统正常，但是总有意外发生（而且是事后一段时间后才发现，因为当时</span><br><span class="line">没有加报错邮件），很是烦恼，苦恼时刻想到了曾经师傅让打的日志，开始用grep过滤这个意外的问题，很快找到了问题所在，多亏</span><br><span class="line">日志是仿照前辈打的（当时完全不知道人家为啥要那样打）。从那感受到了日志的魅力。</span><br></pre></td></tr></table></figure>
<h3 id="如何打"><a href="#如何打" class="headerlink" title="如何打"></a>如何打</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">原则，不能因为添加监控而导致服务质量大幅度下滑, 打关键点不乱打</span><br></pre></td></tr></table></figure>
<h3 id="开始谈这段时间的结果"><a href="#开始谈这段时间的结果" class="headerlink" title="开始谈这段时间的结果"></a>开始谈这段时间的结果</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">上边说的有点废话，但是对于刚毕业的学生来讲，很多人会遇到这样的情况，下边开始说说这段时间是怎么来监控我们的系统的。</span><br></pre></td></tr></table></figure>
<h2 id="报错邮件的添加"><a href="#报错邮件的添加" class="headerlink" title="报错邮件的添加"></a>报错邮件的添加</h2><h3 id="重要性"><a href="#重要性" class="headerlink" title="重要性"></a>重要性</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我们知道在稳定的系统，都有可能因为这样或那样的问题（硬件、网络等问题）导致出错，尤其是在系统中调用第三方接口的代</span><br><span class="line">码段，第三方的接口是不可控的，换句话说就是这些地方极易出现问题。所以这些地方需要有报警邮件及时通知。</span><br></pre></td></tr></table></figure>
<h3 id="添加报警模块"><a href="#添加报警模块" class="headerlink" title="添加报警模块"></a>添加报警模块</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">之前我写过一篇文章，是如何利用sentry（采用Django开发，当然有其他的可以留言讨论）来监控系统，如下是连接，sentry</span><br><span class="line">可以使全局的监控，也可以是部分代码段的监控，在部分代码段的监控上建议使用try语句监控，这样避免致服务中断，给用户不</span><br><span class="line">好的体验。</span><br></pre></td></tr></table></figure>
<p><a href="https://www.yunsonbai.top/2016/05/30/django-sentry/" target="_blank" rel="noopener">利用sentry收集django的日志</a></p>
<h2 id="Api响应时间的监控"><a href="#Api响应时间的监控" class="headerlink" title="Api响应时间的监控"></a>Api响应时间的监控</h2><h3 id="必要性"><a href="#必要性" class="headerlink" title="必要性"></a>必要性</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">关于api的响应时间监控显然很重要，如果你能实时或准实时的看到你写的接口的响应时间的话，你就会很有目的性的去优化你的</span><br><span class="line">接口，就能提供更好的服务。在调用第三方接口的地方最好也能加上监控，因为有可能你接口慢就是由于第三方的接口导致的。</span><br></pre></td></tr></table></figure>
<h3 id="准实时监控"><a href="#准实时监控" class="headerlink" title="准实时监控"></a>准实时监控</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我叫它准实时因为过一小段时间后我们才能知道结果。</span><br></pre></td></tr></table></figure>
<h4 id="利用nginx日志"><a href="#利用nginx日志" class="headerlink" title="利用nginx日志"></a>利用nginx日志</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在nginx日志中可以根据<span class="variable">$request_time</span>(全程的时间：从用户点击到所有结果返回）和<span class="variable">$upstream_response_time</span>（Nginx</span><br><span class="line">向后端建立连接开始到接受完数据然后关闭连接为止的时间），可以根据需求来利用这两个参数的值。当然你需要写一个日志分析</span><br><span class="line">脚本，这个不难。</span><br></pre></td></tr></table></figure>
<h4 id="利用diamond"><a href="#利用diamond" class="headerlink" title="利用diamond"></a>利用diamond</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">diamond是可以实现类似于定期任务的工具,可以监控系统内存、CPU使用情况等等，你可以事先写好代码片段去请求自己的接口，</span><br><span class="line">然后加到diamond的collectors中，定期执行，它能给你在单位时间内系统的监控参数。可以看一下之前的文章。</span><br></pre></td></tr></table></figure>
<p><a href="https://www.yunsonbai.top/2016/06/13/python-diamond/" target="_blank" rel="noopener">使用diamond监控系统或api</a></p>
<h3 id="实时监控"><a href="#实时监控" class="headerlink" title="实时监控"></a>实时监控</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">个人觉得最好只监控api中的关键部位，因为他将会影响api的整体</span><br><span class="line">响应时间。</span><br></pre></td></tr></table></figure>
<h4 id="利用Metrology"><a href="#利用Metrology" class="headerlink" title="利用Metrology"></a>利用Metrology</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">from metrology import Metrology</span><br><span class="line">from metrology.reporter import GraphiteReporter</span><br><span class="line"></span><br><span class="line">class ApiTimer(object):</span><br><span class="line"></span><br><span class="line">	__instance = None</span><br><span class="line"></span><br><span class="line">	def __init__(self, key, carbon_host, carbon_port):</span><br><span class="line">		self.timer = Metrology.timer(key)</span><br><span class="line">		self.carbon_host = carbon_host</span><br><span class="line">		self.carbon_port = carbon_port</span><br><span class="line"></span><br><span class="line">	def reporte(self):</span><br><span class="line">		<span class="comment"># 主要负责往传输统计结果</span></span><br><span class="line">		reporter = GraphiteReporter(self.carbon_host, self.carbon_port)</span><br><span class="line">		reporter.write()</span><br><span class="line"></span><br><span class="line">	def probe(self, func, *arg, **args):</span><br><span class="line">		<span class="comment"># 代理执行函数</span></span><br><span class="line">		st = time.time()</span><br><span class="line">		res = func(*arg, **args)</span><br><span class="line">		self.timer.update(int((time.time() - st) * 1000))</span><br><span class="line">		last_tick = self.timer.meter.last_tick.value</span><br><span class="line">		<span class="keyword">if</span> last_tick - self.timer.meter.start_time &gt; 2:</span><br><span class="line">			self.reporte()</span><br><span class="line">			self.timer.clear()</span><br><span class="line">		<span class="built_in">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def fun(a):</span><br><span class="line">	pass</span><br><span class="line">	<span class="comment"># time.sleep(random.random())</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">	<span class="comment"># 以下是测试用例</span></span><br><span class="line">	<span class="comment"># import random</span></span><br><span class="line">	st = time.time()</span><br><span class="line">	timer = ApiTimer(<span class="string">'test1.test'</span>, <span class="string">'xx.xx.xx.xx'</span>, xx)</span><br><span class="line">	<span class="keyword">while</span> time.time() - st &lt; 20:</span><br><span class="line">		timer.probe(fun, 1)</span><br></pre></td></tr></table></figure>
<h2 id="关键部位info日志添加"><a href="#关键部位info日志添加" class="headerlink" title="关键部位info日志添加"></a>关键部位info日志添加</h2><h3 id="重要性-1"><a href="#重要性-1" class="headerlink" title="重要性"></a>重要性</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">有时候你会遇到这样的问题：api响应时间超短，也没有报错邮件，但是就是结果不对。这一般是返回结果出了问题，遇到最多</span><br><span class="line">的就是在调用第三方接口的时候出了这样的问题，这时候就需要有info日志来帮忙了。打日志最好使用,|:分隔符分开关键的参</span><br><span class="line">数和返回值，方便过滤。</span><br></pre></td></tr></table></figure>
<h3 id="在api中关键断码段打印日志"><a href="#在api中关键断码段打印日志" class="headerlink" title="在api中关键断码段打印日志"></a>在api中关键断码段打印日志</h3><h4 id="使用sentry"><a href="#使用sentry" class="headerlink" title="使用sentry"></a>使用sentry</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sentry除了能监控error日志，还能收集info日志，你可以尝试使用。但是sentry打的info日志会有很多额外的信息。可以</span><br><span class="line">去前边的链接中看怎么使用。</span><br></pre></td></tr></table></figure>
<h4 id="使用rsyslog"><a href="#使用rsyslog" class="headerlink" title="使用rsyslog"></a>使用rsyslog</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">该方法比较通用，不论在什么开发语言和框架下，基本上都支持对rsyslog的</span><br><span class="line">使用。我前边写了一篇在Django中使用rsyslog，可以看一下。</span><br></pre></td></tr></table></figure>
<p><a href="https://www.yunsonbai.top/2016/06/08/django-rsyslog/" target="_blank" rel="noopener">使用rsyslog收集Django的日志</a></p>
<h3 id="收集远程日志"><a href="#收集远程日志" class="headerlink" title="收集远程日志"></a>收集远程日志</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">前边说了日志打印，下边说一下如何收集这些日志。</span><br></pre></td></tr></table></figure>
<h4 id="服务器写传输脚本，定期执行"><a href="#服务器写传输脚本，定期执行" class="headerlink" title="服务器写传输脚本，定期执行"></a>服务器写传输脚本，定期执行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">有点low，但也不失为一种办法</span><br></pre></td></tr></table></figure>
<h4 id="使用rsyslog-1"><a href="#使用rsyslog-1" class="headerlink" title="使用rsyslog"></a>使用rsyslog</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">当然如果你使用的是使用的是sentry收集info日志，你不用操心怎么收集，因为sentry都帮你做好了。如果是使用的rsyslog的</span><br><span class="line">话你就需要收集服务器上的日志了。rsyslog除了可以帮你本地打印日志，还能远程收集日志。可以走默认端口514来收集，当然</span><br><span class="line">需要把web服务器上的rsyslog配置成远程传输的方式，即通过514端口输出日志到远端rsyslog日志服务器上。</span><br></pre></td></tr></table></figure>
<h4 id="使用syslog-ng收集"><a href="#使用syslog-ng收集" class="headerlink" title="使用syslog-ng收集"></a>使用syslog-ng收集</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">syslog-ng收集日志的方式和rsyslog一样都是走514端口，但是syslog-ng可以很方便的根据关键词帮你进行日志过滤，这样的</span><br><span class="line">话你就不用苦恼于web应用太多而<span class="built_in">local</span>只能从（0-7）总感觉不够用，但是关于rsyslog和syslog-ng的比较大家可以在网上搜</span><br><span class="line">搜，毕竟这里只是提供方法。</span><br></pre></td></tr></table></figure>
<h4 id="使用ELK"><a href="#使用ELK" class="headerlink" title="使用ELK"></a>使用ELK</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">使用ELK，何为ELK：</span><br><span class="line">	e:</span><br><span class="line">         elasticsearch，搜索引擎，创建索引，存储数据</span><br><span class="line">    	l:</span><br><span class="line">         logstash， 日志收集，过滤，传输日志到elasticsearch</span><br><span class="line">    	k:</span><br><span class="line">         kibana， web展示</span><br><span class="line">用这个日至系统的好处就是能直接通过浏览器访问你的日志，免去了grep操作。目前我们有部分系统采用ELK。</span><br><span class="line">关于如何搭建请点击下边的链接。</span><br></pre></td></tr></table></figure>
<p><a href="https://www.yunsonbai.top/2016/07/01/ELK%E5%AE%9E%E6%97%B6%E6%97%A5%E5%BF%97%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/" target="_blank" rel="noopener">ELK系统搭建</a></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">至此，从error监控、api响应时间监控、关键代码段响应时间监控、info日志打印四个角度对webServer做了多方位的监控，这</span><br><span class="line">些监控是为了方便你及时修改系统bug和做优化的。如何选择还是要根据具体情况而定，总之一定要遵循这样的原则：不能因为监控</span><br><span class="line">系统而拖垮服务，最终目的是为了更好的提供服务。</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> api或系统监控 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 监控 - api监控 - 监控系统 - 系统监控 - webServer监控 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ELK日志平台搭建]]></title>
      <url>http://yunsonbai.github.io/2016/07/01/ELK%E5%AE%9E%E6%97%B6%E6%97%A5%E5%BF%97%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在系统问题排查时，尤其是在第三方接口出问题的时候，貌似是自己写的服务异常，其实不然，这样很是浪费自己时间，错误在第三方</span><br><span class="line">接口。所以日志收集整理，很重要，能帮助我们排错。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="可选择的日志收集方式"><a href="#可选择的日志收集方式" class="headerlink" title="可选择的日志收集方式"></a>可选择的日志收集方式</h2><h3 id="rsyslog收集"><a href="#rsyslog收集" class="headerlink" title="rsyslog收集"></a>rsyslog收集</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">走514端口，收集远程服务器打来的日志，可以根据<span class="built_in">local</span>级别（0-7）过滤，也可以根据内容（不太方便），最终要使用grep去服务</span><br><span class="line">   器上过滤排查</span><br></pre></td></tr></table></figure>
<h3 id="syslog-ng收集"><a href="#syslog-ng收集" class="headerlink" title="syslog-ng收集"></a>syslog-ng收集</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">和rsyslog差不多，在根据内容过滤上，本人认为还是比较方便的，但是同样得用grep去机器上过滤想要的东西。</span><br></pre></td></tr></table></figure>
<h3 id="ELK"><a href="#ELK" class="headerlink" title="ELK"></a>ELK</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">何为ELK：</span><br><span class="line">	e:</span><br><span class="line">         elasticsearch，搜索引擎，创建索引，存储数据</span><br><span class="line">    	l:</span><br><span class="line">         logstash， 日志收集，过滤，传输日志到elasticsearch</span><br><span class="line">    	k:</span><br><span class="line">这个不错，可以在web页面查看，还能方便的过滤，所以可以尝试一下这个。</span><br></pre></td></tr></table></figure>
<h2 id="ELK的搭建"><a href="#ELK的搭建" class="headerlink" title="ELK的搭建"></a>ELK的搭建</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">网上有很多类似的，下边是我一边搭建一边整理的，没有意外是可以的。</span><br><span class="line">环境：</span><br><span class="line">	centos6</span><br></pre></td></tr></table></figure>
<h3 id="elasticsearch"><a href="#elasticsearch" class="headerlink" title="elasticsearch"></a>elasticsearch</h3><h4 id="版本说明"><a href="#版本说明" class="headerlink" title="版本说明"></a>版本说明</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">建议去官网下载，我使用的是1.4.4下载elasticsearch-1.4.4.tar.gz后解压</span><br></pre></td></tr></table></figure>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim elasticsearch-1.4.4/config/elasticsearch.yml</span><br><span class="line">  	添加如下：</span><br><span class="line">	cluster.name: elasticsearch  （不能用root用户）</span><br><span class="line">	node.name: <span class="string">"node1"</span></span><br><span class="line">	node.master: <span class="literal">true</span></span><br><span class="line">    	node.data: <span class="literal">true</span></span><br><span class="line">    	network.bind_host: 192.168.xx.xx</span><br></pre></td></tr></table></figure>
<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sh elasticsearch-1.4.4/bin/elasticsearch </span><br><span class="line">   （所有的服务通过后建议写脚本采用后台运行）</span><br><span class="line">看到9200和9300端口说明启动成功</span><br></pre></td></tr></table></figure>
<h3 id="logstash"><a href="#logstash" class="headerlink" title="logstash"></a>logstash</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">原则，不能因为添加监控而导致服务质量大幅度下滑。</span><br></pre></td></tr></table></figure>
<h4 id="版本说明-1"><a href="#版本说明-1" class="headerlink" title="版本说明"></a>版本说明</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">官方下载，我使用的是logstash-1.5.4。</span><br></pre></td></tr></table></figure>
<h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">vim test.conf</span><br><span class="line">input &#123;</span><br><span class="line">   	file &#123;</span><br><span class="line">    	path =&gt; <span class="string">"/var/log/messages"</span></span><br><span class="line">    	<span class="built_in">type</span> =&gt; <span class="string">"syslog"</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment"># 如果用远程的收集话，要使用udp方式</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter&#123;</span><br><span class="line"></span><br><span class="line">   	<span class="comment">#test</span></span><br><span class="line">   	<span class="keyword">if</span> [message] =~ /TEST/ &#123;</span><br><span class="line">       	mutate&#123;</span><br><span class="line">			<span class="comment"># 可取官方文档中找，添加你想要的参数</span></span><br><span class="line">		&#125;</span><br><span class="line">   	&#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">   	<span class="comment">#test</span></span><br><span class="line">   	<span class="keyword">if</span> [message】 =~ /TEST$/&#123;</span><br><span class="line">       	elasticsearch &#123; host =&gt;  <span class="string">"192.168.xx.xx"</span></span><br><span class="line">           	protocol =&gt; <span class="string">"http"</span></span><br><span class="line">           	index =&gt; <span class="string">"test-%&#123;+YYYY.MM&#125;"</span></span><br><span class="line">           	manage_template  =&gt; <span class="literal">false</span></span><br><span class="line">       	&#125;</span><br><span class="line">   	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh logstash-1.5.4/bin/logstash</span><br></pre></td></tr></table></figure>
<h3 id="kibana"><a href="#kibana" class="headerlink" title="kibana"></a>kibana</h3><h4 id="版本说明-2"><a href="#版本说明-2" class="headerlink" title="版本说明"></a>版本说明</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">官网下载，我使用的是4.1.1</span><br></pre></td></tr></table></figure>
<h4 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim config/kibana.yml</span><br><span class="line">  	添加如下：</span><br><span class="line">	elasticsearch_url: <span class="string">"http://192.168.xx.xx:9200"</span></span><br><span class="line">	其他的不动</span><br></pre></td></tr></table></figure>
<h4 id="启动-2"><a href="#启动-2" class="headerlink" title="启动"></a>启动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sh bin/kibana</span><br><span class="line">   看到5601就行了</span><br></pre></td></tr></table></figure>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">往配置的文件中打印日志，在kibana的setting中配置一条[text-]YY.MM，</span><br><span class="line">   就能看到你的日志了，还可以根据需求定制显示哪一部分</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> api或系统监控 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ELK - 日志平台搭建 - ELK搭建 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用diamond监控系统或api]]></title>
      <url>http://yunsonbai.github.io/2016/06/13/python-diamond/</url>
      <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如何保证系统或api在出问题的时候及时发现并解决呢？这就需要用到监控系统，监控系统可以是实时监控，也可以是</span><br><span class="line">非实时的（需要定时去检查系统），这里说一下用diamond实现非实时监控</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cd /usr/local/Diamond</span></span><br><span class="line"><span class="comment"># git clone git@github.com:python-diamond/Diamond.git</span></span><br></pre></td></tr></table></figure>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="diamond配置（-conf-diamond-conf）"><a href="#diamond配置（-conf-diamond-conf）" class="headerlink" title="diamond配置（./conf/diamond.conf）"></a>diamond配置（./conf/diamond.conf）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br></pre></td><td class="code"><pre><span class="line">[server]</span><br><span class="line"></span><br><span class="line">handlers = diamond.handler.graphite.GraphiteHandler, diamond.handler.archive.ArchiveHandler</span><br><span class="line"></span><br><span class="line"><span class="comment"># User diamond will run as</span></span><br><span class="line"><span class="comment"># Leave empty to use the current user</span></span><br><span class="line">user =</span><br><span class="line"></span><br><span class="line"><span class="comment"># Group diamond will run as</span></span><br><span class="line"><span class="comment"># Leave empty to use the current group</span></span><br><span class="line">group =</span><br><span class="line"></span><br><span class="line"><span class="comment"># Pid file</span></span><br><span class="line">pid_file = /xx/Diamond/run/diamond.pid</span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory to load collector modules from</span></span><br><span class="line">collectors_path = /xx/Diamond/share/diamond/collectors/</span><br><span class="line">collectors_config_path = /xx/Diamond/conf/collectors/</span><br><span class="line">collectors_reload_interval = 5</span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory to load handler configs from</span></span><br><span class="line">handlers_config_path = /xx/Diamond/conf/handlers/</span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory to load handler modules from</span></span><br><span class="line">handlers_path = /xx/Diamond/share/diamond/handlers/</span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment">### Options for handlers</span></span><br><span class="line">[handlers]</span><br><span class="line"></span><br><span class="line"><span class="comment"># daemon logging handler(s)</span></span><br><span class="line">keys = rotated_file</span><br><span class="line"></span><br><span class="line"><span class="comment">### Defaults options for all Handlers</span></span><br><span class="line">[[default]]</span><br><span class="line"></span><br><span class="line">[[ArchiveHandler]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># File to write archive log files</span></span><br><span class="line">log_file = /var/<span class="built_in">log</span>/diamond/archive.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># Number of days to keep archive log files</span></span><br><span class="line">days = 7</span><br><span class="line"></span><br><span class="line">[[GraphiteHandler]]</span><br><span class="line"><span class="comment">### Options for GraphiteHandler</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Graphite server host(本人认为携程carbon比较合适)</span></span><br><span class="line">host = xx.xx.xx.xx</span><br><span class="line"></span><br><span class="line"><span class="comment"># Port to send metrics to</span></span><br><span class="line">port = 2003</span><br><span class="line"></span><br><span class="line"><span class="comment"># Socket timeout (seconds)</span></span><br><span class="line">timeout = 15</span><br><span class="line"></span><br><span class="line"><span class="comment"># Batch size for metrics</span></span><br><span class="line">batch = 1</span><br><span class="line"></span><br><span class="line">[[GraphitePickleHandler]]</span><br><span class="line"><span class="comment">### Options for GraphitePickleHandler</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Graphite server host(本人认为携程carbon比较合适)</span></span><br><span class="line">host = xx.xx.xx.xx  <span class="comment">#写你搭建好的carbon服务器地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Port to send metrics to</span></span><br><span class="line">port = 2004</span><br><span class="line"></span><br><span class="line"><span class="comment"># Socket timeout (seconds)</span></span><br><span class="line">timeout = 15</span><br><span class="line"></span><br><span class="line"><span class="comment"># Batch size for pickled metrics</span></span><br><span class="line">batch = 256</span><br><span class="line"></span><br><span class="line">[[MySQLHandler]]</span><br><span class="line"><span class="comment">### Options for MySQLHandler</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MySQL Connection Info</span></span><br><span class="line">hostname    = xx.xx.xx.xx</span><br><span class="line">port        = xx</span><br><span class="line">username    = xx</span><br><span class="line">password    = xx</span><br><span class="line">database    = diamond</span><br><span class="line">table       = metrics</span><br><span class="line"><span class="comment"># INT UNSIGNED NOT NULL</span></span><br><span class="line">col_time    = timestamp</span><br><span class="line"><span class="comment"># VARCHAR(255) NOT NULL</span></span><br><span class="line">col_metric  = metric</span><br><span class="line"><span class="comment"># VARCHAR(255) NOT NULL</span></span><br><span class="line">col_value   = value</span><br><span class="line"></span><br><span class="line">[[StatsdHandler]]</span><br><span class="line">host = 127.0.0.1</span><br><span class="line">port = 8125</span><br><span class="line"></span><br><span class="line">[[TSDBHandler]]</span><br><span class="line">host = 127.0.0.1</span><br><span class="line">port = 4242</span><br><span class="line">timeout = 15</span><br><span class="line"></span><br><span class="line">[[LibratoHandler]]</span><br><span class="line">user = user@example.com</span><br><span class="line">apikey = abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz01</span><br><span class="line"></span><br><span class="line">[[HostedGraphiteHandler]]</span><br><span class="line">apikey = abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz01</span><br><span class="line">timeout = 15</span><br><span class="line">batch = 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># And any other config settings from GraphiteHandler are valid here</span></span><br><span class="line"></span><br><span class="line">[[HttpPostHandler]]</span><br><span class="line"></span><br><span class="line"><span class="comment">### Urp to post the metrics</span></span><br><span class="line">url = http://localhost:8888/</span><br><span class="line"><span class="comment">### Metrics batch size</span></span><br><span class="line">batch = 100</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment">### Options for collectors</span></span><br><span class="line">[collectors]</span><br><span class="line">[[default]]</span><br><span class="line"><span class="comment">### Defaults options for all Collectors</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment and set to hardcode a hostname for the collector path</span></span><br><span class="line"><span class="comment"># Keep in mind, periods are seperators in graphite</span></span><br><span class="line"><span class="comment"># hostname = my_custom_hostname</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If you prefer to just use a different way of calculating the hostname</span></span><br><span class="line"><span class="comment"># Uncomment and set this to one of these values:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># smart             = Default. Tries fqdn_short. If that's localhost, uses hostname_short</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># fqdn_short        = Default. Similar to hostname -s</span></span><br><span class="line"><span class="comment"># fqdn              = hostname output</span></span><br><span class="line"><span class="comment"># fqdn_rev          = hostname in reverse (com.example.www)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># uname_short       = Similar to uname -n, but only the first part</span></span><br><span class="line"><span class="comment"># uname_rev         = uname -r in reverse (com.example.www)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># hostname_short    = `hostname -s`</span></span><br><span class="line"><span class="comment"># hostname          = `hostname`</span></span><br><span class="line"><span class="comment"># hostname_rev      = `hostname` in reverse (com.example.www)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># shell             = Run the string set in hostname as a shell command and use its</span></span><br><span class="line"><span class="comment">#                     output(with spaces trimmed off from both ends) as the hostname.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># hostname_method = smart</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Path Prefix and Suffix</span></span><br><span class="line"><span class="comment"># you can use one or both to craft the path where you want to put metrics</span></span><br><span class="line"><span class="comment"># such as: %(path_prefix)s.$(hostname)s.$(path_suffix)s.$(metric)s</span></span><br><span class="line">path_prefix = servers <span class="comment">#在graphite显示的最外层名字</span></span><br><span class="line"><span class="comment"># path_suffix =</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Path Prefix for Virtual Machines</span></span><br><span class="line"><span class="comment"># If the host supports virtual machines, collectors may report per</span></span><br><span class="line"><span class="comment"># VM metrics. Following OpenStack nomenclature, the prefix for</span></span><br><span class="line"><span class="comment"># reporting per VM metrics is "instances", and metric foo for VM</span></span><br><span class="line"><span class="comment"># bar will be reported as: instances.bar.foo...</span></span><br><span class="line"><span class="comment"># instance_prefix = instances</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Default Poll Interval (seconds)</span></span><br><span class="line">interval = 10  <span class="comment">#(所有的监控多长时间执行一次，并发送数据给carbon)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###############################################</span></span><br><span class="line"><span class="comment"># Default enabled collectors</span></span><br><span class="line"><span class="comment">########################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#[[CPUCollector]]</span></span><br><span class="line"><span class="comment">#enabled = True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#[[DiskSpaceCollector]]</span></span><br><span class="line"><span class="comment">#enabled = True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#[[DiskUsageCollector]]</span></span><br><span class="line"><span class="comment">#enabled = True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#[[LoadAverageCollector]]</span></span><br><span class="line"><span class="comment">#enabled = True</span></span><br><span class="line"></span><br><span class="line">[[MemoryCollector]]</span><br><span class="line">enabled = True</span><br><span class="line"></span><br><span class="line"><span class="comment">#[[VMStatCollector]]</span></span><br><span class="line"><span class="comment">#enabled = True</span></span><br><span class="line"></span><br><span class="line">[loggers]</span><br><span class="line"></span><br><span class="line">keys = root</span><br><span class="line"></span><br><span class="line"><span class="comment"># handlers are higher in this config file, in:</span></span><br><span class="line"><span class="comment"># [handlers]</span></span><br><span class="line"><span class="comment"># keys = ...</span></span><br><span class="line"></span><br><span class="line">[formatters]</span><br><span class="line"></span><br><span class="line">keys = default</span><br><span class="line"></span><br><span class="line">[logger_root]</span><br><span class="line"></span><br><span class="line"><span class="comment"># to increase verbosity, set DEBUG</span></span><br><span class="line">level = INFO</span><br><span class="line">handlers = rotated_file</span><br><span class="line">propagate = 1</span><br><span class="line"></span><br><span class="line">[handler_rotated_file]</span><br><span class="line"></span><br><span class="line">class = handlers.TimedRotatingFileHandler</span><br><span class="line">level = DEBUG</span><br><span class="line">formatter = default</span><br><span class="line"><span class="comment"># rotate at midnight, each day and keep 7 days</span></span><br><span class="line">args = (<span class="string">'/var/log/diamond/diamond.log'</span>, <span class="string">'midnight'</span>, 1, 7)</span><br><span class="line"></span><br><span class="line">[formatter_default]</span><br><span class="line"></span><br><span class="line">format = [%(asctime)s] [%(threadName)s] %(message)s</span><br><span class="line">datefmt =</span><br><span class="line"></span><br><span class="line"><span class="comment">#######################################</span></span><br><span class="line"><span class="comment">### Options for config merging</span></span><br><span class="line"><span class="comment"># [configs]</span></span><br><span class="line"><span class="comment"># path = "/etc/diamond/configs/"</span></span><br><span class="line"><span class="comment"># extension = ".conf"</span></span><br><span class="line"><span class="comment">#----------------------------------------------</span></span><br><span class="line"><span class="comment"># Example:</span></span><br><span class="line"><span class="comment"># /etc/diamond/configs/net.conf</span></span><br><span class="line"><span class="comment"># [collectors]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># [[NetworkCollector]]</span></span><br><span class="line">          <span class="comment"># enabled = True</span></span><br></pre></td></tr></table></figure>
<h3 id="数据库支持（mysql）"><a href="#数据库支持（mysql）" class="headerlink" title="数据库支持（mysql）"></a>数据库支持（mysql）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database diamond</span><br></pre></td></tr></table></figure>
<h3 id="增加MemoryCollector（当然按照上边的配置还能加其他的）"><a href="#增加MemoryCollector（当然按照上边的配置还能加其他的）" class="headerlink" title="增加MemoryCollector（当然按照上边的配置还能加其他的）"></a>增加MemoryCollector（当然按照上边的配置还能加其他的）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在目录/xx/Diamond/share/diamond/collectors/中添加一个py文件</span><br><span class="line">该文件diamond已经写好，在src目录下寻找一下</span><br><span class="line">（src/collectors/memory/memory.py）</span><br></pre></td></tr></table></figure>
<h3 id="增加自己的Collector"><a href="#增加自己的Collector" class="headerlink" title="增加自己的Collector"></a>增加自己的Collector</h3><h4 id="添加ExampleCollector-conf"><a href="#添加ExampleCollector-conf" class="headerlink" title="添加ExampleCollector.conf"></a>添加ExampleCollector.conf</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在/xx/Diamond/conf/collectors/添加一个ExampleCollector.conf</span><br><span class="line">（你也可以是其他的名字，xxCollector.conf ）</span><br></pre></td></tr></table></figure>
<h4 id="添加ExampleCollector-py"><a href="#添加ExampleCollector-py" class="headerlink" title="添加ExampleCollector.py"></a>添加ExampleCollector.py</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">在/xx/Diamond/share/diamond/collectors/中添加ExampleCollector.py</span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line">import diamond.collector</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def <span class="built_in">test</span>():</span><br><span class="line">    <span class="comment"># dosomething</span></span><br><span class="line">    pass   </span><br><span class="line"></span><br><span class="line">class ExampleCollector(diamond.collector.Collector):</span><br><span class="line"></span><br><span class="line">    def collect(self):</span><br><span class="line">        metric_name = <span class="string">"my.example.metric"</span></span><br><span class="line">        st = time.time()</span><br><span class="line">        <span class="built_in">test</span>()</span><br><span class="line">        et = time.time()</span><br><span class="line">        metric_value = (et - st) * 1000</span><br><span class="line">        self.publish(metric_name, metric_value)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cd /usr/local/Diamond</span></span><br><span class="line"><span class="comment"># python ./bin/diamond -lf -c ./conf/diamond.conf</span></span><br></pre></td></tr></table></figure>
<h3 id="查看结果"><a href="#查看结果" class="headerlink" title="查看结果"></a>查看结果</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">可以到已经搭建好的graphite（待我整理完会补充，也可以到网上搜一下）</span><br><span class="line">后台查看应该会有 /Metrics/servers .....</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://diamond.readthedocs.io/en/latest/" target="_blank" rel="noopener">Diamond</a></p>
]]></content>
      
        <categories>
            
            <category> api或系统监控 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
            <tag> diamond </tag>
            
            <tag> 系统监控 </tag>
            
            <tag> api监控 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[nginx常用配置]]></title>
      <url>http://yunsonbai.github.io/2016/06/09/nginx%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx是一个高性能的HTTP和反向代理服务器，也是一个IMAP/POP3/SMTP服务器，下边说一下这断时间用到的nginx配置</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><h3 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">upstream forum  &#123;</span><br><span class="line">	server 127.0.0.1:8000 weight 1;</span><br><span class="line">	server 127.0.0.1:8001 weight 1;</span><br><span class="line">&#125;</span><br><span class="line">server&#123;</span><br><span class="line">       listen 80;</span><br><span class="line">       location / &#123;</span><br><span class="line">           proxy_pass         http://forum;</span><br><span class="line">           proxy_set_header   Host             <span class="variable">$host</span>;</span><br><span class="line">           proxy_set_header   X-Real-IP        <span class="variable">$remote_addr</span>;</span><br><span class="line">           proxy_set_header   X-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">	location /static/ &#123;</span><br><span class="line">		proxy_set_header Host test.xx.com;</span><br><span class="line">		proxy_set_header Origin http://test.xx.com;</span><br><span class="line">		proxy_pass    http://test.xx.com/static1/; <span class="comment">#可以不是代理的url</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="设置与打印cookies"><a href="#设置与打印cookies" class="headerlink" title="设置与打印cookies"></a>设置与打印cookies</h2><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">       listen 80;</span><br><span class="line">       server_name test.xx.com;</span><br><span class="line">       add_header Set-Cookie <span class="string">"name=baisong"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log_format main	<span class="string">'$http_cookie,...'</span></span><br></pre></td></tr></table></figure>
<h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">	location /static/ &#123;</span><br><span class="line">       	<span class="built_in">alias</span>   /<span class="built_in">test</span>/static/;</span><br><span class="line">		expires 24h;</span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="进程数指定"><a href="#进程数指定" class="headerlink" title="进程数指定"></a>进程数指定</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">worker_processes 8; <span class="comment">#最好和cpu数量一致</span></span><br></pre></td></tr></table></figure>
<h3 id="进程连接数指定"><a href="#进程连接数指定" class="headerlink" title="进程连接数指定"></a>进程连接数指定</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">worker_connections 65535;</span><br><span class="line"><span class="comment"># 每个进程允许的最多连接数， 理论上每台nginx 服务器的最大连接数为worker_processes*worker_connections。</span></span><br><span class="line">   keepalive_timeout 60;keepalive 超时时间。</span><br></pre></td></tr></table></figure>
<h3 id="头部的缓冲区大小"><a href="#头部的缓冲区大小" class="headerlink" title="头部的缓冲区大小"></a>头部的缓冲区大小</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">open_file_cache max=65535 inactive=60s;</span><br><span class="line"><span class="comment">#这个将为打开文件指定缓存，默认是没有启用的，max 指定缓存数量，建议和打开文件数一致，inactive 是指经过多长时间文件没被请求后删除缓存。</span></span><br></pre></td></tr></table></figure>
<h3 id="缓存检查"><a href="#缓存检查" class="headerlink" title="缓存检查"></a>缓存检查</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">open_file_cache_valid 80s;</span><br><span class="line"><span class="comment"># 这个是指多长时间检查一次缓存的有效信息。</span></span><br></pre></td></tr></table></figure>
<h3 id="控制缓冲区溢出攻击"><a href="#控制缓冲区溢出攻击" class="headerlink" title="控制缓冲区溢出攻击"></a>控制缓冲区溢出攻击</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">client_body_buffer_size  1K;</span><br><span class="line">client_header_buffer_size 1k;</span><br><span class="line">   client_max_body_size 1k;</span><br><span class="line">   large_client_header_buffers 2 1k;</span><br></pre></td></tr></table></figure>
<h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 限制可用的请求方法</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$request_method</span> !~ ^(GET|HEAD|POST)$ ) &#123;</span><br><span class="line">        <span class="built_in">return</span> 403;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="防止图片盗链"><a href="#防止图片盗链" class="headerlink" title="防止图片盗链"></a>防止图片盗链</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">只有www.example1.com example2.com 能访问</span><br><span class="line">   location /images/ &#123;</span><br><span class="line">        valid_referers none blocked www.example1.com example2.com;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$invalid_referer</span>) &#123;</span><br><span class="line">             <span class="built_in">return</span>   403;</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p><a href="http://www.yunsonbai.top/2016/06/09/nginx-https%E9%85%8D%E7%BD%AE/" target="_blank" rel="noopener">nginx实现https</a></p>
]]></content>
      
        <categories>
            
            <category> nginx </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nginx - 配置 - nginx常用配置 - 反向代理 - 设置cookie </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[nginx实现https]]></title>
      <url>http://yunsonbai.github.io/2016/06/09/nginx-https%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx是一个高性能的HTTP和反向代理服务器，也是一个IMAP/POP3/SMTP服务器，下边说一下nginx关于https的配置</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="使用ssl生成证书"><a href="#使用ssl生成证书" class="headerlink" title="使用ssl生成证书"></a>使用ssl生成证书</h2><h3 id="生成命令"><a href="#生成命令" class="headerlink" title="生成命令"></a>生成命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout </span></span><br><span class="line">   /etc/nginx/ssl/nginx.key -out /etc/nginx/ssl/nginx.crt</span><br></pre></td></tr></table></figure>
<h3 id="输入完命令后的提示"><a href="#输入完命令后的提示" class="headerlink" title="输入完命令后的提示"></a>输入完命令后的提示</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">提示如下，一步一步完成即可（也可以使用默认，也可随意）：</span><br><span class="line">Country Name (2 letter code) [AU]:China</span><br><span class="line">   State or Province Name (full name) [Some-State]: Beijing</span><br><span class="line">   Locality Name (eg, city) []:Beijing</span><br><span class="line">   Organization Name (eg, company) [Internet Widgits Pty Ltd]:Bouncy Castles, Inc.</span><br><span class="line">   Organizational Unit Name (eg, section) []:Ministry of Water Slides</span><br><span class="line">   Common Name (e.g. server FQDN or YOUR name) []:your_domain.com</span><br><span class="line">   Email Address []:admin@your_domain.com</span><br></pre></td></tr></table></figure>
<h2 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h2><h3 id="打开-conf文件"><a href="#打开-conf文件" class="headerlink" title="打开.conf文件"></a>打开.conf文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/nginx、nginx.conf文件</span><br><span class="line">   vim nginx.conf</span><br></pre></td></tr></table></figure>
<h3 id="添加如下配置"><a href="#添加如下配置" class="headerlink" title="添加如下配置"></a>添加如下配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line">     listen 80;</span><br><span class="line">     server_name www.xxx.xxx;</span><br><span class="line">&#125;</span><br><span class="line">server&#123;</span><br><span class="line">	listen 443 ssl;</span><br><span class="line">    ssl_certificate /etc/nginx/ssl/nginx.crt;</span><br><span class="line">    ssl_certificate_key /etc/nginx/ssl/nginx.key;</span><br><span class="line">    location /static/ &#123;</span><br><span class="line">    	<span class="built_in">alias</span>   /<span class="built_in">test</span>/static/;</span><br><span class="line">        expires 24h;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="启动nginx"><a href="#启动nginx" class="headerlink" title="启动nginx"></a>启动nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -c /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>
<h3 id="创建静态页"><a href="#创建静态页" class="headerlink" title="创建静态页"></a>创建静态页</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /test/static</span><br><span class="line">touch test.html</span><br><span class="line">echo &apos;test https&apos; &gt; test.html</span><br></pre></td></tr></table></figure>
<h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在浏览器中访问https:127..0.1/static/test.html</span><br></pre></td></tr></table></figure>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">最近发现了一个很奇怪的问题，就是使用python在访问https下的链接的时候一切正常</span><br><span class="line">然而在ios9下访问就会时不时的出现1004问题（访问不到）,最后的解决办法是使用最</span><br><span class="line">新的nginx解决</span><br></pre></td></tr></table></figure>
<p><a href="http://www.yunsonbai.top/2016/06/09/nginx%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/" target="_blank" rel="noopener">nginx常用配置</a></p>
]]></content>
      
        <categories>
            
            <category> nginx </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nginx - https - nginx实现https - ssl - ios访问https的1004问题补充 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[当eth0没有ipv4地址的解决办法]]></title>
      <url>http://yunsonbai.github.io/2016/06/09/eth0-no-ipv4/</url>
      <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">有时候我们在Linux使用ifconfig后发现没有ipv4地址，下边说一下解决办法</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="打开ubuntu的-etc-network-interfaces"><a href="#打开ubuntu的-etc-network-interfaces" class="headerlink" title="打开ubuntu的/etc/network/interfaces"></a>打开ubuntu的/etc/network/interfaces</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">删除已经有的，后根据喜好选择添加如下</span><br><span class="line">自动：</span><br><span class="line">         auto eth0</span><br><span class="line">         iface eth0 inet dhcp</span><br><span class="line">    静态分配的配置方法：</span><br><span class="line">         auto eth0</span><br><span class="line">         iface eth0 inet static</span><br><span class="line">         address 192.168.205.139</span><br><span class="line">         netmask  255.255.255.0</span><br><span class="line">         gateway  192.168.205.1</span><br></pre></td></tr></table></figure>
<h2 id="添加域名服务器"><a href="#添加域名服务器" class="headerlink" title="添加域名服务器"></a>添加域名服务器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">打开/etc/resolv.conf文件</span><br><span class="line">   添加这行:nameserver 127.0.0.1</span><br></pre></td></tr></table></figure>
<h2 id="重启eth0"><a href="#重启eth0" class="headerlink" title="重启eth0"></a>重启eth0</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$/etc/init.d/networking restart(这条命令是重启网卡)</span><br><span class="line"> 或者</span><br><span class="line"><span class="variable">$ifdown</span> eth0</span><br><span class="line"><span class="variable">$ifup</span>   eth0（这两条命令是有针对性的重启某个网络接口，因为一个系统可能有多个网络接口）</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux - eth0没有ipv4地址 - ipv4地址 - 配置eth0 - ifconfig </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用rsyslog收集Django的日志]]></title>
      <url>http://yunsonbai.github.io/2016/06/08/django-rsyslog/</url>
      <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">日志收集对项目很重要,在前边我写过一篇如何利用sentry收集django程序运行时的日志,我们的项目中一般用sentry</span><br><span class="line">来收集error日志，因为打的比较详细，可观性也比较强。但是我们如果把info日志达到sentry上不方便观看，所以不</span><br><span class="line">妨使用rsyslog来收集Django中的一些info日志，当然只是打我们想要的东西。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ubuntu12.04</span><br></pre></td></tr></table></figure>
<h2 id="搭建rsyslog环境"><a href="#搭建rsyslog环境" class="headerlink" title="搭建rsyslog环境"></a>搭建rsyslog环境</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在Ubuntu中默认已经装好了rsyslog，当然如果有问题你可以自己安装（使用apt-get </span><br><span class="line">install rsyslog即可，你也可以使用编译安装）</span><br></pre></td></tr></table></figure>
<h3 id="配置（-var-log-mylog-forum-log）"><a href="#配置（-var-log-mylog-forum-log）" class="headerlink" title="配置（/var/log/mylog/forum.log）"></a>配置（/var/log/mylog/forum.log）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">   你可以添加类似这样一条：</span><br><span class="line">local4.*        /var/<span class="built_in">log</span>/mylog/forum.log</span><br></pre></td></tr></table></figure>
<h3 id="重启rsyslog"><a href="#重启rsyslog" class="headerlink" title="重启rsyslog"></a>重启rsyslog</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service rsyslog restart</span><br></pre></td></tr></table></figure>
<h2 id="在Django中使用"><a href="#在Django中使用" class="headerlink" title="在Django中使用"></a>在Django中使用</h2><h3 id="修改Djangosettings-py"><a href="#修改Djangosettings-py" class="headerlink" title="修改Djangosettings.py"></a>修改Djangosettings.py</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">   from logging.handlers import SysLogHandler</span><br><span class="line"></span><br><span class="line">LOGGING = &#123;</span><br><span class="line">    <span class="string">'version'</span>: 1,</span><br><span class="line">    <span class="string">'disable_existing_loggers'</span>: False,</span><br><span class="line">    <span class="string">'formatters'</span>: &#123;</span><br><span class="line">        <span class="string">'verbose'</span>: &#123;</span><br><span class="line">            <span class="string">'format'</span>: <span class="string">"iSync|%(levelname)s|%(asctime)s|%(module)s|%(process)d|%(thread)d|%(message)s"</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'simple'</span>: &#123;</span><br><span class="line">            <span class="string">'format'</span>: <span class="string">"iSync|%(levelname)s|%(asctime)s|%(message)s"</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'handlers'</span>: &#123;</span><br><span class="line">        <span class="string">'null'</span>: &#123;</span><br><span class="line">            <span class="string">'level'</span>: <span class="string">'INFO'</span>,</span><br><span class="line">            <span class="string">'class'</span>: <span class="string">'logging.NullHandler'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'console'</span>: &#123;</span><br><span class="line">            <span class="string">'level'</span>: <span class="string">'DEBUG'</span>,</span><br><span class="line">            <span class="string">'class'</span>: <span class="string">'logging.StreamHandler'</span>,</span><br><span class="line">            <span class="string">'formatter'</span>: <span class="string">'verbose'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'syslog'</span>: &#123;</span><br><span class="line">            <span class="string">'level'</span>: <span class="string">'INFO'</span>,</span><br><span class="line">            <span class="string">'class'</span>: <span class="string">'logging.handlers.SysLogHandler'</span>,</span><br><span class="line">            <span class="string">'formatter'</span>: <span class="string">'simple'</span>,</span><br><span class="line">            <span class="string">'facility'</span>: SysLogHandler.LOG_LOCAL4, <span class="comment">#此处一定要和rsyslog中的local4一致</span></span><br><span class="line">            <span class="string">'address'</span>: <span class="string">'/dev/log'</span>, <span class="comment"># 机器上一定要有该文件（srw-rw-rw-）</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="string">'loggers'</span>: &#123;</span><br><span class="line">        <span class="string">'django.request'</span>: &#123;</span><br><span class="line">            <span class="string">'handlers'</span>: [<span class="string">'console'</span>, <span class="string">'null'</span>],</span><br><span class="line">            <span class="string">'level'</span>: <span class="string">'ERROR'</span>,</span><br><span class="line">            <span class="string">'propagate'</span>: True,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'rsyslog'</span>: &#123;</span><br><span class="line">            <span class="string">'handlers'</span>: [<span class="string">'syslog'</span>, ],</span><br><span class="line">            <span class="string">'level'</span>: <span class="string">'INFO'</span>,</span><br><span class="line">            <span class="string">'propagate'</span>: True,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="在view或其他地方调用，将日志打到rsyslog"><a href="#在view或其他地方调用，将日志打到rsyslog" class="headerlink" title="在view或其他地方调用，将日志打到rsyslog"></a>在view或其他地方调用，将日志打到rsyslog</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   rsysloger = logging.getLogger(<span class="string">'rsyslog'</span>)</span><br><span class="line">   rsysloger.info(<span class="string">'sdsdsdsds'</span>)</span><br><span class="line"><span class="comment"># 之后你可以去/var/log/mylog/forum.log 看结果了</span></span><br></pre></td></tr></table></figure>
<h2 id="利用sentry收集Django日志"><a href="#利用sentry收集Django日志" class="headerlink" title="利用sentry收集Django日志"></a><a href="https://www.yunsonbai.top/2016/05/30/django-sentry/" target="_blank" rel="noopener">利用sentry收集Django日志</a></h2>]]></content>
      
        <categories>
            
            <category> django </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Django rsyslog </tag>
            
            <tag> 使用rsyslog收集Django的日志 - Django - rsyslog - 日志收集 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[富文本实践]]></title>
      <url>http://yunsonbai.github.io/2016/06/08/summernote/</url>
      <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">前段时间趁着项目不忙自己玩了一下富文本，在html页实现富文本。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="使用的js包"><a href="#使用的js包" class="headerlink" title="使用的js包"></a>使用的js包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">summernote</span><br></pre></td></tr></table></figure>
<h3 id="html代码"><a href="#html代码" class="headerlink" title="html代码"></a>html代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">   &lt;html&gt;</span><br><span class="line">   &lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span><br><span class="line">   &lt;head&gt;</span><br><span class="line">   &lt;link href=<span class="string">"../bootstrap-3.3.5/css/bootstrap.css"</span> rel=<span class="string">"stylesheet"</span>&gt;</span><br><span class="line">   &lt;link href=<span class="string">"font-awesome-4.5.0/css/font-awesome.css"</span> rel=<span class="string">"stylesheet"</span>&gt;</span><br><span class="line">   &lt;link href=<span class="string">"summernote/dist/summernote.css"</span> rel=<span class="string">"stylesheet"</span>&gt;</span><br><span class="line">   &lt;script src=<span class="string">"../jquery-2.1.4.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">   &lt;script src=<span class="string">"../bootstrap-3.3.5/js/bootstrap.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">   &lt;script src=<span class="string">"summernote/dist/summernote.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">   &lt;script src=<span class="string">"mysummer.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">   &lt;script src=<span class="string">"mysummer.css"</span>&gt;&lt;/script&gt;</span><br><span class="line">   &lt;/head&gt;</span><br><span class="line">   &lt;body&gt;</span><br><span class="line">     &lt;div id=<span class="string">"summernote"</span>&gt;Hello Summernote&lt;/div&gt;</span><br><span class="line">     &lt;span onclick=<span class="string">'getContext(this)'</span>&gt;预览&lt;/span&gt;</span><br><span class="line">   </span><br><span class="line">     &lt;div id=<span class="string">"context"</span>&gt;&lt;/div&gt;</span><br><span class="line">    </span><br><span class="line">   &lt;/body&gt;</span><br><span class="line">   &lt;/html&gt;</span><br></pre></td></tr></table></figure>
<h3 id="mysummer-js代码"><a href="#mysummer-js代码" class="headerlink" title="mysummer.js代码"></a>mysummer.js代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">$(document).ready(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">  $(<span class="string">'#summernote'</span>).summernote(&#123;</span><br><span class="line">        toolbar: [</span><br><span class="line">            [<span class="string">'style'</span>, [<span class="string">'style'</span>,<span class="string">'fontname'</span>, <span class="string">'bold'</span>, <span class="string">'italic'</span>, <span class="string">'underline'</span>,<span class="string">'fontsize'</span>,<span class="string">'color'</span>]],</span><br><span class="line">            [<span class="string">'font'</span>, [<span class="string">'strikethrough'</span>, <span class="string">'superscript'</span>, <span class="string">'subscript'</span>]],</span><br><span class="line">            [<span class="string">'para'</span>, [<span class="string">'ul'</span>, <span class="string">'ol'</span>, <span class="string">'paragraph'</span>]],</span><br><span class="line">            [<span class="string">'insert'</span>, [<span class="string">'link'</span>, <span class="string">'picture'</span>, <span class="string">'table'</span>, <span class="string">'hr'</span>]],</span><br><span class="line">            [<span class="string">'height'</span>, [<span class="string">'height'</span>]],</span><br><span class="line">            [<span class="string">'misc'</span>, [<span class="string">'redo'</span>,<span class="string">'undo'</span>,<span class="string">'help'</span>, <span class="string">'fullscreen'</span>]],</span><br><span class="line">            // [<span class="string">'view'</span>, [<span class="string">'codeview'</span>]],</span><br><span class="line">      ]</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> getContext(obj)&#123;</span><br><span class="line">     $(document).ready(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">          var code = $(<span class="string">'#summernote'</span>).summernote(<span class="string">'code'</span>);</span><br><span class="line">          var context = document.getElementById(<span class="string">'context'</span>);</span><br><span class="line">          context.innerHTML=code;</span><br><span class="line"></span><br><span class="line">          var data = &#123;<span class="string">"code"</span>:$(<span class="string">'#summernote'</span>).summernote(<span class="string">'code'</span>)&#125;;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url: <span class="string">'/whatdo/test'</span>,</span><br><span class="line">            <span class="built_in">type</span>: <span class="string">'POST'</span>,</span><br><span class="line">            data: data,</span><br><span class="line">            dataType: <span class="string">'json'</span>,</span><br><span class="line">            success: <span class="keyword">function</span>(data,status)&#123;</span><br><span class="line">                 alert(data.status)</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">     &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="mysummer-css代码"><a href="#mysummer-css代码" class="headerlink" title="mysummer.css代码"></a>mysummer.css代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#summernote'</span>).summernote(&#123;</span><br><span class="line"> /*  height: 700,*/</span><br><span class="line">   minHeight: null,</span><br><span class="line">   maxHeight: null,</span><br><span class="line">   focus: <span class="literal">true</span></span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure>
<h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><img src="https://yunsonbai.github.io/images/article_img/summernote.jpg">
]]></content>
      
        <categories>
            
            <category> html </category>
            
        </categories>
        
        
        <tags>
            
            <tag> html </tag>
            
            <tag> 富文本 </tag>
            
            <tag> summernote </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[利用sentry收集django的日志]]></title>
      <url>http://yunsonbai.github.io/2016/05/30/django-sentry/</url>
      <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">日志收集对项目很重要,利用sentry可以手机django程序运行时的日志,同时适当的配置还能发送报警邮件</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="搭建sentry环境"><a href="#搭建sentry环境" class="headerlink" title="搭建sentry环境"></a>搭建sentry环境</h2><h3 id="创建独立环境"><a href="#创建独立环境" class="headerlink" title="创建独立环境"></a>创建独立环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">virtualenv sentry</span><br><span class="line">安装好MySQL 和 redis</span><br></pre></td></tr></table></figure>
<h3 id="安装sentry"><a href="#安装sentry" class="headerlink" title="安装sentry"></a>安装sentry</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install sentry</span><br></pre></td></tr></table></figure>
<h3 id="配置-env-sentry-conf-sentry-conf-py"><a href="#配置-env-sentry-conf-sentry-conf-py" class="headerlink" title="配置(/env/sentry/conf/sentry.conf.py)"></a>配置(/env/sentry/conf/sentry.conf.py)</h3><h4 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'sentry'</span>,</span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'root'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">'123456'</span>,</span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">        <span class="string">'PORT'</span>: <span class="string">'3306'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="redis配置"><a href="#redis配置" class="headerlink" title="redis配置"></a>redis配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SENTRY_REDIS_OPTIONS = &#123;</span><br><span class="line">    <span class="string">'hosts'</span>: &#123;</span><br><span class="line">        0: &#123;</span><br><span class="line">            <span class="string">'host'</span>: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">            <span class="string">'port'</span>: 6379,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">CELERY_ALWAYS_EAGER = False</span><br><span class="line">BROKER_URL = <span class="string">'redis://localhost:6379/2'</span></span><br></pre></td></tr></table></figure>
<h4 id="端口配置"><a href="#端口配置" class="headerlink" title="端口配置"></a>端口配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SENTRY_URL_PREFIX = <span class="string">'http://127.0.0.1:9000'</span></span><br><span class="line">SENTRY_WEB_HOST = <span class="string">'0.0.0.0'</span></span><br><span class="line">SENTRY_WEB_PORT = 9000</span><br><span class="line">SENTRY_WEB_OPTIONS = &#123;</span><br><span class="line">    <span class="comment"># 'workers': 3,  # the number of gunicorn workers</span></span><br><span class="line">    <span class="comment"># 'secure_scheme_headers': &#123;'X-FORWARDED-PROTO': 'https'&#125;,</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="语言配置"><a href="#语言配置" class="headerlink" title="语言配置"></a>语言配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LANGUAGES = (</span><br><span class="line">    (<span class="string">'en'</span>, gettext_noop(<span class="string">'English'</span>)),</span><br><span class="line">    (<span class="string">'zh-cn'</span>, gettext_noop(<span class="string">'Simplified Chinese'</span>)),</span><br><span class="line">    <span class="comment"># ('zh-cn', gettext_noop('Traditional Chinese')),</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h4 id="邮箱配置"><a href="#邮箱配置" class="headerlink" title="邮箱配置"></a>邮箱配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">EMAIL_BACKEND = <span class="string">'django.core.mail.backends.smtp.EmailBackend'</span></span><br><span class="line">EMAIL_HOST = <span class="string">'mail.test.com'</span></span><br><span class="line">EMAIL_HOST_PASSWORD = <span class="string">'xxxxxx'</span></span><br><span class="line">EMAIL_HOST_USER = <span class="string">'xxxx@test.com'</span></span><br><span class="line">EMAIL_PORT = xx</span><br><span class="line"><span class="comment"># EMAIL_USE_TLS = False</span></span><br><span class="line"><span class="comment"># The email address to send on behalf of</span></span><br><span class="line">SERVER_EMAIL = <span class="string">'xxxx@test.com'</span></span><br></pre></td></tr></table></figure>
<h2 id="建立django项目并使用sentry"><a href="#建立django项目并使用sentry" class="headerlink" title="建立django项目并使用sentry"></a>建立django项目并使用sentry</h2><h3 id="建立"><a href="#建立" class="headerlink" title="建立"></a>建立</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django-admin startproject test_sentry</span><br></pre></td></tr></table></figure>
<h3 id="配置修改"><a href="#配置修改" class="headerlink" title="配置修改"></a>配置修改</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = (</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    <span class="string">'raven.contrib.django.raven_compat'</span>,</span><br><span class="line">)</span><br><span class="line"><span class="comment"># sentry</span></span><br><span class="line">RAVEN_CONFIG = &#123;</span><br><span class="line">    <span class="string">'dsn'</span>: <span class="string">'http://0e084efb47d24bedb60d24bedb6abd95ed7:d92981b0d24bedb6abd92981b05d7@xx.xx.xx.xx:9000/1'</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="触发"><a href="#触发" class="headerlink" title="触发"></a>触发</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">故意让程序出错就OK了</span><br></pre></td></tr></table></figure>
<h3 id="收集info日志"><a href="#收集info日志" class="headerlink" title="收集info日志"></a>收集info日志</h3><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">LOGGING = &#123;</span><br><span class="line">    &apos;version&apos;: 1,</span><br><span class="line">    &apos;disable_existing_loggers&apos;: False,</span><br><span class="line">    &apos;formatters&apos;: &#123;</span><br><span class="line">        &apos;verbose&apos;: &#123;</span><br><span class="line">            &apos;format&apos;: &quot;INK|%(levelname)s|%(asctime)s|%(module)s|%(process)d|%(thread)d|%(message)s&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &apos;handlers&apos;: &#123;</span><br><span class="line">        &apos;console&apos;: &#123;</span><br><span class="line">            &apos;level&apos;: &apos;DEBUG&apos;,</span><br><span class="line">            &apos;class&apos;: &apos;logging.StreamHandler&apos;,</span><br><span class="line">            &apos;formatter&apos;: &apos;verbose&apos;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &apos;info&apos;: &#123;</span><br><span class="line">            &apos;level&apos;: &apos;INFO&apos;,</span><br><span class="line">            &apos;formatter&apos;: &apos;verbose&apos;,  # 使用哪种formatters日志格式</span><br><span class="line">            &apos;class&apos;: &apos;raven.contrib.django.raven_compat.handlers.SentryHandler&apos;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &apos;loggers&apos;: &#123;</span><br><span class="line">        &apos;django.request&apos;: &#123;</span><br><span class="line">            &apos;handlers&apos;: [&apos;console&apos;],</span><br><span class="line">            &apos;level&apos;: &apos;DEBUG&apos;,</span><br><span class="line">            &apos;propagate&apos;: True,</span><br><span class="line">        &#125;,</span><br><span class="line">        &apos;info&apos;: &#123;</span><br><span class="line">            &apos;handlers&apos;: [&apos;info&apos;, ],</span><br><span class="line">            &apos;level&apos;: &apos;INFO&apos;,</span><br><span class="line">            &apos;propagate&apos;: True,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line">logger = logging.getLogger(&apos;info&apos;)</span><br><span class="line"></span><br><span class="line">logger.info(&apos;test&apos;)</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> django </category>
            
        </categories>
        
        
        <tags>
            
            <tag> django </tag>
            
            <tag> sentry </tag>
            
            <tag> django sentry </tag>
            
            <tag> 日志收集 </tag>
            
            <tag> 邮件发送报错日志 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python 装饰器]]></title>
      <url>http://yunsonbai.github.io/2016/05/26/decorator/</url>
      <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python的装饰器用途非常多，例如鉴权，重要参数前期验证等等，主要用于在进入方法以前做前期工作，</span><br><span class="line">下边举例针对类方法和函数</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="类方法修饰器"><a href="#类方法修饰器" class="headerlink" title="类方法修饰器"></a>类方法修饰器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from functools import wraps</span><br><span class="line"></span><br><span class="line">def create_user(func):</span><br><span class="line">@wraps(func)</span><br><span class="line">def _warp(self, *args, **kwargs):</span><br><span class="line">        <span class="comment"># 这里写你的方法</span></span><br><span class="line">        pass</span><br><span class="line">        <span class="built_in">return</span> Response(context)</span><br><span class="line">    <span class="built_in">return</span> func(self, *args, **kwargs)</span><br><span class="line"><span class="built_in">return</span> _warp</span><br></pre></td></tr></table></figure>
<h3 id="函数修饰器"><a href="#函数修饰器" class="headerlink" title="函数修饰器"></a>函数修饰器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">和类方法修饰器不通的是没有self</span><br><span class="line">from functools import wraps</span><br><span class="line"></span><br><span class="line">def create_user(func):</span><br><span class="line">@wraps(func)</span><br><span class="line">def _warp(*args, **kwargs):</span><br><span class="line">        <span class="comment"># 这里写你的方法</span></span><br><span class="line">        pass</span><br><span class="line">        <span class="built_in">return</span> Response(context)</span><br><span class="line">    <span class="built_in">return</span> func(*args, **kwargs)</span><br><span class="line"><span class="built_in">return</span> _warp</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python decorator </tag>
            
            <tag> python </tag>
            
            <tag> 装饰器 </tag>
            
            <tag> 类方法装饰器 </tag>
            
            <tag> decorator </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python+mqtt实现推送]]></title>
      <url>http://yunsonbai.github.io/2016/05/24/mqtt-python/</url>
      <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">前段时间趁着空闲时间研究了一下mqtt,自己用python简单的实现了一下,希望日后能用上</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="安装mosquitto并使用命令行"><a href="#安装mosquitto并使用命令行" class="headerlink" title="安装mosquitto并使用命令行"></a>安装mosquitto并使用命令行</h2><h3 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python2.7</span><br><span class="line">paho-mqtt 1.1</span><br></pre></td></tr></table></figure>
<h3 id="安装安装mosquitto"><a href="#安装安装mosquitto" class="headerlink" title="安装安装mosquitto"></a>安装安装mosquitto</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-add-repository ppa:mosquitto-dev/mosquitto-ppa</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install mosquitto mosquitto-clients python-mosquitto</span><br><span class="line">或者：</span><br><span class="line">     apt-get install mosquitto</span><br></pre></td></tr></table></figure>
<h3 id="安装paho-mqtt"><a href="#安装paho-mqtt" class="headerlink" title="安装paho-mqtt"></a>安装paho-mqtt</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pypi上有这个库，可以自行安装</span><br></pre></td></tr></table></figure>
<h3 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">启动命令: /usr/sbin/mosquitto -c /etc/mosquitto/mosquitto.conf</span><br><span class="line">server：mosquitto_pub -t baiyunsong -h 127.0.0.1 -m <span class="string">"&#123;\"pin\":17,\"value\":0&#125;"</span></span><br><span class="line">client：mosquitto_sub -v -t baiyunsong -h 127.0.0.1    （先启动）</span><br></pre></td></tr></table></figure>
<h2 id="python代码"><a href="#python代码" class="headerlink" title="python代码"></a>python代码</h2><h3 id="server端"><a href="#server端" class="headerlink" title="server端"></a>server端</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># import paho.mqtt.client as mqtt</span></span><br><span class="line">from paho.mqtt.publish import mqtt</span><br><span class="line">import json</span><br><span class="line">mqttc = mqtt.Client()</span><br><span class="line">mqttc.connect(<span class="string">'127.0.0.1'</span>, port=1883)</span><br><span class="line">msg = &#123;</span><br><span class="line">    <span class="string">'pin'</span>: 17,</span><br><span class="line">    <span class="string">'value'</span>: 10</span><br><span class="line">&#125;</span><br><span class="line">msg = json.dumps(msg)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> mqttc.publish(<span class="string">'baisong'</span>, payload=msg)</span><br><span class="line">mqttc.loop(2)</span><br></pre></td></tr></table></figure>
<h3 id="client-端"><a href="#client-端" class="headerlink" title="client 端"></a>client 端</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line">import paho.mqtt.client as mqtt</span><br><span class="line">import json</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">def on_connect(client, userdata, flags, rc):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'Connected with result code '</span> + str(rc))</span><br><span class="line">    client.subscribe(<span class="string">'baisong'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def on_message(client, userdata, msg):</span><br><span class="line">    <span class="built_in">print</span> msg.topic + <span class="string">' '</span> + str(msg.payload)</span><br><span class="line">    <span class="built_in">print</span> json.loads(msg.payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    client = mqtt.Client()</span><br><span class="line">    client.on_connect = on_connect</span><br><span class="line">    client.on_message = on_message</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        client.connect(<span class="string">'127.0.0.1'</span>, port=1883)</span><br><span class="line">        client.loop_forever()</span><br><span class="line">    except KeyboardInterrupt:</span><br><span class="line">        client.disconnect()</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
            <tag> mqtt </tag>
            
            <tag> 推送 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[创建自己的pypi库]]></title>
      <url>http://yunsonbai.github.io/2016/05/23/pypi%E5%BA%93/</url>
      <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在做项目的时候你会发现有好多重复性的工作在做着，如果我们能抽出公共部分的话那样你的工作就会事半功倍，那抽出</span><br><span class="line">来的公共部分就需要存放在自己的pypi库（也不排除你还有其他的办法）</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="搭建服务端"><a href="#搭建服务端" class="headerlink" title="搭建服务端"></a>搭建服务端</h2><h3 id="创建环境"><a href="#创建环境" class="headerlink" title="创建环境"></a>创建环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如果你不想混乱自己的环境可以利用virtualenv</span><br><span class="line">virtualenv3.5 pypi</span><br></pre></td></tr></table></figure>
<h3 id="安装需要的库"><a href="#安装需要的库" class="headerlink" title="安装需要的库"></a>安装需要的库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install apache2-utils</span><br><span class="line">pip install pypiserver</span><br><span class="line">pip install passlib</span><br></pre></td></tr></table></figure>
<h3 id="创建packages文件夹和配置文件-htaccess"><a href="#创建packages文件夹和配置文件-htaccess" class="headerlink" title="创建packages文件夹和配置文件.htaccess"></a>创建packages文件夹和配置文件.htaccess</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir packages</span><br><span class="line">htpasswd -sc .htaccess user（之后输入密码，例如123456）</span><br></pre></td></tr></table></figure>
<h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pypi-server -p 3141 -P ./.htaccess ./packages</span><br></pre></td></tr></table></figure>
<h2 id="客户端上传公共库"><a href="#客户端上传公共库" class="headerlink" title="客户端上传公共库"></a>客户端上传公共库</h2><h3 id="在用户根目录下添加配置文件-pypirc"><a href="#在用户根目录下添加配置文件-pypirc" class="headerlink" title="在用户根目录下添加配置文件.pypirc"></a>在用户根目录下添加配置文件.pypirc</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">比如你是root用户：</span><br><span class="line">    <span class="built_in">cd</span></span><br><span class="line">    vim .pypirc</span><br><span class="line">    加入内容如下：（distutils处一定要换行）</span><br><span class="line">    [distutils]</span><br><span class="line">    index-servers =</span><br><span class="line">      <span class="built_in">local</span></span><br><span class="line"></span><br><span class="line">    [<span class="built_in">local</span>]</span><br><span class="line">    repository:http://xx.xx.xx.xx:3141</span><br><span class="line">    username:user</span><br><span class="line">    password:123456</span><br></pre></td></tr></table></figure>
<h3 id="上传包"><a href="#上传包" class="headerlink" title="上传包"></a>上传包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python setup.py sdist upload -r <span class="built_in">local</span></span><br></pre></td></tr></table></figure>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -i http://localhost:3134/simple/ some-package</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
            <tag> pypi库 </tag>
            
            <tag> 创建自己的pypi库 </tag>
            
            <tag> pypiserver </tag>
            
            <tag> pypi-server </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[对redis命令incr的并发探索]]></title>
      <url>http://yunsonbai.github.io/2016/05/20/redis-incr/</url>
      <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">某个项目想利用redis实现业务锁,比如抽奖只允许被抽中一次, 那么在并发的情况下一定是要锁的,我们用django模</span><br><span class="line">拟每次去redis查询yunson对应的num完后，给num加1</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">双核，三个端口，nginx做代理（每个权重都为一样）</span><br></pre></td></tr></table></figure>
<h3 id="使用hset"><a href="#使用hset" class="headerlink" title="使用hset"></a>使用hset</h3><h4 id="redis数据结构"><a href="#redis数据结构" class="headerlink" title="redis数据结构"></a>redis数据结构</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yunson---&#123;<span class="string">'num'</span>:100&#125;（json格式）</span><br></pre></td></tr></table></figure>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class MR(APIView):</span><br><span class="line">    def get(self, request):</span><br><span class="line">        REDIS_CONF = &#123;</span><br><span class="line">            <span class="string">'host'</span>: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">            <span class="string">'port'</span>: 6379,</span><br><span class="line">            <span class="string">'db'</span>: 10,</span><br><span class="line">            <span class="string">'password'</span>: <span class="string">''</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        r = redis.Redis(connection_pool=redis.ConnectionPool(**REDIS_CONF))</span><br><span class="line">        yunson = json.loads(r.hget(<span class="string">'test'</span>, <span class="string">'yunson'</span>))</span><br><span class="line">        num = yunson[<span class="string">'num'</span>]</span><br><span class="line">        yunson[<span class="string">'num'</span>] += 1</span><br><span class="line">        yunson = json.dumps(yunson)</span><br><span class="line">        r.hset(<span class="string">'test'</span>, <span class="string">'yunson'</span>, yunson)</span><br><span class="line">        logger = Logger(str(<span class="string">'JS_DJANGO'</span>))</span><br><span class="line">        logger.info(str(num))</span><br><span class="line">        <span class="built_in">return</span> Response(REDIS_CONF)</span><br></pre></td></tr></table></figure>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ab -n 1200 -c 400 http://127.0.0.1/mr</span><br></pre></td></tr></table></figure>
<h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">This is ApacheBench, Version 2.3 &lt;<span class="variable">$Revision</span>: 655654 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking 127.0.0.1 (be patient)</span><br><span class="line">Completed 120 requests</span><br><span class="line">Completed 240 requests</span><br><span class="line">Completed 360 requests</span><br><span class="line">Completed 480 requests</span><br><span class="line">Completed 600 requests</span><br><span class="line">Completed 720 requests</span><br><span class="line">Completed 840 requests</span><br><span class="line">Completed 960 requests</span><br><span class="line">Completed 1080 requests</span><br><span class="line">Completed 1200 requests</span><br><span class="line">Finished 1200 requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Document Path:          /mr</span><br><span class="line">Document Length:        54 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      400</span><br><span class="line">Time taken <span class="keyword">for</span> tests:   17.807 seconds</span><br><span class="line">Complete requests:      1200</span><br><span class="line">Failed requests:        182</span><br><span class="line">   (Connect: 0, Receive: 0, Length: 182, Exceptions: 0)</span><br><span class="line">Write errors:           0</span><br><span class="line">Non-2xx responses:      182</span><br><span class="line">Total transferred:      324848 bytes</span><br><span class="line">HTML transferred:       86458 bytes</span><br><span class="line">Requests per second:    67.39 [<span class="comment">#/sec] (mean)</span></span><br><span class="line">Time per request:       5935.669 [ms] (mean)</span><br><span class="line">Time per request:       14.839 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          17.82 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">redis结果：</span><br><span class="line">    &#123;<span class="string">"num"</span>: 616&#125;  差出：1200-182-616 = 402   </span><br><span class="line">    打日志时：根据日志分析发现除服率相当高上大几十（当然没看全，一看这样头就大</span><br><span class="line">    (你咋算的：</span><br><span class="line">        Complete requests:      1200</span><br><span class="line">        Failed requests:        182)</span><br></pre></td></tr></table></figure>
<h3 id="优化使用incr"><a href="#优化使用incr" class="headerlink" title="优化使用incr"></a>优化使用incr</h3><h4 id="redis数据结构-1"><a href="#redis数据结构-1" class="headerlink" title="redis数据结构"></a>redis数据结构</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yunson---0</span><br></pre></td></tr></table></figure>
<h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class MR(APIView):</span><br><span class="line">    def get(self, request):</span><br><span class="line">        REDIS_CONF = &#123;</span><br><span class="line">            <span class="string">'host'</span>: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">            <span class="string">'port'</span>: 6379,</span><br><span class="line">            <span class="string">'db'</span>: 10,</span><br><span class="line">            <span class="string">'password'</span>: <span class="string">''</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        r = redis.Redis(connection_pool=redis.ConnectionPool(**REDIS_CONF))</span><br><span class="line">        try:</span><br><span class="line">            logger = Logger(str(<span class="string">'JS_DJANGO'</span>))</span><br><span class="line">            <span class="keyword">if</span> not r.get(<span class="string">'yunson'</span>):</span><br><span class="line">                yunson = r.incr(<span class="string">'yunson'</span>)</span><br><span class="line">                r.set(<span class="string">'yunson '</span>, yunson , ex=60)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                yunson= r.incr(<span class="string">'baisong'</span>)</span><br><span class="line">            logger.info(str(yunson))</span><br><span class="line">        except Exception, e:</span><br><span class="line">            <span class="built_in">print</span> Exception, e</span><br><span class="line">        <span class="built_in">return</span> Response(REDIS_CONF)</span><br></pre></td></tr></table></figure>
<h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ab -n 1200 -c 400 http://127.0.0.1/mr</span><br></pre></td></tr></table></figure>
<h4 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">This is ApacheBench, Version 2.3 &lt;<span class="variable">$Revision</span>: 655654 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking 127.0.0.1 (be patient)</span><br><span class="line">Completed 120 requests</span><br><span class="line">Completed 240 requests</span><br><span class="line">Completed 360 requests</span><br><span class="line">Completed 480 requests</span><br><span class="line">Completed 600 requests</span><br><span class="line">Completed 720 requests</span><br><span class="line">Completed 840 requests</span><br><span class="line">Completed 960 requests</span><br><span class="line">Completed 1080 requests</span><br><span class="line">Completed 1200 requests</span><br><span class="line">Finished 1200 requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:        nginx/1.1.19</span><br><span class="line">Server Hostname:        127.0.0.1</span><br><span class="line">Server Port:            80</span><br><span class="line"></span><br><span class="line">Document Path:          /mr</span><br><span class="line">Document Length:        54 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      400</span><br><span class="line">Time taken <span class="keyword">for</span> tests:   17.311 seconds</span><br><span class="line">Complete requests:      1200</span><br><span class="line">Failed requests:        0</span><br><span class="line">Write errors:           0</span><br><span class="line">Total transferred:      313200 bytes</span><br><span class="line">HTML transferred:       64800 bytes</span><br><span class="line">Requests per second:    69.32 [<span class="comment">#/sec] (mean)</span></span><br><span class="line">Time per request:       5770.450 [ms] (mean)</span><br><span class="line">Time per request:       14.426 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          17.67 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">redis结果：</span><br><span class="line">    yunson---1200</span><br><span class="line">    分毫不差</span><br></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在业务逻辑控制锁的时候，尤其是在并发的时候可以考虑利用redis的这个机制，当然用数据库</span><br><span class="line">的锁也可以（同时数据库的锁更为灵活），但是如果只是类似于这种计数机制，可以尝试用redis</span><br><span class="line">毕竟redis是操作内存，速度上要快些</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> redis </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
            <tag> redis </tag>
            
            <tag> incr </tag>
            
            <tag> 并发 </tag>
            
            <tag> 业务锁 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python2 到 Python3 项目迁移]]></title>
      <url>http://yunsonbai.github.io/2016/05/20/python2%E5%88%B03/</url>
      <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">目前项目组逐步将项目迁移到python3，下边说一下在迁移的过程中遇到的一些问题和注意事项</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="安装python3"><a href="#安装python3" class="headerlink" title="安装python3"></a>安装python3</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">起初我采用的是如下编译方式：</span><br><span class="line">    $ ./configure --prefix=/usr/<span class="built_in">local</span>/python3.5/</span><br><span class="line">    make install</span><br><span class="line">好景不长，收到了如下错误：</span><br><span class="line">    $ No module named _sqlite3</span><br><span class="line">解决办法：</span><br><span class="line">    $ yum -y install sqlite-devel</span><br><span class="line">    $ ./configure --<span class="built_in">enable</span>-loadable-sqlite-extensions --prefix=/usr/<span class="built_in">local</span>/python3.5/</span><br><span class="line">    $ make install</span><br></pre></td></tr></table></figure>
<h2 id="迁移中需要注意的点"><a href="#迁移中需要注意的点" class="headerlink" title="迁移中需要注意的点"></a>迁移中需要注意的点</h2><h3 id="urllib2改变"><a href="#urllib2改变" class="headerlink" title="urllib2改变"></a>urllib2改变</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python2.7：</span><br><span class="line">    avatar_img = urllib2.urlopen(avatar_url).<span class="built_in">read</span>()</span><br><span class="line">python3.5：</span><br><span class="line">    import urllib.request</span><br><span class="line">    avatar_img = urllib.request.urlopen(avatar_url).<span class="built_in">read</span>()</span><br></pre></td></tr></table></figure>
<h3 id="redis配置改变"><a href="#redis配置改变" class="headerlink" title="redis配置改变"></a>redis配置改变</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">redis_conf = &#123;</span><br><span class="line">    <span class="string">'host'</span>: ip,</span><br><span class="line">    <span class="string">'port'</span>: port,</span><br><span class="line">    <span class="string">'db'</span>: 1,</span><br><span class="line">    <span class="string">'password'</span>: password,</span><br><span class="line">    <span class="string">'socket_timeout'</span>: None,</span><br><span class="line">    <span class="string">'encoding'</span>: <span class="string">'utf-8'</span>,</span><br><span class="line">    <span class="string">'encoding_errors'</span>: <span class="string">'strict'</span>,</span><br><span class="line">    <span class="string">'decode_responses'</span>: True    此处要注意</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="CStringIO与StringIO不能再用"><a href="#CStringIO与StringIO不能再用" class="headerlink" title="CStringIO与StringIO不能再用"></a>CStringIO与StringIO不能再用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">io.BytesIO</span><br><span class="line">io.StringIO</span><br></pre></td></tr></table></figure>
<h3 id="try和except的改变"><a href="#try和except的改变" class="headerlink" title="try和except的改变"></a>try和except的改变</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">python2.7：</span><br><span class="line">    try:</span><br><span class="line">        pass</span><br><span class="line">    except Exception, e:</span><br><span class="line">        pass</span><br><span class="line">python3.5:</span><br><span class="line">    try：</span><br><span class="line">        pass</span><br><span class="line">    except Exception as e:</span><br><span class="line">        pass</span><br></pre></td></tr></table></figure>
<h3 id="默认Image取消"><a href="#默认Image取消" class="headerlink" title="默认Image取消"></a>默认Image取消</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python2.7：</span><br><span class="line">    支持：import Image</span><br><span class="line">python3.5：</span><br><span class="line">    pip3.5 install Pillow</span><br><span class="line">    from PIL import Image</span><br></pre></td></tr></table></figure>
<h3 id="hash操作必须encode"><a href="#hash操作必须encode" class="headerlink" title="hash操作必须encode"></a>hash操作必须encode</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sig_str = sig_string + appkey</span><br><span class="line">sig_str = sig_str.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">sig_md5 = hashlib.md5()</span><br><span class="line">sig_md5.update(sig_str)</span><br></pre></td></tr></table></figure>
<h3 id="xrange取消"><a href="#xrange取消" class="headerlink" title="xrange取消"></a>xrange取消</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">由range代替</span><br></pre></td></tr></table></figure>
<h3 id="startwith第一个参数必须是bytes或者bytes组成的tuple"><a href="#startwith第一个参数必须是bytes或者bytes组成的tuple" class="headerlink" title="startwith第一个参数必须是bytes或者bytes组成的tuple"></a>startwith第一个参数必须是bytes或者bytes组成的tuple</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startwith(b&apos;GIF89&apos;)(python3.5强制加b)</span><br></pre></td></tr></table></figure>
<h3 id="raw-input-改成input"><a href="#raw-input-改成input" class="headerlink" title="raw_input()改成input()"></a>raw_input()改成input()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python2.7：</span><br><span class="line">    a = raw_input(input a:)</span><br><span class="line">python3.5:</span><br><span class="line">    a = input(&apos;input a:&apos;)</span><br></pre></td></tr></table></figure>
<h3 id="有人可能用supervisor"><a href="#有人可能用supervisor" class="headerlink" title="有人可能用supervisor"></a>有人可能用supervisor</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">目前supervisor不支持python3，</span><br><span class="line">但是git上已久supervisor4，支持python3，</span><br><span class="line">我想不就得将来supervisor马上也就能在python3上使用了</span><br></pre></td></tr></table></figure>
<h3 id="python与yum"><a href="#python与yum" class="headerlink" title="python与yum"></a>python与yum</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">建议不要将python3软连在/usr/bin/python上，这样有可能导</span><br><span class="line">yum不能使用，</span><br><span class="line">如果非要这样软连，你需要修改：</span><br><span class="line">/usr/bin/yum</span><br><span class="line">    #!/usr/bin/python</span><br><span class="line">    改成：</span><br><span class="line">    #!/usr/bin/python2.7</span><br></pre></td></tr></table></figure>
<h3 id="提示bytes-like-object-is-required-not-‘str’"><a href="#提示bytes-like-object-is-required-not-‘str’" class="headerlink" title="提示bytes-like object is required, not ‘str’"></a>提示bytes-like object is required, not ‘str’</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">解决办法：</span><br><span class="line">    1、加b</span><br><span class="line">    2、encode(&apos;utf-8&apos;)</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python2到3项目迁移 </tag>
            
            <tag> python2 </tag>
            
            <tag> python3 </tag>
            
            <tag> 迁移 </tag>
            
            <tag> 不同点 </tag>
            
            <tag> python项目迁移 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git常用命令]]></title>
      <url>http://yunsonbai.github.io/2016/05/19/git/</url>
      <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git可以说已经渗入到大部分互联网企业,下边记录一下在工作的这段时间用到的命令</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -r -d origin/branch-name</span><br><span class="line">git push origin :branch-name</span><br></pre></td></tr></table></figure>
<h3 id="创建本地-push到远端分支"><a href="#创建本地-push到远端分支" class="headerlink" title="创建本地/push到远端分支"></a>创建本地/push到远端分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch dev</span><br><span class="line">git checkout dev</span><br><span class="line">git push origin dev</span><br></pre></td></tr></table></figure>
<h3 id="删除本地分支"><a href="#删除本地分支" class="headerlink" title="删除本地分支"></a>删除本地分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git branch 分支名称 -d</span><br><span class="line">例如，在master分支下，删除新开的dev分支：</span><br><span class="line">git branch dev -d</span><br><span class="line">注意：如果dev的更改，push到远程，在GitLab(或者其他git系统)上面进行了merge操作，但是本地master没有pull最新的代码，会删除不成功，可以先git pull origin master，或者强制删除</span><br><span class="line">git branch dev -D</span><br></pre></td></tr></table></figure>
<h3 id="创建tag号并push到远端"><a href="#创建tag号并push到远端" class="headerlink" title="创建tag号并push到远端"></a>创建tag号并push到远端</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git tag -a v1.01 -m <span class="string">"Relase version 1.01"</span></span><br><span class="line">git push origin -tags(提交全部tag)</span><br><span class="line">或者：</span><br><span class="line">git tag -a v1.01 -m <span class="string">"Relase version 1.01"</span></span><br><span class="line">git push origin v1.01</span><br></pre></td></tr></table></figure>
<h3 id="删除远端tag号"><a href="#删除远端tag号" class="headerlink" title="删除远端tag号"></a>删除远端tag号</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag -d v1.01</span><br><span class="line">git push origin :refs/tags/v1.01</span><br></pre></td></tr></table></figure>
<h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git merge 需要合并的分支名</span><br><span class="line">例如，刚刚已经切换回master，现在需要合并dev的内容：</span><br><span class="line">git merge dev</span><br><span class="line">建议在GitLab(或者其他git系统)上面创建merge request的形式来进行分支的合并和代码审核</span><br></pre></td></tr></table></figure>
<h3 id="status"><a href="#status" class="headerlink" title="status"></a>status</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">查看发生变动的文件</span><br><span class="line">git status</span><br></pre></td></tr></table></figure>
<h3 id="与远程保持同步"><a href="#与远程保持同步" class="headerlink" title="与远程保持同步"></a>与远程保持同步</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin</span><br><span class="line">git rebase origin/master</span><br></pre></td></tr></table></figure>
<h3 id="追踪远程分支"><a href="#追踪远程分支" class="headerlink" title="追踪远程分支"></a>追踪远程分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -vv</span><br></pre></td></tr></table></figure>
<h3 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard f46821f94eeb106ea841b9fbafa4bfb76beea691 </span><br><span class="line">(f46821f94eeb106ea841b9fbafa4bfb76beea691为commit编号)</span><br></pre></td></tr></table></figure>
<h3 id="查看commit编号"><a href="#查看commit编号" class="headerlink" title="查看commit编号"></a>查看commit编号</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure>
<h3 id="显示不通"><a href="#显示不通" class="headerlink" title="显示不通"></a>显示不通</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git diff  全部的改动，包括没有add的</span><br><span class="line">git diff --stage   显示add的，</span><br><span class="line">git diff  commit1 commit2  （显示两次的不通，输入commit号）</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
            <tag> 常用命令 </tag>
            
            <tag> 删除远程分支 </tag>
            
            <tag> fetch </tag>
            
            <tag> status </tag>
            
            <tag> branch </tag>
            
            <tag> diff </tag>
            
            <tag> 回滚 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[fiddler代理利器]]></title>
      <url>http://yunsonbai.github.io/2016/05/12/fiddler/</url>
      <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fiddler在前端开发工程师那可以说是利器,同样后端工程师也可能用到尤其是在利用app调试api的时候，</span><br><span class="line">也许你就会用到fiddler</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="只代理某个url"><a href="#只代理某个url" class="headerlink" title="只代理某个url"></a>只代理某个url</h3><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">比如把线上某个url代理到本地/或者调试某个接口,便于调试</span><br></pre></td></tr></table></figure>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">点击AotuResponder,之后把三个复选框全选上,然后点击add ruler</span><br><span class="line">加入:</span><br><span class="line">    regex:.*yunsonbai.com /activity/(.*)</span><br><span class="line">    http://127.0.0.1:8000/activity/<span class="variable">$1</span></span><br></pre></td></tr></table></figure>
<h3 id="设置host"><a href="#设置host" class="headerlink" title="设置host"></a>设置host</h3><h4 id="应用-1"><a href="#应用-1" class="headerlink" title="应用"></a>应用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">把某个域全部代理到本地</span><br></pre></td></tr></table></figure>
<h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">点击Tools-&gt;HOSTS-&gt;选上复选框</span><br><span class="line">加入:</span><br><span class="line">    127.0.0.1:8000 yunsonbai.com</span><br></pre></td></tr></table></figure>
<h3 id="如何让手机也走设置好的代理"><a href="#如何让手机也走设置好的代理" class="headerlink" title="如何让手机也走设置好的代理"></a>如何让手机也走设置好的代理</h3><h4 id="应用-2"><a href="#应用-2" class="headerlink" title="应用"></a>应用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">调试移动端应用</span><br></pre></td></tr></table></figure>
<h4 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">设置wifi代理为手动；</span><br><span class="line">servername: 你电脑的ip/或域名</span><br><span class="line">port: 8888（fiddler默认是启动8888端口）</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://www.telerik.com/fiddler" target="_blank" rel="noopener">Generating</a></p>
]]></content>
      
        <categories>
            
            <category> fiddler </category>
            
        </categories>
        
        
        <tags>
            
            <tag> fiddler </tag>
            
            <tag> 代理 </tag>
            
            <tag> 调试 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo命令]]></title>
      <url>http://yunsonbai.github.io/2016/05/12/hexo%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">记录了一下hexo常用的命令, 在维护个人博客的时候经常会用到</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<h3 id="Insert-image"><a href="#Insert-image" class="headerlink" title="Insert image"></a>Insert image</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% img [class names] /path/to/image [width] [height] [title text [alt text]] %&#125;</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      
        <categories>
            
            <category> 杂谈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> github </tag>
            
            <tag> hexo </tag>
            
            <tag> 命令 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
